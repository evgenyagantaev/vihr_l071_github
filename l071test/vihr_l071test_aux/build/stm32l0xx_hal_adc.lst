ARM GAS  /tmp/cclbkaGF.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32l0xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_uidiv
  18              		.section	.text.ADC_DelayMicroSecond,"ax",%progbits
  19              		.align	2
  20              		.code	16
  21              		.thumb_func
  23              	ADC_DelayMicroSecond:
  24              	.LFB62:
  25              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @file    stm32l0xx_hal_adc.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          "stm32l0xx_hal_adc_ex.c".
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   [..]
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/cclbkaGF.s 			page 2


  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC calibration
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### How to use this driver #####
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Enable the ADC interface
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              Caution: On STM32L0, ADC clock frequency max is 16MHz (refer
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       to device datasheet).
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       Therefore, ADC clock prescaler must be configured in 
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       function of ADC clock source frequency to remain below
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       this maximum frequency.
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    16MHz.
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSIState" must be set either:
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    - to "...HSIState = RCC_HSI_ON" to maintain the HSI16 oscillator
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                 (mandatory)
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                HSI enable                                         (optional: if asynchronous clock 
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI16CalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/cclbkaGF.s 			page 3


  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ADCx_IRQHandler().
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ================================================================
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_Init().
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         monitored, thresholds, ...)
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init().
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         In case of internal temperature sensor to be measured:
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ====================================
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         conversion accuracy
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
ARM GAS  /tmp/cclbkaGF.s 			page 4


 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (this function must be implemented in user program)
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 destination variable address.
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Disable the ADC interface
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock disable
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
ARM GAS  /tmp/cclbkaGF.s 			page 5


 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Deinitialize the DMA
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     *** Callback registration ***
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     =============================================
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      to register an interrupt callback.
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      and a pointer to the user callback function.
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      weak function.
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      and the Callback ID.
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      This function allows to reset following callbacks:
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
ARM GAS  /tmp/cclbkaGF.s 			page 6


 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      are set to the corresponding weak functions.
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     @endverbatim
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @attention
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * All rights reserved.</center></h2>
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************  
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #include "stm32l0xx_hal.h"
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @addtogroup STM32L0xx_HAL_Driver
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC ADC
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief ADC HAL module driver
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cclbkaGF.s 			page 7


 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for ADC stabilization time.                                          */
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 1us (refer to device datasheet, parameter tSTART). */
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_STAB_DELAY_US       ((uint32_t) 1U)
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for temperature sensor stabilization time. */
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 10us (refer to device datasheet, parameter tSTART). */
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_TEMPSENSOR_DELAY_US ((uint32_t) 10U) 
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond);
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim    
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) De-initialize the ADC.
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to  
ARM GAS  /tmp/cclbkaGF.s 			page 8


 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         depending on possible clock sources: APB clock of HSI clock.
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init() 
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (in case of previous ADC operations: function HAL_ADC_DeInit() must be called first).
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In case of internal temperature sensor to be measured:
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
ARM GAS  /tmp/cclbkaGF.s 			page 9


 433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Initialize ADC error code */
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the ADC Callback settings */
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the low level hardware */
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
 461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the low level hardware */
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */
 469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on the fly).                                                             */
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL);
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                            */
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated only when ADC is disabled:              */
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock mode                                                      */
ARM GAS  /tmp/cclbkaGF.s 			page 10


 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock prescaler                                                 */
 491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC Resolution                                                      */
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Some parameters of this register are not reset, since they are set   */
 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by other functions and must be kept in case of usage of this         */
 496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* without needing to reconfigure all other ADC groups/channels         */
 498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* parameters):                                                         */
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*     (set into HAL_ADC_ConfigChannel() )                              */
 501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC clock: clock source PCLK or asynchronous with 
 503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     selectable prescaler */
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC:                                                */
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Resolution                                                        */
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the Low Frequency mode */
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable voltage regulator (if disabled at this step) */
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADVREGEN bit */
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR |= ADC_CR_ADVREGEN;
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC:                                                    */
 524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Resolution                                                            */
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Data alignment                                                        */
 526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Scan direction                                                        */
 527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger to start conversion                                  */
 528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger polarity                                             */
 529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Continuous conversion mode                                            */
 530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - DMA continuous request                                                */
 531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Overrun                                                               */
 532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - AutoDelay feature                                                     */
 533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Discontinuous mode                                                    */
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTSEL  |
 537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTEN   |
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_CONT    |
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DMACFG  |
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_OVRMOD  |
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTDLY  |
 542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  |
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DISCEN   );
 544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
ARM GAS  /tmp/cclbkaGF.s 			page 11


 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
 554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* start.                                                                 */
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
 556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       software start.                                                  */
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable discontinuous mode only if continuous mode is disabled */
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode == ENABLE)
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.ContinuousConvMode == DISABLE)
 568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the selected ADC group regular discontinuous mode */
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADC regular group discontinuous was intended to be enabled,        */
 575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* but ADC regular group modes continuous and sequencer discontinuous */
 576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* cannot be enabled simultaneously.                                  */
 577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of Oversampler:                                          */
 593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Oversampling Ratio                                                  */
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Right bit shift                                                     */
 595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Triggered mode                                                      */
 596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_TOVS );
 600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
ARM GAS  /tmp/cclbkaGF.s 			page 12


 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable OverSampling mode */
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable OverSampling mode if needed */
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }    
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear the old sampling time */
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the new sample time */
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear ADC error code */
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the ADC state */
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_READY);
 630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         common group is still running.
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
 646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/cclbkaGF.s 			page 13


 661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Change ADC state */
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register IER */
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register ISR */
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CR */
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable voltage regulator */
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Regulator disable useful for power saving */
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset ADVREGEN bit */
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable 
 705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* No action */
 706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR1 */
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
 711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
 712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR2 */
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/cclbkaGF.s 			page 14


 718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register SMPR */
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register TR */
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register DR */
 733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*                                                                        */
 744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* DeInit the low level hardware */
 754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
 756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* DeInit the low level hardware */
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC error code to none */
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
ARM GAS  /tmp/cclbkaGF.s 			page 15


 775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
 777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This parameter can be one of the following values:
 812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (pCallback == NULL)
 829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update the error code */
 831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
ARM GAS  /tmp/cclbkaGF.s 			page 16


 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     switch (CallbackID)
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       default :
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update the error code */
 866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Return error status */
 869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         status = HAL_ERROR;
 870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     switch (CallbackID)
 876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       default :
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update the error code */
 887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /tmp/cclbkaGF.s 			page 17


 889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Return error status */
 890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         status = HAL_ERROR;
 891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update the error code */
 897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Return error status */
 900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     status =  HAL_ERROR;
 901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return status;
 904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This parameter can be one of the following values:
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     switch (CallbackID)
 931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
ARM GAS  /tmp/cclbkaGF.s 			page 18


 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       default :
 957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update the error code */
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Return error status */
 961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         status =  HAL_ERROR;
 962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     switch (CallbackID)
 968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       default :
 978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update the error code */
 979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Return error status */
 982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         status =  HAL_ERROR;
 983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         break;
 984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update the error code */
 989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Return error status */
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     status =  HAL_ERROR;
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return status;
 996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
ARM GAS  /tmp/cclbkaGF.s 			page 19


1003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
1006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
1008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       ##### IO operation functions #####
1010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group.
1013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group.
1014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion event.
1016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Handle ADC interrupt request
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/cclbkaGF.s 			page 20


1060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /tmp/cclbkaGF.s 			page 21


1117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
1139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
1146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
1155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC   = 0x00;
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
1162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
1164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* each conversion:                                                       */
1170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
ARM GAS  /tmp/cclbkaGF.s 			page 22


1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
1175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
1187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
1192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
1195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
1200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
1205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
1208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update ADC state machine */
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
1219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
1221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
1224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
1230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
ARM GAS  /tmp/cclbkaGF.s 			page 23


1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC state */
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
1235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       else
1239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Change ADC state to error state */
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
1244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
1250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
1251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
1253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Poll for ADC event.
1264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  EventType the ADC event type.
1266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          This parameter can be one of the following values:
1267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set  
1272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten 
1273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR); 
1276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
1281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
ARM GAS  /tmp/cclbkaGF.s 			page 24


1288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check selected event flag */
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
1296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
1301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
1304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   switch(EventType)
1309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Overrun event */
1320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* considered as an error.                                                */
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
ARM GAS  /tmp/cclbkaGF.s 			page 25


1345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence), 
1347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         OVR overrun.
1348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure 
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() doesn't enable the End Of Sampling 
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         mode), the user must:
1355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP) 
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
ARM GAS  /tmp/cclbkaGF.s 			page 26


1402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         default:
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
ARM GAS  /tmp/cclbkaGF.s 			page 27


1459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete. 
1486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  pData Destination Buffer address.
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
1490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/cclbkaGF.s 			page 28


1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA error callback */
1538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Start the DMA channel */
1556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
ARM GAS  /tmp/cclbkaGF.s 			page 29


1573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC peripheral.
1578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_Disable(hadc);
1625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/cclbkaGF.s 			page 30


1630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            to flag EOC.
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To clear this flag, either use function:
1658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC converted value */ 
1673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->Instance->DR;
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
ARM GAS  /tmp/cclbkaGF.s 			page 31


1687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
1718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
1723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
1725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
1739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
ARM GAS  /tmp/cclbkaGF.s 			page 32


1744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Management of low power auto-wait enabled: flags must be cleared */
1748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       by user when fetching ADC conversion data.                       */
1749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       This case is managed in IRQ handler, but this low-power mode     */
1750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       should not be used with programming model IT or DMA.             */
1751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Refer to comment of parameter "LowPowerAutoWait".                */
1752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoWait != ENABLE)
1753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check analog watchdog 1 flag ========== */
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
1767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* error.                                                                 */
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
1797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /tmp/cclbkaGF.s 			page 33


1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear the Overrun flag */
1802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
1809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
1824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
1839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
1854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
1855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
ARM GAS  /tmp/cclbkaGF.s 			page 34


1858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
1882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================  
1885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure channels on regular group
1887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure the analog watchdog
1888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
1895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         VrefInt/Vlcd(STM32L0x3xx only)/TempSensor.
1897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting).
1900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         TS_vlcd (STM32L0x3xx only), TS_temp (values rough order: 5us to 17us).
1902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
1906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
1907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
1908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         without resetting the ADC.
1909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
1910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
1911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
1912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel assigned to ADC group regular.
1913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
ARM GAS  /tmp/cclbkaGF.s 			page 35


1915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Channel number                                                        */
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
1931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (sConfig->Rank != ADC_RANK_NONE)
1940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable selected channels */
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
1943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: Vlcd (STM32L0x3xx only)/VrefInt/TempSensor */
1945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths enable: If internal channel selected, enable  */
1946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* dedicated internal buffers and path.                                     */
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     #if defined(ADC_CCR_TSEN)
1949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Temperature sensor channel is selected, then enable the internal      */
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* buffers and path  */
1951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_TSEN;   
1954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
1957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     #endif
1959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VREFEN;   
1964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VLCDEN;   
1971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
ARM GAS  /tmp/cclbkaGF.s 			page 36


1972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Regular sequence configuration */
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset the channel selection register from the selected channel */
1978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
1979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths disable: If internal channel selected,    */
1982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* disable dedicated internal buffers and path.                         */
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     #if defined(ADC_CCR_TSEN)
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_TSEN;   
1987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     #endif
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VREFEN;   
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VLCDEN;   
2001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
2003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive  
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
2017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting 
2018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the ADC.
2019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
2021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is on going.
2024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
ARM GAS  /tmp/cclbkaGF.s 			page 37


2029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
2032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
2033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
2039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
2040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
2052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
2053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
2054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
2057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
2062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
2067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
2069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
2070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
2072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                        */
2078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the analog watchdog mode                                          */
2079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog              */
2080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
2081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
2082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
2083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDCH);
2084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
ARM GAS  /tmp/cclbkaGF.s 			page 38


2086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds  */
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
2092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear High & Low high thresholds */
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
2096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the high threshold */
2098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
2099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
2100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR |= tmpAWDLowThresholdShifted;
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
2103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
2104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
2107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
2110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
2113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
2116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
2117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
2122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC Peripheral State functions
2126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
2127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim
2128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
2129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
2131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
2132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     peripheral.
2134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC state
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC error code
2136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
2138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
2139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC handle state.
ARM GAS  /tmp/cclbkaGF.s 			page 39


2143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
2144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         compared with states bits.
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For example:                                                         
2146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
2148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC handle state */
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->State;
2158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC error code.
2162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->ErrorCode;
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
2175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
2179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
2190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed automatically by hardware.
2191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
2192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
2193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
2194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
2195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
ARM GAS  /tmp/cclbkaGF.s 			page 40


2200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
2207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
2209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
2210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
2212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
2218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
2221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
2222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Delay for ADC stabilization time. */
2224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
2225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
2231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
2233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
2238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
2245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
2251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped.
2253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cclbkaGF.s 			page 41


2257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
2261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
2262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       disabled.                                                          */
2263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
2264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
2266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
2267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC peripheral */
2269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
2270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
2272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
2274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
2280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      
2282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
2294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped to disable the ADC.
2310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc ADC handle
2311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/cclbkaGF.s 			page 42


2314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* this function if not needed.                                             */
2322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
2323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
2328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
2329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Stop conversions on regular group */
2331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
2332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
2339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
2346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
2354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
ARM GAS  /tmp/cclbkaGF.s 			page 43


2371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
2373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
2378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
2394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
2399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
2401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
2410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
2413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
2417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Call DMA error callback */
2419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
ARM GAS  /tmp/cclbkaGF.s 			page 44


2428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
2429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Half conversion callback */
2434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
2437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
2438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA error callback.
2443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
2452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
2456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Error callback */
2458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #else
2461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
2462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Delay micro seconds 
2467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  microSecond  delay
2468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond)
2471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
  26              		.loc 1 2471 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 041C     		mov	r4, r0
2472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Compute number of CPU cycles to wait for */
ARM GAS  /tmp/cclbkaGF.s 			page 45


2473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
  38              		.loc 1 2473 0
  39 0006 084B     		ldr	r3, .L4
  40 0008 1868     		ldr	r0, [r3]
  41              	.LVL1:
  42 000a 0849     		ldr	r1, .L4+4
  43 000c FFF7FEFF 		bl	__aeabi_uidiv
  44              	.LVL2:
  45 0010 4443     		mul	r4, r0
  46              	.LVL3:
  47 0012 0194     		str	r4, [sp, #4]
2474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(waitLoopIndex != 0U)
  48              		.loc 1 2475 0
  49 0014 02E0     		b	.L2
  50              	.L3:
2476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     waitLoopIndex--;
  51              		.loc 1 2477 0
  52 0016 019B     		ldr	r3, [sp, #4]
  53 0018 013B     		sub	r3, r3, #1
  54 001a 0193     		str	r3, [sp, #4]
  55              	.L2:
2475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  56              		.loc 1 2475 0
  57 001c 019B     		ldr	r3, [sp, #4]
  58 001e 002B     		cmp	r3, #0
  59 0020 F9D1     		bne	.L3
2478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   } 
2479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
  60              		.loc 1 2479 0
  61 0022 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0024 10BD     		pop	{r4, pc}
  64              	.L5:
  65 0026 C046     		.align	2
  66              	.L4:
  67 0028 00000000 		.word	SystemCoreClock
  68 002c 40420F00 		.word	1000000
  69              		.cfi_endproc
  70              	.LFE62:
  72              		.section	.text.ADC_ConversionStop,"ax",%progbits
  73              		.align	2
  74              		.code	16
  75              		.thumb_func
  77              	ADC_ConversionStop:
  78              	.LFB58:
2314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
  79              		.loc 1 2314 0
  80              		.cfi_startproc
  81              	.LVL4:
  82 0000 38B5     		push	{r3, r4, r5, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 3, -16
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 5, -8
ARM GAS  /tmp/cclbkaGF.s 			page 46


  88              		.cfi_offset 14, -4
  89              	.LVL5:
2322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  90              		.loc 1 2322 0
  91 0002 0368     		ldr	r3, [r0]
  92 0004 9A68     		ldr	r2, [r3, #8]
  93 0006 5207     		lsl	r2, r2, #29
  94 0008 23D5     		bpl	.L11
2327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
  95              		.loc 1 2327 0
  96 000a 9A68     		ldr	r2, [r3, #8]
  97 000c 5207     		lsl	r2, r2, #29
  98 000e 06D5     		bpl	.L8
2328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
  99              		.loc 1 2328 0 discriminator 1
 100 0010 9A68     		ldr	r2, [r3, #8]
2327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 101              		.loc 1 2327 0 discriminator 1
 102 0012 9207     		lsl	r2, r2, #30
 103 0014 03D4     		bmi	.L8
2331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 104              		.loc 1 2331 0
 105 0016 9968     		ldr	r1, [r3, #8]
 106 0018 1022     		mov	r2, #16
 107 001a 0A43     		orr	r2, r1
 108 001c 9A60     		str	r2, [r3, #8]
 109              	.L8:
 110 001e 041C     		mov	r4, r0
2336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 111              		.loc 1 2336 0
 112 0020 FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL6:
 114 0024 051C     		mov	r5, r0
 115              	.LVL7:
2338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 116              		.loc 1 2338 0
 117 0026 0EE0     		b	.L9
 118              	.LVL8:
 119              	.L10:
2340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 120              		.loc 1 2340 0
 121 0028 FFF7FEFF 		bl	HAL_GetTick
 122              	.LVL9:
 123 002c 401B     		sub	r0, r0, r5
 124 002e 0A28     		cmp	r0, #10
 125 0030 09D9     		bls	.L9
2343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 126              		.loc 1 2343 0
 127 0032 626D     		ldr	r2, [r4, #84]
 128 0034 1023     		mov	r3, #16
 129 0036 1343     		orr	r3, r2
 130 0038 6365     		str	r3, [r4, #84]
2346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 131              		.loc 1 2346 0
 132 003a A26D     		ldr	r2, [r4, #88]
 133 003c 0123     		mov	r3, #1
 134 003e 1343     		orr	r3, r2
ARM GAS  /tmp/cclbkaGF.s 			page 47


 135 0040 A365     		str	r3, [r4, #88]
2348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 136              		.loc 1 2348 0
 137 0042 0120     		mov	r0, #1
 138 0044 06E0     		b	.L7
 139              	.L9:
2338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 140              		.loc 1 2338 0
 141 0046 2368     		ldr	r3, [r4]
 142 0048 9B68     		ldr	r3, [r3, #8]
 143 004a 5B07     		lsl	r3, r3, #29
 144 004c ECD4     		bmi	.L10
2355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 145              		.loc 1 2355 0
 146 004e 0020     		mov	r0, #0
 147 0050 00E0     		b	.L7
 148              	.LVL10:
 149              	.L11:
 150 0052 0020     		mov	r0, #0
 151              	.LVL11:
 152              	.L7:
2356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 153              		.loc 1 2356 0
 154              		@ sp needed
 155 0054 38BD     		pop	{r3, r4, r5, pc}
 156              		.cfi_endproc
 157              	.LFE58:
 159 0056 C046     		.section	.text.ADC_Disable,"ax",%progbits
 160              		.align	2
 161              		.code	16
 162              		.thumb_func
 164              	ADC_Disable:
 165              	.LFB57:
2257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 166              		.loc 1 2257 0
 167              		.cfi_startproc
 168              	.LVL12:
 169 0000 38B5     		push	{r3, r4, r5, lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 16
 172              		.cfi_offset 3, -16
 173              		.cfi_offset 4, -12
 174              		.cfi_offset 5, -8
 175              		.cfi_offset 14, -4
 176              	.LVL13:
2263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 177              		.loc 1 2263 0
 178 0002 0268     		ldr	r2, [r0]
 179 0004 9368     		ldr	r3, [r2, #8]
 180 0006 0321     		mov	r1, #3
 181 0008 0B40     		and	r3, r1
 182 000a 012B     		cmp	r3, #1
 183 000c 04D1     		bne	.L18
2263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 184              		.loc 1 2263 0 is_stmt 0 discriminator 1
 185 000e 1368     		ldr	r3, [r2]
 186 0010 DB07     		lsl	r3, r3, #31
ARM GAS  /tmp/cclbkaGF.s 			page 48


 187 0012 03D4     		bmi	.L19
2263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 188              		.loc 1 2263 0
 189 0014 0023     		mov	r3, #0
 190 0016 02E0     		b	.L13
 191              	.L18:
 192 0018 0023     		mov	r3, #0
 193 001a 00E0     		b	.L13
 194              	.L19:
 195 001c 0123     		mov	r3, #1
 196              	.L13:
2263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 197              		.loc 1 2263 0 discriminator 6
 198 001e 002B     		cmp	r3, #0
 199 0020 2FD0     		beq	.L20
2266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 200              		.loc 1 2266 0 is_stmt 1
 201 0022 9368     		ldr	r3, [r2, #8]
 202 0024 0521     		mov	r1, #5
 203 0026 0B40     		and	r3, r1
 204 0028 012B     		cmp	r3, #1
 205 002a 0BD1     		bne	.L15
 206 002c 041C     		mov	r4, r0
2269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 207              		.loc 1 2269 0
 208 002e 9168     		ldr	r1, [r2, #8]
 209 0030 0133     		add	r3, r3, #1
 210 0032 0B43     		orr	r3, r1
 211 0034 9360     		str	r3, [r2, #8]
 212 0036 0368     		ldr	r3, [r0]
 213 0038 0322     		mov	r2, #3
 214 003a 1A60     		str	r2, [r3]
2284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 215              		.loc 1 2284 0
 216 003c FFF7FEFF 		bl	HAL_GetTick
 217              	.LVL14:
 218 0040 051C     		mov	r5, r0
 219              	.LVL15:
2286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 220              		.loc 1 2286 0
 221 0042 18E0     		b	.L16
 222              	.LVL16:
 223              	.L15:
2274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 224              		.loc 1 2274 0
 225 0044 426D     		ldr	r2, [r0, #84]
 226 0046 1023     		mov	r3, #16
 227 0048 1343     		orr	r3, r2
 228 004a 4365     		str	r3, [r0, #84]
2277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 229              		.loc 1 2277 0
 230 004c 826D     		ldr	r2, [r0, #88]
 231 004e 0123     		mov	r3, #1
 232 0050 1343     		orr	r3, r2
 233 0052 8365     		str	r3, [r0, #88]
2279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 234              		.loc 1 2279 0
ARM GAS  /tmp/cclbkaGF.s 			page 49


 235 0054 0120     		mov	r0, #1
 236              	.LVL17:
 237 0056 15E0     		b	.L14
 238              	.LVL18:
 239              	.L17:
2288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 240              		.loc 1 2288 0
 241 0058 FFF7FEFF 		bl	HAL_GetTick
 242              	.LVL19:
 243 005c 401B     		sub	r0, r0, r5
 244 005e 0A28     		cmp	r0, #10
 245 0060 09D9     		bls	.L16
2291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 246              		.loc 1 2291 0
 247 0062 626D     		ldr	r2, [r4, #84]
 248 0064 1023     		mov	r3, #16
 249 0066 1343     		orr	r3, r2
 250 0068 6365     		str	r3, [r4, #84]
2294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 251              		.loc 1 2294 0
 252 006a A26D     		ldr	r2, [r4, #88]
 253 006c 0123     		mov	r3, #1
 254 006e 1343     		orr	r3, r2
 255 0070 A365     		str	r3, [r4, #88]
2296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 256              		.loc 1 2296 0
 257 0072 0120     		mov	r0, #1
 258 0074 06E0     		b	.L14
 259              	.L16:
2286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 260              		.loc 1 2286 0
 261 0076 2368     		ldr	r3, [r4]
 262 0078 9B68     		ldr	r3, [r3, #8]
 263 007a DB07     		lsl	r3, r3, #31
 264 007c ECD4     		bmi	.L17
2302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 265              		.loc 1 2302 0
 266 007e 0020     		mov	r0, #0
 267 0080 00E0     		b	.L14
 268              	.LVL20:
 269              	.L20:
 270 0082 0020     		mov	r0, #0
 271              	.LVL21:
 272              	.L14:
2303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 273              		.loc 1 2303 0
 274              		@ sp needed
 275 0084 38BD     		pop	{r3, r4, r5, pc}
 276              		.cfi_endproc
 277              	.LFE57:
 279 0086 C046     		.section	.text.ADC_Enable,"ax",%progbits
 280              		.align	2
 281              		.code	16
 282              		.thumb_func
 284              	ADC_Enable:
 285              	.LFB56:
2199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
ARM GAS  /tmp/cclbkaGF.s 			page 50


 286              		.loc 1 2199 0
 287              		.cfi_startproc
 288              	.LVL22:
 289 0000 38B5     		push	{r3, r4, r5, lr}
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 3, -16
 293              		.cfi_offset 4, -12
 294              		.cfi_offset 5, -8
 295              		.cfi_offset 14, -4
 296              	.LVL23:
2206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 297              		.loc 1 2206 0
 298 0002 0268     		ldr	r2, [r0]
 299 0004 9368     		ldr	r3, [r2, #8]
 300 0006 0321     		mov	r1, #3
 301 0008 0B40     		and	r3, r1
 302 000a 012B     		cmp	r3, #1
 303 000c 04D1     		bne	.L27
2206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 304              		.loc 1 2206 0 is_stmt 0 discriminator 1
 305 000e 1368     		ldr	r3, [r2]
 306 0010 DB07     		lsl	r3, r3, #31
 307 0012 03D4     		bmi	.L28
2206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 308              		.loc 1 2206 0
 309 0014 0023     		mov	r3, #0
 310 0016 02E0     		b	.L22
 311              	.L27:
 312 0018 0023     		mov	r3, #0
 313 001a 00E0     		b	.L22
 314              	.L28:
 315 001c 0123     		mov	r3, #1
 316              	.L22:
2206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 317              		.loc 1 2206 0 discriminator 6
 318 001e 002B     		cmp	r3, #0
 319 0020 2ED1     		bne	.L29
2209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 320              		.loc 1 2209 0 is_stmt 1
 321 0022 9168     		ldr	r1, [r2, #8]
 322 0024 174B     		ldr	r3, .L30
 323 0026 1942     		tst	r1, r3
 324 0028 09D0     		beq	.L24
2212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 325              		.loc 1 2212 0
 326 002a 426D     		ldr	r2, [r0, #84]
 327 002c 1023     		mov	r3, #16
 328 002e 1343     		orr	r3, r2
 329 0030 4365     		str	r3, [r0, #84]
2215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 330              		.loc 1 2215 0
 331 0032 826D     		ldr	r2, [r0, #88]
 332 0034 0123     		mov	r3, #1
 333 0036 1343     		orr	r3, r2
 334 0038 8365     		str	r3, [r0, #88]
2217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
ARM GAS  /tmp/cclbkaGF.s 			page 51


 335              		.loc 1 2217 0
 336 003a 0120     		mov	r0, #1
 337              	.LVL24:
 338 003c 21E0     		b	.L23
 339              	.LVL25:
 340              	.L24:
 341 003e 041C     		mov	r4, r0
2221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 342              		.loc 1 2221 0
 343 0040 9168     		ldr	r1, [r2, #8]
 344 0042 0123     		mov	r3, #1
 345 0044 0B43     		orr	r3, r1
 346 0046 9360     		str	r3, [r2, #8]
2224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 347              		.loc 1 2224 0
 348 0048 0120     		mov	r0, #1
 349              	.LVL26:
 350 004a FFF7FEFF 		bl	ADC_DelayMicroSecond
 351              	.LVL27:
2227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 352              		.loc 1 2227 0
 353 004e FFF7FEFF 		bl	HAL_GetTick
 354              	.LVL28:
 355 0052 051C     		mov	r5, r0
 356              	.LVL29:
2230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 357              		.loc 1 2230 0
 358 0054 0EE0     		b	.L25
 359              	.LVL30:
 360              	.L26:
2232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 361              		.loc 1 2232 0
 362 0056 FFF7FEFF 		bl	HAL_GetTick
 363              	.LVL31:
 364 005a 401B     		sub	r0, r0, r5
 365 005c 0A28     		cmp	r0, #10
 366 005e 09D9     		bls	.L25
2235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 367              		.loc 1 2235 0
 368 0060 626D     		ldr	r2, [r4, #84]
 369 0062 1023     		mov	r3, #16
 370 0064 1343     		orr	r3, r2
 371 0066 6365     		str	r3, [r4, #84]
2238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 372              		.loc 1 2238 0
 373 0068 A26D     		ldr	r2, [r4, #88]
 374 006a 0123     		mov	r3, #1
 375 006c 1343     		orr	r3, r2
 376 006e A365     		str	r3, [r4, #88]
2240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 377              		.loc 1 2240 0
 378 0070 0120     		mov	r0, #1
 379 0072 06E0     		b	.L23
 380              	.L25:
2230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 381              		.loc 1 2230 0
 382 0074 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cclbkaGF.s 			page 52


 383 0076 1B68     		ldr	r3, [r3]
 384 0078 DB07     		lsl	r3, r3, #31
 385 007a ECD5     		bpl	.L26
2246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 386              		.loc 1 2246 0
 387 007c 0020     		mov	r0, #0
 388 007e 00E0     		b	.L23
 389              	.LVL32:
 390              	.L29:
 391 0080 0020     		mov	r0, #0
 392              	.LVL33:
 393              	.L23:
2247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 394              		.loc 1 2247 0
 395              		@ sp needed
 396 0082 38BD     		pop	{r3, r4, r5, pc}
 397              	.L31:
 398              		.align	2
 399              	.L30:
 400 0084 17000080 		.word	-2147483625
 401              		.cfi_endproc
 402              	.LFE56:
 404              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 405              		.align	2
 406              		.weak	HAL_ADC_MspInit
 407              		.code	16
 408              		.thumb_func
 410              	HAL_ADC_MspInit:
 411              	.LFB36:
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 412              		.loc 1 780 0
 413              		.cfi_startproc
 414              	.LVL34:
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 415              		.loc 1 787 0
 416              		@ sp needed
 417 0000 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE36:
 421 0002 C046     		.section	.text.HAL_ADC_Init,"ax",%progbits
 422              		.align	2
 423              		.global	HAL_ADC_Init
 424              		.code	16
 425              		.thumb_func
 427              	HAL_ADC_Init:
 428              	.LFB34:
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 429              		.loc 1 403 0
 430              		.cfi_startproc
 431              	.LVL35:
 432 0000 38B5     		push	{r3, r4, r5, lr}
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 3, -16
 436              		.cfi_offset 4, -12
 437              		.cfi_offset 5, -8
 438              		.cfi_offset 14, -4
ARM GAS  /tmp/cclbkaGF.s 			page 53


 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 439              		.loc 1 406 0
 440 0002 0028     		cmp	r0, #0
 441 0004 00D1     		bne	.LCB422
 442 0006 E3E0     		b	.L50	@long jump
 443              	.LCB422:
 444 0008 041C     		mov	r4, r0
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 445              		.loc 1 438 0
 446 000a 436D     		ldr	r3, [r0, #84]
 447 000c 002B     		cmp	r3, #0
 448 000e 04D1     		bne	.L35
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 449              		.loc 1 441 0
 450 0010 8365     		str	r3, [r0, #88]
 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 451              		.loc 1 444 0
 452 0012 5022     		mov	r2, #80
 453 0014 8354     		strb	r3, [r0, r2]
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 454              		.loc 1 462 0
 455 0016 FFF7FEFF 		bl	HAL_ADC_MspInit
 456              	.LVL36:
 457              	.L35:
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 458              		.loc 1 471 0
 459 001a 636D     		ldr	r3, [r4, #84]
 460 001c DB06     		lsl	r3, r3, #27
 461 001e 04D4     		bmi	.L36
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 462              		.loc 1 472 0 discriminator 1
 463 0020 2268     		ldr	r2, [r4]
 464 0022 9368     		ldr	r3, [r2, #8]
 465 0024 0421     		mov	r1, #4
 466 0026 0B40     		and	r3, r1
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 467              		.loc 1 471 0 discriminator 1
 468 0028 08D0     		beq	.L37
 469              	.L36:
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 470              		.loc 1 475 0
 471 002a 626D     		ldr	r2, [r4, #84]
 472 002c 1023     		mov	r3, #16
 473 002e 1343     		orr	r3, r2
 474 0030 6365     		str	r3, [r4, #84]
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 475              		.loc 1 478 0
 476 0032 0022     		mov	r2, #0
 477 0034 5023     		mov	r3, #80
 478 0036 E254     		strb	r2, [r4, r3]
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 479              		.loc 1 479 0
 480 0038 0120     		mov	r0, #1
 481 003a CAE0     		b	.L34
 482              	.L37:
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 483              		.loc 1 483 0
ARM GAS  /tmp/cclbkaGF.s 			page 54


 484 003c 606D     		ldr	r0, [r4, #84]
 485 003e 6549     		ldr	r1, .L53
 486 0040 0140     		and	r1, r0
 487 0042 0220     		mov	r0, #2
 488 0044 0143     		orr	r1, r0
 489 0046 6165     		str	r1, [r4, #84]
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 490              		.loc 1 492 0
 491 0048 9168     		ldr	r1, [r2, #8]
 492 004a 0130     		add	r0, r0, #1
 493 004c 0140     		and	r1, r0
 494 004e 0129     		cmp	r1, #1
 495 0050 04D1     		bne	.L51
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 496              		.loc 1 492 0 is_stmt 0 discriminator 1
 497 0052 1168     		ldr	r1, [r2]
 498 0054 C907     		lsl	r1, r1, #31
 499 0056 03D4     		bmi	.L52
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 500              		.loc 1 492 0
 501 0058 0021     		mov	r1, #0
 502 005a 02E0     		b	.L38
 503              	.L51:
 504 005c 0021     		mov	r1, #0
 505 005e 00E0     		b	.L38
 506              	.L52:
 507 0060 0121     		mov	r1, #1
 508              	.L38:
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 509              		.loc 1 492 0 discriminator 6
 510 0062 0029     		cmp	r1, #0
 511 0064 2DD1     		bne	.L39
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 512              		.loc 1 504 0 is_stmt 1
 513 0066 6168     		ldr	r1, [r4, #4]
 514 0068 C020     		mov	r0, #192
 515 006a 0006     		lsl	r0, r0, #24
 516 006c 8142     		cmp	r1, r0
 517 006e 07D0     		beq	.L40
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 518              		.loc 1 504 0 is_stmt 0 discriminator 2
 519 0070 8020     		mov	r0, #128
 520 0072 C005     		lsl	r0, r0, #23
 521 0074 8142     		cmp	r1, r0
 522 0076 03D0     		beq	.L40
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 523              		.loc 1 504 0 discriminator 4
 524 0078 8020     		mov	r0, #128
 525 007a 0006     		lsl	r0, r0, #24
 526 007c 8142     		cmp	r1, r0
 527 007e 09D1     		bne	.L41
 528              	.L40:
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 529              		.loc 1 504 0 discriminator 5
 530 0080 1169     		ldr	r1, [r2, #16]
 531 0082 8900     		lsl	r1, r1, #2
 532 0084 8908     		lsr	r1, r1, #2
ARM GAS  /tmp/cclbkaGF.s 			page 55


 533 0086 1161     		str	r1, [r2, #16]
 534 0088 2168     		ldr	r1, [r4]
 535 008a 0A69     		ldr	r2, [r1, #16]
 536 008c 6068     		ldr	r0, [r4, #4]
 537 008e 0243     		orr	r2, r0
 538 0090 0A61     		str	r2, [r1, #16]
 539 0092 0CE0     		b	.L42
 540              	.L41:
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 541              		.loc 1 504 0 discriminator 6
 542 0094 1169     		ldr	r1, [r2, #16]
 543 0096 8900     		lsl	r1, r1, #2
 544 0098 8908     		lsr	r1, r1, #2
 545 009a 1161     		str	r1, [r2, #16]
 546 009c 4E4A     		ldr	r2, .L53+4
 547 009e 1068     		ldr	r0, [r2]
 548 00a0 4E49     		ldr	r1, .L53+8
 549 00a2 0140     		and	r1, r0
 550 00a4 1160     		str	r1, [r2]
 551 00a6 1168     		ldr	r1, [r2]
 552 00a8 6068     		ldr	r0, [r4, #4]
 553 00aa 0143     		orr	r1, r0
 554 00ac 1160     		str	r1, [r2]
 555              	.L42:
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 556              		.loc 1 508 0 is_stmt 1
 557 00ae 2168     		ldr	r1, [r4]
 558 00b0 CA68     		ldr	r2, [r1, #12]
 559 00b2 1820     		mov	r0, #24
 560 00b4 8243     		bic	r2, r0
 561 00b6 CA60     		str	r2, [r1, #12]
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 562              		.loc 1 509 0
 563 00b8 2168     		ldr	r1, [r4]
 564 00ba CA68     		ldr	r2, [r1, #12]
 565 00bc A068     		ldr	r0, [r4, #8]
 566 00be 0243     		orr	r2, r0
 567 00c0 CA60     		str	r2, [r1, #12]
 568              	.L39:
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 569              		.loc 1 513 0
 570 00c2 4549     		ldr	r1, .L53+4
 571 00c4 0868     		ldr	r0, [r1]
 572 00c6 464A     		ldr	r2, .L53+12
 573 00c8 0240     		and	r2, r0
 574 00ca 0A60     		str	r2, [r1]
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 575              		.loc 1 514 0
 576 00cc 0868     		ldr	r0, [r1]
 577 00ce 626B     		ldr	r2, [r4, #52]
 578 00d0 5206     		lsl	r2, r2, #25
 579 00d2 0243     		orr	r2, r0
 580 00d4 0A60     		str	r2, [r1]
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 581              		.loc 1 517 0
 582 00d6 2268     		ldr	r2, [r4]
 583 00d8 9168     		ldr	r1, [r2, #8]
ARM GAS  /tmp/cclbkaGF.s 			page 56


 584 00da C900     		lsl	r1, r1, #3
 585 00dc 04D4     		bmi	.L43
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 586              		.loc 1 520 0
 587 00de 9168     		ldr	r1, [r2, #8]
 588 00e0 8020     		mov	r0, #128
 589 00e2 4005     		lsl	r0, r0, #21
 590 00e4 0143     		orr	r1, r0
 591 00e6 9160     		str	r1, [r2, #8]
 592              	.L43:
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 593              		.loc 1 534 0
 594 00e8 2168     		ldr	r1, [r4]
 595 00ea C868     		ldr	r0, [r1, #12]
 596 00ec 3D4A     		ldr	r2, .L53+16
 597 00ee 0240     		and	r2, r0
 598 00f0 CA60     		str	r2, [r1, #12]
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 599              		.loc 1 545 0
 600 00f2 2068     		ldr	r0, [r4]
 601 00f4 C568     		ldr	r5, [r0, #12]
 602 00f6 E268     		ldr	r2, [r4, #12]
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 603              		.loc 1 546 0
 604 00f8 2169     		ldr	r1, [r4, #16]
 605 00fa 0229     		cmp	r1, #2
 606 00fc 00D1     		bne	.L44
 607 00fe 0423     		mov	r3, #4
 608              	.L44:
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 609              		.loc 1 545 0
 610 0100 1A43     		orr	r2, r3
 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 611              		.loc 1 547 0
 612 0102 2023     		mov	r3, #32
 613 0104 E35C     		ldrb	r3, [r4, r3]
 614 0106 5B03     		lsl	r3, r3, #13
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 615              		.loc 1 546 0
 616 0108 1A43     		orr	r2, r3
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 617              		.loc 1 548 0
 618 010a 2C23     		mov	r3, #44
 619 010c E15C     		ldrb	r1, [r4, r3]
 620 010e 4900     		lsl	r1, r1, #1
 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 621              		.loc 1 547 0
 622 0110 0A43     		orr	r2, r1
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 623              		.loc 1 548 0
 624 0112 236B     		ldr	r3, [r4, #48]
 625 0114 1343     		orr	r3, r2
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 626              		.loc 1 550 0
 627 0116 A269     		ldr	r2, [r4, #24]
 628 0118 9103     		lsl	r1, r2, #14
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
ARM GAS  /tmp/cclbkaGF.s 			page 57


 629              		.loc 1 549 0
 630 011a 0B43     		orr	r3, r1
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 631              		.loc 1 551 0
 632 011c E269     		ldr	r2, [r4, #28]
 633 011e D203     		lsl	r2, r2, #15
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 634              		.loc 1 550 0
 635 0120 1343     		orr	r3, r2
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 636              		.loc 1 545 0
 637 0122 2B43     		orr	r3, r5
 638 0124 C360     		str	r3, [r0, #12]
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 639              		.loc 1 558 0
 640 0126 636A     		ldr	r3, [r4, #36]
 641 0128 C222     		mov	r2, #194
 642 012a FF32     		add	r2, r2, #255
 643 012c 9342     		cmp	r3, r2
 644 012e 05D0     		beq	.L45
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 645              		.loc 1 560 0
 646 0130 2268     		ldr	r2, [r4]
 647 0132 D168     		ldr	r1, [r2, #12]
 648 0134 A06A     		ldr	r0, [r4, #40]
 649 0136 0343     		orr	r3, r0
 650 0138 0B43     		orr	r3, r1
 651 013a D360     		str	r3, [r2, #12]
 652              	.L45:
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 653              		.loc 1 565 0
 654 013c 2123     		mov	r3, #33
 655 013e E35C     		ldrb	r3, [r4, r3]
 656 0140 012B     		cmp	r3, #1
 657 0142 12D1     		bne	.L46
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 658              		.loc 1 567 0
 659 0144 1F33     		add	r3, r3, #31
 660 0146 E35C     		ldrb	r3, [r4, r3]
 661 0148 002B     		cmp	r3, #0
 662 014a 06D1     		bne	.L47
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 663              		.loc 1 570 0
 664 014c 2268     		ldr	r2, [r4]
 665 014e D368     		ldr	r3, [r2, #12]
 666 0150 8021     		mov	r1, #128
 667 0152 4902     		lsl	r1, r1, #9
 668 0154 0B43     		orr	r3, r1
 669 0156 D360     		str	r3, [r2, #12]
 670 0158 07E0     		b	.L46
 671              	.L47:
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 672              		.loc 1 579 0
 673 015a 626D     		ldr	r2, [r4, #84]
 674 015c 2023     		mov	r3, #32
 675 015e 1343     		orr	r3, r2
 676 0160 6365     		str	r3, [r4, #84]
ARM GAS  /tmp/cclbkaGF.s 			page 58


 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 677              		.loc 1 582 0
 678 0162 A26D     		ldr	r2, [r4, #88]
 679 0164 0123     		mov	r3, #1
 680 0166 1343     		orr	r3, r2
 681 0168 A365     		str	r3, [r4, #88]
 682              	.L46:
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 683              		.loc 1 586 0
 684 016a E36B     		ldr	r3, [r4, #60]
 685 016c 012B     		cmp	r3, #1
 686 016e 13D1     		bne	.L48
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 687              		.loc 1 597 0
 688 0170 2268     		ldr	r2, [r4]
 689 0172 1169     		ldr	r1, [r2, #16]
 690 0174 1C4B     		ldr	r3, .L53+20
 691 0176 0B40     		and	r3, r1
 692 0178 1361     		str	r3, [r2, #16]
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 693              		.loc 1 601 0
 694 017a 2268     		ldr	r2, [r4]
 695 017c 1169     		ldr	r1, [r2, #16]
 696 017e 236C     		ldr	r3, [r4, #64]
 697 0180 606C     		ldr	r0, [r4, #68]
 698 0182 0343     		orr	r3, r0
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 699              		.loc 1 602 0
 700 0184 A06C     		ldr	r0, [r4, #72]
 701 0186 0343     		orr	r3, r0
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 702              		.loc 1 601 0
 703 0188 0B43     		orr	r3, r1
 704 018a 1361     		str	r3, [r2, #16]
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 705              		.loc 1 606 0
 706 018c 2268     		ldr	r2, [r4]
 707 018e 1169     		ldr	r1, [r2, #16]
 708 0190 0123     		mov	r3, #1
 709 0192 0B43     		orr	r3, r1
 710 0194 1361     		str	r3, [r2, #16]
 711 0196 07E0     		b	.L49
 712              	.L48:
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 713              		.loc 1 610 0
 714 0198 2368     		ldr	r3, [r4]
 715 019a 1A69     		ldr	r2, [r3, #16]
 716 019c D207     		lsl	r2, r2, #31
 717 019e 03D5     		bpl	.L49
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 718              		.loc 1 613 0
 719 01a0 1A69     		ldr	r2, [r3, #16]
 720 01a2 0121     		mov	r1, #1
 721 01a4 8A43     		bic	r2, r1
 722 01a6 1A61     		str	r2, [r3, #16]
 723              	.L49:
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/cclbkaGF.s 			page 59


 724              		.loc 1 618 0
 725 01a8 2268     		ldr	r2, [r4]
 726 01aa 5369     		ldr	r3, [r2, #20]
 727 01ac 0721     		mov	r1, #7
 728 01ae 8B43     		bic	r3, r1
 729 01b0 5361     		str	r3, [r2, #20]
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 730              		.loc 1 621 0
 731 01b2 2268     		ldr	r2, [r4]
 732 01b4 5369     		ldr	r3, [r2, #20]
 733 01b6 A16B     		ldr	r1, [r4, #56]
 734 01b8 0B43     		orr	r3, r1
 735 01ba 5361     		str	r3, [r2, #20]
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 736              		.loc 1 624 0
 737 01bc 0023     		mov	r3, #0
 738 01be A365     		str	r3, [r4, #88]
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 739              		.loc 1 627 0
 740 01c0 636D     		ldr	r3, [r4, #84]
 741 01c2 0322     		mov	r2, #3
 742 01c4 9343     		bic	r3, r2
 743 01c6 023A     		sub	r2, r2, #2
 744 01c8 1343     		orr	r3, r2
 745 01ca 6365     		str	r3, [r4, #84]
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 746              		.loc 1 633 0
 747 01cc 0020     		mov	r0, #0
 748 01ce 00E0     		b	.L34
 749              	.LVL37:
 750              	.L50:
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 751              		.loc 1 408 0
 752 01d0 0120     		mov	r0, #1
 753              	.LVL38:
 754              	.L34:
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 755              		.loc 1 634 0
 756              		@ sp needed
 757 01d2 38BD     		pop	{r3, r4, r5, pc}
 758              	.L54:
 759              		.align	2
 760              	.L53:
 761 01d4 FDFEFFFF 		.word	-259
 762 01d8 08270140 		.word	1073817352
 763 01dc FFFFC3FF 		.word	-3932161
 764 01e0 FFFFFFFD 		.word	-33554433
 765 01e4 1902FEFF 		.word	-130535
 766 01e8 03FCFFFF 		.word	-1021
 767              		.cfi_endproc
 768              	.LFE34:
 770              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 771              		.align	2
 772              		.weak	HAL_ADC_MspDeInit
 773              		.code	16
 774              		.thumb_func
 776              	HAL_ADC_MspDeInit:
ARM GAS  /tmp/cclbkaGF.s 			page 60


 777              	.LFB37:
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 778              		.loc 1 795 0
 779              		.cfi_startproc
 780              	.LVL39:
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 781              		.loc 1 802 0
 782              		@ sp needed
 783 0000 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE37:
 787 0002 C046     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 788              		.align	2
 789              		.global	HAL_ADC_DeInit
 790              		.code	16
 791              		.thumb_func
 793              	HAL_ADC_DeInit:
 794              	.LFB35:
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 795              		.loc 1 649 0
 796              		.cfi_startproc
 797              	.LVL40:
 798 0000 38B5     		push	{r3, r4, r5, lr}
 799              	.LCFI6:
 800              		.cfi_def_cfa_offset 16
 801              		.cfi_offset 3, -16
 802              		.cfi_offset 4, -12
 803              		.cfi_offset 5, -8
 804              		.cfi_offset 14, -4
 805              	.LVL41:
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 806              		.loc 1 653 0
 807 0002 0028     		cmp	r0, #0
 808 0004 48D0     		beq	.L60
 809 0006 041C     		mov	r4, r0
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 810              		.loc 1 662 0
 811 0008 426D     		ldr	r2, [r0, #84]
 812 000a 0223     		mov	r3, #2
 813 000c 1343     		orr	r3, r2
 814 000e 4365     		str	r3, [r0, #84]
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 815              		.loc 1 665 0
 816 0010 FFF7FEFF 		bl	ADC_ConversionStop
 817              	.LVL42:
 818 0014 051E     		sub	r5, r0, #0
 819              	.LVL43:
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 820              		.loc 1 668 0
 821 0016 07D1     		bne	.L58
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 822              		.loc 1 671 0
 823 0018 201C     		mov	r0, r4
 824              	.LVL44:
 825 001a FFF7FEFF 		bl	ADC_Disable
 826              	.LVL45:
 827 001e 051E     		sub	r5, r0, #0
ARM GAS  /tmp/cclbkaGF.s 			page 61


 828              	.LVL46:
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 829              		.loc 1 674 0
 830 0020 012D     		cmp	r5, #1
 831 0022 01D0     		beq	.L58
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 832              		.loc 1 677 0
 833 0024 0123     		mov	r3, #1
 834 0026 6365     		str	r3, [r4, #84]
 835              	.LVL47:
 836              	.L58:
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 837              		.loc 1 684 0
 838 0028 012D     		cmp	r5, #1
 839 002a 30D0     		beq	.L59
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 840              		.loc 1 689 0
 841 002c 2268     		ldr	r2, [r4]
 842 002e 5168     		ldr	r1, [r2, #4]
 843 0030 1A4B     		ldr	r3, .L61
 844 0032 0B40     		and	r3, r1
 845 0034 5360     		str	r3, [r2, #4]
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 846              		.loc 1 694 0
 847 0036 2368     		ldr	r3, [r4]
 848 0038 194A     		ldr	r2, .L61+4
 849 003a 1A60     		str	r2, [r3]
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 850              		.loc 1 702 0
 851 003c 2268     		ldr	r2, [r4]
 852 003e 9168     		ldr	r1, [r2, #8]
 853 0040 184B     		ldr	r3, .L61+8
 854 0042 0B40     		and	r3, r1
 855 0044 9360     		str	r3, [r2, #8]
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 856              		.loc 1 708 0
 857 0046 2268     		ldr	r2, [r4]
 858 0048 D168     		ldr	r1, [r2, #12]
 859 004a 174B     		ldr	r3, .L61+12
 860 004c 0B40     		and	r3, r1
 861 004e D360     		str	r3, [r2, #12]
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 862              		.loc 1 715 0
 863 0050 2268     		ldr	r2, [r4]
 864 0052 1169     		ldr	r1, [r2, #16]
 865 0054 154B     		ldr	r3, .L61+16
 866 0056 0B40     		and	r3, r1
 867 0058 1361     		str	r3, [r2, #16]
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 868              		.loc 1 720 0
 869 005a 2268     		ldr	r2, [r4]
 870 005c 5369     		ldr	r3, [r2, #20]
 871 005e 0721     		mov	r1, #7
 872 0060 8B43     		bic	r3, r1
 873 0062 5361     		str	r3, [r2, #20]
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 874              		.loc 1 723 0
ARM GAS  /tmp/cclbkaGF.s 			page 62


 875 0064 2268     		ldr	r2, [r4]
 876 0066 116A     		ldr	r1, [r2, #32]
 877 0068 114B     		ldr	r3, .L61+20
 878 006a 0B40     		and	r3, r1
 879 006c 1362     		str	r3, [r2, #32]
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 880              		.loc 1 726 0
 881 006e 2168     		ldr	r1, [r4]
 882 0070 B423     		mov	r3, #180
 883 0072 CA58     		ldr	r2, [r1, r3]
 884 0074 7F20     		mov	r0, #127
 885 0076 8243     		bic	r2, r0
 886 0078 CA50     		str	r2, [r1, r3]
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 887              		.loc 1 736 0
 888 007a 2168     		ldr	r1, [r4]
 889 007c CA58     		ldr	r2, [r1, r3]
 890 007e 8243     		bic	r2, r0
 891 0080 CA50     		str	r2, [r1, r3]
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 892              		.loc 1 757 0
 893 0082 201C     		mov	r0, r4
 894 0084 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 895              	.LVL48:
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 896              		.loc 1 761 0
 897 0088 0023     		mov	r3, #0
 898 008a A365     		str	r3, [r4, #88]
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 899              		.loc 1 764 0
 900 008c 6365     		str	r3, [r4, #84]
 901              	.L59:
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 902              		.loc 1 768 0
 903 008e 0022     		mov	r2, #0
 904 0090 5023     		mov	r3, #80
 905 0092 E254     		strb	r2, [r4, r3]
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 906              		.loc 1 771 0
 907 0094 281C     		mov	r0, r5
 908 0096 00E0     		b	.L57
 909              	.LVL49:
 910              	.L60:
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 911              		.loc 1 655 0
 912 0098 0120     		mov	r0, #1
 913              	.LVL50:
 914              	.L57:
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 915              		.loc 1 772 0
 916              		@ sp needed
 917 009a 38BD     		pop	{r3, r4, r5, pc}
 918              	.L62:
 919              		.align	2
 920              	.L61:
 921 009c 60F7FFFF 		.word	-2208
 922 00a0 9F080000 		.word	2207
ARM GAS  /tmp/cclbkaGF.s 			page 63


 923 00a4 FFFFFFEF 		.word	-268435457
 924 00a8 00023E83 		.word	-2093088256
 925 00ac 02FCFF3F 		.word	1073740802
 926 00b0 00F000F0 		.word	-268374016
 927              		.cfi_endproc
 928              	.LFE35:
 930              		.section	.text.HAL_ADC_Start,"ax",%progbits
 931              		.align	2
 932              		.global	HAL_ADC_Start
 933              		.code	16
 934              		.thumb_func
 936              	HAL_ADC_Start:
 937              	.LFB38:
1033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 938              		.loc 1 1033 0
 939              		.cfi_startproc
 940              	.LVL51:
 941 0000 10B5     		push	{r4, lr}
 942              	.LCFI7:
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 4, -8
 945              		.cfi_offset 14, -4
 946              	.LVL52:
1040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 947              		.loc 1 1040 0
 948 0002 0368     		ldr	r3, [r0]
 949 0004 9B68     		ldr	r3, [r3, #8]
 950 0006 5B07     		lsl	r3, r3, #29
 951 0008 24D4     		bmi	.L67
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 952              		.loc 1 1043 0
 953 000a 5023     		mov	r3, #80
 954 000c C35C     		ldrb	r3, [r0, r3]
 955 000e 012B     		cmp	r3, #1
 956 0010 22D0     		beq	.L68
 957 0012 041C     		mov	r4, r0
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 958              		.loc 1 1043 0 is_stmt 0 discriminator 2
 959 0014 0122     		mov	r2, #1
 960 0016 5023     		mov	r3, #80
 961 0018 C254     		strb	r2, [r0, r3]
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 962              		.loc 1 1048 0 is_stmt 1 discriminator 2
 963 001a C369     		ldr	r3, [r0, #28]
 964 001c 012B     		cmp	r3, #1
 965 001e 02D0     		beq	.L69
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 966              		.loc 1 1050 0
 967 0020 FFF7FEFF 		bl	ADC_Enable
 968              	.LVL53:
 969 0024 00E0     		b	.L66
 970              	.LVL54:
 971              	.L69:
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 972              		.loc 1 1034 0
 973 0026 0020     		mov	r0, #0
 974              	.LVL55:
ARM GAS  /tmp/cclbkaGF.s 			page 64


 975              	.L66:
1054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 976              		.loc 1 1054 0
 977 0028 0028     		cmp	r0, #0
 978 002a 16D1     		bne	.L65
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 979              		.loc 1 1059 0
 980 002c 626D     		ldr	r2, [r4, #84]
 981 002e 0B4B     		ldr	r3, .L70
 982 0030 1340     		and	r3, r2
 983 0032 8022     		mov	r2, #128
 984 0034 5200     		lsl	r2, r2, #1
 985 0036 1343     		orr	r3, r2
 986 0038 6365     		str	r3, [r4, #84]
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 987              		.loc 1 1064 0
 988 003a 0023     		mov	r3, #0
 989 003c A365     		str	r3, [r4, #88]
1069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 990              		.loc 1 1069 0
 991 003e B03A     		sub	r2, r2, #176
 992 0040 A354     		strb	r3, [r4, r2]
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 993              		.loc 1 1074 0
 994 0042 2368     		ldr	r3, [r4]
 995 0044 343A     		sub	r2, r2, #52
 996 0046 1A60     		str	r2, [r3]
1080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 997              		.loc 1 1080 0
 998 0048 2268     		ldr	r2, [r4]
 999 004a 9168     		ldr	r1, [r2, #8]
 1000 004c 0423     		mov	r3, #4
 1001 004e 0B43     		orr	r3, r1
 1002 0050 9360     		str	r3, [r2, #8]
 1003 0052 02E0     		b	.L65
 1004              	.LVL56:
 1005              	.L67:
1085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1006              		.loc 1 1085 0
 1007 0054 0220     		mov	r0, #2
 1008              	.LVL57:
1089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1009              		.loc 1 1089 0
 1010 0056 00E0     		b	.L65
 1011              	.LVL58:
 1012              	.L68:
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1013              		.loc 1 1043 0
 1014 0058 0220     		mov	r0, #2
 1015              	.LVL59:
 1016              	.L65:
1090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1017              		.loc 1 1090 0
 1018              		@ sp needed
 1019 005a 10BD     		pop	{r4, pc}
 1020              	.L71:
 1021              		.align	2
ARM GAS  /tmp/cclbkaGF.s 			page 65


 1022              	.L70:
 1023 005c FEF0FFFF 		.word	-3842
 1024              		.cfi_endproc
 1025              	.LFE38:
 1027              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1028              		.align	2
 1029              		.global	HAL_ADC_Stop
 1030              		.code	16
 1031              		.thumb_func
 1033              	HAL_ADC_Stop:
 1034              	.LFB39:
1099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1035              		.loc 1 1099 0
 1036              		.cfi_startproc
 1037              	.LVL60:
 1038 0000 10B5     		push	{r4, lr}
 1039              	.LCFI8:
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 4, -8
 1042              		.cfi_offset 14, -4
 1043              	.LVL61:
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1044              		.loc 1 1106 0
 1045 0002 5023     		mov	r3, #80
 1046 0004 C35C     		ldrb	r3, [r0, r3]
 1047 0006 012B     		cmp	r3, #1
 1048 0008 16D0     		beq	.L75
 1049 000a 041C     		mov	r4, r0
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1050              		.loc 1 1106 0 is_stmt 0 discriminator 2
 1051 000c 0122     		mov	r2, #1
 1052 000e 5023     		mov	r3, #80
 1053 0010 C254     		strb	r2, [r0, r3]
1109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1054              		.loc 1 1109 0 is_stmt 1 discriminator 2
 1055 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1056              	.LVL62:
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1057              		.loc 1 1112 0 discriminator 2
 1058 0016 0028     		cmp	r0, #0
 1059 0018 0AD1     		bne	.L74
1115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1060              		.loc 1 1115 0
 1061 001a 201C     		mov	r0, r4
 1062              	.LVL63:
 1063 001c FFF7FEFF 		bl	ADC_Disable
 1064              	.LVL64:
1118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1065              		.loc 1 1118 0
 1066 0020 0028     		cmp	r0, #0
 1067 0022 05D1     		bne	.L74
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1068              		.loc 1 1121 0
 1069 0024 626D     		ldr	r2, [r4, #84]
 1070 0026 054B     		ldr	r3, .L76
 1071 0028 1340     		and	r3, r2
 1072 002a 0122     		mov	r2, #1
ARM GAS  /tmp/cclbkaGF.s 			page 66


 1073 002c 1343     		orr	r3, r2
 1074 002e 6365     		str	r3, [r4, #84]
 1075              	.LVL65:
 1076              	.L74:
1128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1077              		.loc 1 1128 0
 1078 0030 0022     		mov	r2, #0
 1079 0032 5023     		mov	r3, #80
 1080 0034 E254     		strb	r2, [r4, r3]
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1081              		.loc 1 1131 0
 1082 0036 00E0     		b	.L73
 1083              	.LVL66:
 1084              	.L75:
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1085              		.loc 1 1106 0
 1086 0038 0220     		mov	r0, #2
 1087              	.LVL67:
 1088              	.L73:
1132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1089              		.loc 1 1132 0
 1090              		@ sp needed
 1091 003a 10BD     		pop	{r4, pc}
 1092              	.L77:
 1093              		.align	2
 1094              	.L76:
 1095 003c FEFEFFFF 		.word	-258
 1096              		.cfi_endproc
 1097              	.LFE39:
 1099              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1100              		.align	2
 1101              		.global	HAL_ADC_PollForConversion
 1102              		.code	16
 1103              		.thumb_func
 1105              	HAL_ADC_PollForConversion:
 1106              	.LFB40:
1153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 1107              		.loc 1 1153 0
 1108              		.cfi_startproc
 1109              	.LVL68:
 1110 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1111              	.LCFI9:
 1112              		.cfi_def_cfa_offset 24
 1113              		.cfi_offset 3, -24
 1114              		.cfi_offset 4, -20
 1115              		.cfi_offset 5, -16
 1116              		.cfi_offset 6, -12
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119              	.LVL69:
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1120              		.loc 1 1161 0
 1121 0002 4369     		ldr	r3, [r0, #20]
 1122 0004 082B     		cmp	r3, #8
 1123 0006 0CD0     		beq	.L87
1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1124              		.loc 1 1174 0
ARM GAS  /tmp/cclbkaGF.s 			page 67


 1125 0008 0368     		ldr	r3, [r0]
 1126 000a DB68     		ldr	r3, [r3, #12]
 1127 000c DB07     		lsl	r3, r3, #31
 1128 000e 0AD5     		bpl	.L88
1177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1129              		.loc 1 1177 0
 1130 0010 426D     		ldr	r2, [r0, #84]
 1131 0012 2023     		mov	r3, #32
 1132 0014 1343     		orr	r3, r2
 1133 0016 4365     		str	r3, [r0, #84]
1180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1134              		.loc 1 1180 0
 1135 0018 0022     		mov	r2, #0
 1136 001a 5023     		mov	r3, #80
 1137 001c C254     		strb	r2, [r0, r3]
1182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1138              		.loc 1 1182 0
 1139 001e 0120     		mov	r0, #1
 1140              	.LVL70:
 1141 0020 4FE0     		b	.L80
 1142              	.LVL71:
 1143              	.L87:
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1144              		.loc 1 1163 0
 1145 0022 0826     		mov	r6, #8
 1146 0024 00E0     		b	.L79
 1147              	.L88:
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1148              		.loc 1 1186 0
 1149 0026 0C26     		mov	r6, #12
 1150              	.L79:
 1151 0028 0D1C     		mov	r5, r1
 1152 002a 041C     		mov	r4, r0
 1153              	.LVL72:
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1154              		.loc 1 1191 0
 1155 002c FFF7FEFF 		bl	HAL_GetTick
 1156              	.LVL73:
 1157 0030 071C     		mov	r7, r0
 1158              	.LVL74:
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1159              		.loc 1 1194 0
 1160 0032 11E0     		b	.L82
 1161              	.LVL75:
 1162              	.L84:
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1163              		.loc 1 1197 0
 1164 0034 6B1C     		add	r3, r5, #1
 1165 0036 0FD0     		beq	.L82
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1166              		.loc 1 1199 0
 1167 0038 002D     		cmp	r5, #0
 1168 003a 04D0     		beq	.L83
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1169              		.loc 1 1199 0 is_stmt 0 discriminator 1
 1170 003c FFF7FEFF 		bl	HAL_GetTick
 1171              	.LVL76:
ARM GAS  /tmp/cclbkaGF.s 			page 68


 1172 0040 C01B     		sub	r0, r0, r7
 1173 0042 A842     		cmp	r0, r5
 1174 0044 08D9     		bls	.L82
 1175              	.L83:
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1176              		.loc 1 1202 0 is_stmt 1
 1177 0046 626D     		ldr	r2, [r4, #84]
 1178 0048 0423     		mov	r3, #4
 1179 004a 1343     		orr	r3, r2
 1180 004c 6365     		str	r3, [r4, #84]
1205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1181              		.loc 1 1205 0
 1182 004e 0022     		mov	r2, #0
 1183 0050 5023     		mov	r3, #80
 1184 0052 E254     		strb	r2, [r4, r3]
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1185              		.loc 1 1207 0
 1186 0054 0320     		mov	r0, #3
 1187 0056 34E0     		b	.L80
 1188              	.L82:
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1189              		.loc 1 1194 0
 1190 0058 2368     		ldr	r3, [r4]
 1191 005a 1A68     		ldr	r2, [r3]
 1192 005c 1642     		tst	r6, r2
 1193 005e E9D0     		beq	.L84
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1194              		.loc 1 1213 0
 1195 0060 626D     		ldr	r2, [r4, #84]
 1196 0062 8021     		mov	r1, #128
 1197 0064 8900     		lsl	r1, r1, #2
 1198 0066 0A43     		orr	r2, r1
 1199 0068 6265     		str	r2, [r4, #84]
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1200              		.loc 1 1217 0
 1201 006a D968     		ldr	r1, [r3, #12]
 1202 006c C022     		mov	r2, #192
 1203 006e 1201     		lsl	r2, r2, #4
 1204 0070 1142     		tst	r1, r2
 1205 0072 1DD1     		bne	.L85
1218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1206              		.loc 1 1218 0 discriminator 1
 1207 0074 2022     		mov	r2, #32
 1208 0076 A25C     		ldrb	r2, [r4, r2]
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1209              		.loc 1 1217 0 discriminator 1
 1210 0078 002A     		cmp	r2, #0
 1211 007a 19D1     		bne	.L85
1221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1212              		.loc 1 1221 0
 1213 007c 1A68     		ldr	r2, [r3]
 1214 007e 1207     		lsl	r2, r2, #28
 1215 0080 16D5     		bpl	.L85
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1216              		.loc 1 1225 0
 1217 0082 9A68     		ldr	r2, [r3, #8]
 1218 0084 5207     		lsl	r2, r2, #29
ARM GAS  /tmp/cclbkaGF.s 			page 69


 1219 0086 0BD4     		bmi	.L86
1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1220              		.loc 1 1231 0
 1221 0088 5A68     		ldr	r2, [r3, #4]
 1222 008a 0C21     		mov	r1, #12
 1223 008c 8A43     		bic	r2, r1
 1224 008e 5A60     		str	r2, [r3, #4]
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1225              		.loc 1 1234 0
 1226 0090 626D     		ldr	r2, [r4, #84]
 1227 0092 0C4B     		ldr	r3, .L90
 1228 0094 1A40     		and	r2, r3
 1229 0096 0433     		add	r3, r3, #4
 1230 0098 FF33     		add	r3, r3, #255
 1231 009a 1343     		orr	r3, r2
 1232 009c 6365     		str	r3, [r4, #84]
 1233 009e 07E0     		b	.L85
 1234              	.L86:
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1235              		.loc 1 1241 0
 1236 00a0 626D     		ldr	r2, [r4, #84]
 1237 00a2 2023     		mov	r3, #32
 1238 00a4 1343     		orr	r3, r2
 1239 00a6 6365     		str	r3, [r4, #84]
1244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1240              		.loc 1 1244 0
 1241 00a8 A26D     		ldr	r2, [r4, #88]
 1242 00aa 0123     		mov	r3, #1
 1243 00ac 1343     		orr	r3, r2
 1244 00ae A365     		str	r3, [r4, #88]
 1245              	.L85:
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1246              		.loc 1 1252 0
 1247 00b0 A369     		ldr	r3, [r4, #24]
 1248 00b2 002B     		cmp	r3, #0
 1249 00b4 04D1     		bne	.L89
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1250              		.loc 1 1255 0
 1251 00b6 2368     		ldr	r3, [r4]
 1252 00b8 0C22     		mov	r2, #12
 1253 00ba 1A60     		str	r2, [r3]
1259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1254              		.loc 1 1259 0
 1255 00bc 0020     		mov	r0, #0
 1256 00be 00E0     		b	.L80
 1257              	.L89:
 1258 00c0 0020     		mov	r0, #0
 1259              	.LVL77:
 1260              	.L80:
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1261              		.loc 1 1260 0
 1262              		@ sp needed
 1263 00c2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1264              	.L91:
 1265              		.align	2
 1266              	.L90:
 1267 00c4 FEFEFFFF 		.word	-258
ARM GAS  /tmp/cclbkaGF.s 			page 70


 1268              		.cfi_endproc
 1269              	.LFE40:
 1271              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1272              		.align	2
 1273              		.global	HAL_ADC_PollForEvent
 1274              		.code	16
 1275              		.thumb_func
 1277              	HAL_ADC_PollForEvent:
 1278              	.LFB41:
1279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1279              		.loc 1 1279 0
 1280              		.cfi_startproc
 1281              	.LVL78:
 1282 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1283              	.LCFI10:
 1284              		.cfi_def_cfa_offset 24
 1285              		.cfi_offset 3, -24
 1286              		.cfi_offset 4, -20
 1287              		.cfi_offset 5, -16
 1288              		.cfi_offset 6, -12
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 0002 051C     		mov	r5, r0
 1292 0004 0C1C     		mov	r4, r1
 1293 0006 161C     		mov	r6, r2
 1294              	.LVL79:
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1295              		.loc 1 1287 0
 1296 0008 FFF7FEFF 		bl	HAL_GetTick
 1297              	.LVL80:
 1298 000c 071C     		mov	r7, r0
 1299              	.LVL81:
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1300              		.loc 1 1290 0
 1301 000e 11E0     		b	.L94
 1302              	.LVL82:
 1303              	.L97:
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1304              		.loc 1 1293 0
 1305 0010 731C     		add	r3, r6, #1
 1306 0012 0FD0     		beq	.L94
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1307              		.loc 1 1295 0
 1308 0014 002E     		cmp	r6, #0
 1309 0016 04D0     		beq	.L95
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1310              		.loc 1 1295 0 is_stmt 0 discriminator 1
 1311 0018 FFF7FEFF 		bl	HAL_GetTick
 1312              	.LVL83:
 1313 001c C01B     		sub	r0, r0, r7
 1314 001e B042     		cmp	r0, r6
 1315 0020 08D9     		bls	.L94
 1316              	.L95:
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1317              		.loc 1 1298 0 is_stmt 1
 1318 0022 6A6D     		ldr	r2, [r5, #84]
 1319 0024 0423     		mov	r3, #4
ARM GAS  /tmp/cclbkaGF.s 			page 71


 1320 0026 1343     		orr	r3, r2
 1321 0028 6B65     		str	r3, [r5, #84]
1301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1322              		.loc 1 1301 0
 1323 002a 0022     		mov	r2, #0
 1324 002c 5023     		mov	r3, #80
 1325 002e EA54     		strb	r2, [r5, r3]
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1326              		.loc 1 1303 0
 1327 0030 0320     		mov	r0, #3
 1328 0032 1EE0     		b	.L96
 1329              	.L94:
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1330              		.loc 1 1290 0
 1331 0034 2A68     		ldr	r2, [r5]
 1332 0036 1368     		ldr	r3, [r2]
 1333 0038 2340     		and	r3, r4
 1334 003a A342     		cmp	r3, r4
 1335 003c E8D1     		bne	.L97
1308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1336              		.loc 1 1308 0
 1337 003e 802C     		cmp	r4, #128
 1338 0040 08D1     		bne	.L101
1313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1339              		.loc 1 1313 0
 1340 0042 6B6D     		ldr	r3, [r5, #84]
 1341 0044 8021     		mov	r1, #128
 1342 0046 4902     		lsl	r1, r1, #9
 1343 0048 0B43     		orr	r3, r1
 1344 004a 6B65     		str	r3, [r5, #84]
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1345              		.loc 1 1316 0
 1346 004c 8023     		mov	r3, #128
 1347 004e 1360     		str	r3, [r2]
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1348              		.loc 1 1340 0
 1349 0050 0020     		mov	r0, #0
1317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1350              		.loc 1 1317 0
 1351 0052 0EE0     		b	.L96
 1352              	.L101:
1325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1353              		.loc 1 1325 0
 1354 0054 2B6B     		ldr	r3, [r5, #48]
 1355 0056 002B     		cmp	r3, #0
 1356 0058 08D1     		bne	.L100
1328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1357              		.loc 1 1328 0
 1358 005a 6B6D     		ldr	r3, [r5, #84]
 1359 005c 8021     		mov	r1, #128
 1360 005e C900     		lsl	r1, r1, #3
 1361 0060 0B43     		orr	r3, r1
 1362 0062 6B65     		str	r3, [r5, #84]
1331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1363              		.loc 1 1331 0
 1364 0064 A96D     		ldr	r1, [r5, #88]
 1365 0066 0223     		mov	r3, #2
ARM GAS  /tmp/cclbkaGF.s 			page 72


 1366 0068 0B43     		orr	r3, r1
 1367 006a AB65     		str	r3, [r5, #88]
 1368              	.L100:
1335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1369              		.loc 1 1335 0
 1370 006c 1023     		mov	r3, #16
 1371 006e 1360     		str	r3, [r2]
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1372              		.loc 1 1340 0
 1373 0070 0020     		mov	r0, #0
 1374              	.L96:
1341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1375              		.loc 1 1341 0
 1376              		@ sp needed
 1377              	.LVL84:
 1378              	.LVL85:
 1379              	.LVL86:
 1380              	.LVL87:
 1381 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1382              		.cfi_endproc
 1383              	.LFE41:
 1385              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1386              		.align	2
 1387              		.global	HAL_ADC_Start_IT
 1388              		.code	16
 1389              		.thumb_func
 1391              	HAL_ADC_Start_IT:
 1392              	.LFB42:
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1393              		.loc 1 1362 0
 1394              		.cfi_startproc
 1395              	.LVL88:
 1396 0000 10B5     		push	{r4, lr}
 1397              	.LCFI11:
 1398              		.cfi_def_cfa_offset 8
 1399              		.cfi_offset 4, -8
 1400              		.cfi_offset 14, -4
 1401              	.LVL89:
1369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1402              		.loc 1 1369 0
 1403 0002 0368     		ldr	r3, [r0]
 1404 0004 9B68     		ldr	r3, [r3, #8]
 1405 0006 5B07     		lsl	r3, r3, #29
 1406 0008 37D4     		bmi	.L109
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1407              		.loc 1 1372 0
 1408 000a 5023     		mov	r3, #80
 1409 000c C35C     		ldrb	r3, [r0, r3]
 1410 000e 012B     		cmp	r3, #1
 1411 0010 35D0     		beq	.L110
 1412 0012 041C     		mov	r4, r0
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1413              		.loc 1 1372 0 is_stmt 0 discriminator 2
 1414 0014 0122     		mov	r2, #1
 1415 0016 5023     		mov	r3, #80
 1416 0018 C254     		strb	r2, [r0, r3]
1377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/cclbkaGF.s 			page 73


 1417              		.loc 1 1377 0 is_stmt 1 discriminator 2
 1418 001a C369     		ldr	r3, [r0, #28]
 1419 001c 012B     		cmp	r3, #1
 1420 001e 02D0     		beq	.L111
1379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1421              		.loc 1 1379 0
 1422 0020 FFF7FEFF 		bl	ADC_Enable
 1423              	.LVL90:
 1424 0024 00E0     		b	.L105
 1425              	.LVL91:
 1426              	.L111:
1363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1427              		.loc 1 1363 0
 1428 0026 0020     		mov	r0, #0
 1429              	.LVL92:
 1430              	.L105:
1383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1431              		.loc 1 1383 0
 1432 0028 0028     		cmp	r0, #0
 1433 002a 29D1     		bne	.L104
1388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1434              		.loc 1 1388 0
 1435 002c 626D     		ldr	r2, [r4, #84]
 1436 002e 154B     		ldr	r3, .L113
 1437 0030 1340     		and	r3, r2
 1438 0032 8022     		mov	r2, #128
 1439 0034 5200     		lsl	r2, r2, #1
 1440 0036 1343     		orr	r3, r2
 1441 0038 6365     		str	r3, [r4, #84]
1393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1442              		.loc 1 1393 0
 1443 003a 0023     		mov	r3, #0
 1444 003c A365     		str	r3, [r4, #88]
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1445              		.loc 1 1398 0
 1446 003e B03A     		sub	r2, r2, #176
 1447 0040 A354     		strb	r3, [r4, r2]
1403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1448              		.loc 1 1403 0
 1449 0042 2368     		ldr	r3, [r4]
 1450 0044 343A     		sub	r2, r2, #52
 1451 0046 1A60     		str	r2, [r3]
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1452              		.loc 1 1407 0
 1453 0048 6369     		ldr	r3, [r4, #20]
 1454 004a 082B     		cmp	r3, #8
 1455 004c 0AD1     		bne	.L112
1410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1456              		.loc 1 1410 0
 1457 004e 2268     		ldr	r2, [r4]
 1458 0050 5368     		ldr	r3, [r2, #4]
 1459 0052 0421     		mov	r1, #4
 1460 0054 8B43     		bic	r3, r1
 1461 0056 5360     		str	r3, [r2, #4]
1411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1462              		.loc 1 1411 0
 1463 0058 2268     		ldr	r2, [r4]
ARM GAS  /tmp/cclbkaGF.s 			page 74


 1464 005a 5168     		ldr	r1, [r2, #4]
 1465 005c 1823     		mov	r3, #24
 1466 005e 0B43     		orr	r3, r1
 1467 0060 5360     		str	r3, [r2, #4]
1412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
 1468              		.loc 1 1412 0
 1469 0062 04E0     		b	.L108
 1470              	.L112:
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1471              		.loc 1 1415 0
 1472 0064 2268     		ldr	r2, [r4]
 1473 0066 5168     		ldr	r1, [r2, #4]
 1474 0068 1C23     		mov	r3, #28
 1475 006a 0B43     		orr	r3, r1
 1476 006c 5360     		str	r3, [r2, #4]
 1477              	.L108:
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1478              		.loc 1 1423 0
 1479 006e 2268     		ldr	r2, [r4]
 1480 0070 9168     		ldr	r1, [r2, #8]
 1481 0072 0423     		mov	r3, #4
 1482 0074 0B43     		orr	r3, r1
 1483 0076 9360     		str	r3, [r2, #8]
 1484 0078 02E0     		b	.L104
 1485              	.LVL93:
 1486              	.L109:
1428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1487              		.loc 1 1428 0
 1488 007a 0220     		mov	r0, #2
 1489              	.LVL94:
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1490              		.loc 1 1432 0
 1491 007c 00E0     		b	.L104
 1492              	.LVL95:
 1493              	.L110:
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1494              		.loc 1 1372 0
 1495 007e 0220     		mov	r0, #2
 1496              	.LVL96:
 1497              	.L104:
1433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1498              		.loc 1 1433 0
 1499              		@ sp needed
 1500 0080 10BD     		pop	{r4, pc}
 1501              	.L114:
 1502 0082 C046     		.align	2
 1503              	.L113:
 1504 0084 FEF0FFFF 		.word	-3842
 1505              		.cfi_endproc
 1506              	.LFE42:
 1508              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1509              		.align	2
 1510              		.global	HAL_ADC_Stop_IT
 1511              		.code	16
 1512              		.thumb_func
 1514              	HAL_ADC_Stop_IT:
 1515              	.LFB43:
ARM GAS  /tmp/cclbkaGF.s 			page 75


1443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1516              		.loc 1 1443 0
 1517              		.cfi_startproc
 1518              	.LVL97:
 1519 0000 10B5     		push	{r4, lr}
 1520              	.LCFI12:
 1521              		.cfi_def_cfa_offset 8
 1522              		.cfi_offset 4, -8
 1523              		.cfi_offset 14, -4
 1524              	.LVL98:
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1525              		.loc 1 1450 0
 1526 0002 5023     		mov	r3, #80
 1527 0004 C35C     		ldrb	r3, [r0, r3]
 1528 0006 012B     		cmp	r3, #1
 1529 0008 1BD0     		beq	.L118
 1530 000a 041C     		mov	r4, r0
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1531              		.loc 1 1450 0 is_stmt 0 discriminator 2
 1532 000c 0122     		mov	r2, #1
 1533 000e 5023     		mov	r3, #80
 1534 0010 C254     		strb	r2, [r0, r3]
1453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1535              		.loc 1 1453 0 is_stmt 1 discriminator 2
 1536 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1537              	.LVL99:
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1538              		.loc 1 1456 0 discriminator 2
 1539 0016 0028     		cmp	r0, #0
 1540 0018 0FD1     		bne	.L117
1460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1541              		.loc 1 1460 0
 1542 001a 2268     		ldr	r2, [r4]
 1543 001c 5368     		ldr	r3, [r2, #4]
 1544 001e 1C21     		mov	r1, #28
 1545 0020 8B43     		bic	r3, r1
 1546 0022 5360     		str	r3, [r2, #4]
1463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1547              		.loc 1 1463 0
 1548 0024 201C     		mov	r0, r4
 1549              	.LVL100:
 1550 0026 FFF7FEFF 		bl	ADC_Disable
 1551              	.LVL101:
1466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1552              		.loc 1 1466 0
 1553 002a 0028     		cmp	r0, #0
 1554 002c 05D1     		bne	.L117
1469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1555              		.loc 1 1469 0
 1556 002e 626D     		ldr	r2, [r4, #84]
 1557 0030 054B     		ldr	r3, .L119
 1558 0032 1340     		and	r3, r2
 1559 0034 0122     		mov	r2, #1
 1560 0036 1343     		orr	r3, r2
 1561 0038 6365     		str	r3, [r4, #84]
 1562              	.LVL102:
 1563              	.L117:
ARM GAS  /tmp/cclbkaGF.s 			page 76


1476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1564              		.loc 1 1476 0
 1565 003a 0022     		mov	r2, #0
 1566 003c 5023     		mov	r3, #80
 1567 003e E254     		strb	r2, [r4, r3]
1479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1568              		.loc 1 1479 0
 1569 0040 00E0     		b	.L116
 1570              	.LVL103:
 1571              	.L118:
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1572              		.loc 1 1450 0
 1573 0042 0220     		mov	r0, #2
 1574              	.LVL104:
 1575              	.L116:
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1576              		.loc 1 1480 0
 1577              		@ sp needed
 1578 0044 10BD     		pop	{r4, pc}
 1579              	.L120:
 1580 0046 C046     		.align	2
 1581              	.L119:
 1582 0048 FEFEFFFF 		.word	-258
 1583              		.cfi_endproc
 1584              	.LFE43:
 1586              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1587              		.align	2
 1588              		.global	HAL_ADC_Start_DMA
 1589              		.code	16
 1590              		.thumb_func
 1592              	HAL_ADC_Start_DMA:
 1593              	.LFB44:
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1594              		.loc 1 1493 0
 1595              		.cfi_startproc
 1596              	.LVL105:
 1597 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1598              	.LCFI13:
 1599              		.cfi_def_cfa_offset 24
 1600              		.cfi_offset 3, -24
 1601              		.cfi_offset 4, -20
 1602              		.cfi_offset 5, -16
 1603              		.cfi_offset 6, -12
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606              	.LVL106:
1500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1607              		.loc 1 1500 0
 1608 0002 0368     		ldr	r3, [r0]
 1609 0004 9B68     		ldr	r3, [r3, #8]
 1610 0006 5B07     		lsl	r3, r3, #29
 1611 0008 41D4     		bmi	.L125
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1612              		.loc 1 1503 0
 1613 000a 5023     		mov	r3, #80
 1614 000c C35C     		ldrb	r3, [r0, r3]
 1615 000e 012B     		cmp	r3, #1
ARM GAS  /tmp/cclbkaGF.s 			page 77


 1616 0010 40D0     		beq	.L126
 1617 0012 151C     		mov	r5, r2
 1618 0014 0E1C     		mov	r6, r1
 1619 0016 041C     		mov	r4, r0
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1620              		.loc 1 1503 0 is_stmt 0 discriminator 2
 1621 0018 0122     		mov	r2, #1
 1622              	.LVL107:
 1623 001a 5023     		mov	r3, #80
 1624 001c C254     		strb	r2, [r0, r3]
1508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1625              		.loc 1 1508 0 is_stmt 1 discriminator 2
 1626 001e C369     		ldr	r3, [r0, #28]
 1627 0020 012B     		cmp	r3, #1
 1628 0022 03D0     		beq	.L127
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1629              		.loc 1 1510 0
 1630 0024 FFF7FEFF 		bl	ADC_Enable
 1631              	.LVL108:
 1632 0028 071C     		mov	r7, r0
 1633              	.LVL109:
 1634 002a 00E0     		b	.L124
 1635              	.LVL110:
 1636              	.L127:
1494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1637              		.loc 1 1494 0
 1638 002c 0027     		mov	r7, #0
 1639              	.LVL111:
 1640              	.L124:
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1641              		.loc 1 1514 0
 1642 002e 002F     		cmp	r7, #0
 1643 0030 2ED1     		bne	.L122
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1644              		.loc 1 1519 0
 1645 0032 626D     		ldr	r2, [r4, #84]
 1646 0034 184B     		ldr	r3, .L128
 1647 0036 1340     		and	r3, r2
 1648 0038 8022     		mov	r2, #128
 1649 003a 5200     		lsl	r2, r2, #1
 1650 003c 1343     		orr	r3, r2
 1651 003e 6365     		str	r3, [r4, #84]
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1652              		.loc 1 1524 0
 1653 0040 0023     		mov	r3, #0
 1654 0042 A365     		str	r3, [r4, #88]
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1655              		.loc 1 1529 0
 1656 0044 B03A     		sub	r2, r2, #176
 1657 0046 A354     		strb	r3, [r4, r2]
1532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1658              		.loc 1 1532 0
 1659 0048 E36C     		ldr	r3, [r4, #76]
 1660 004a 144A     		ldr	r2, .L128+4
 1661 004c DA62     		str	r2, [r3, #44]
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1662              		.loc 1 1535 0
ARM GAS  /tmp/cclbkaGF.s 			page 78


 1663 004e E36C     		ldr	r3, [r4, #76]
 1664 0050 134A     		ldr	r2, .L128+8
 1665 0052 1A63     		str	r2, [r3, #48]
1538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1666              		.loc 1 1538 0
 1667 0054 E36C     		ldr	r3, [r4, #76]
 1668 0056 134A     		ldr	r2, .L128+12
 1669 0058 5A63     		str	r2, [r3, #52]
1547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1670              		.loc 1 1547 0
 1671 005a 2368     		ldr	r3, [r4]
 1672 005c 1C22     		mov	r2, #28
 1673 005e 1A60     		str	r2, [r3]
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1674              		.loc 1 1550 0
 1675 0060 2268     		ldr	r2, [r4]
 1676 0062 5168     		ldr	r1, [r2, #4]
 1677 0064 1023     		mov	r3, #16
 1678 0066 0B43     		orr	r3, r1
 1679 0068 5360     		str	r3, [r2, #4]
1553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1680              		.loc 1 1553 0
 1681 006a 2268     		ldr	r2, [r4]
 1682 006c D168     		ldr	r1, [r2, #12]
 1683 006e 0123     		mov	r3, #1
 1684 0070 0B43     		orr	r3, r1
 1685 0072 D360     		str	r3, [r2, #12]
1556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1686              		.loc 1 1556 0
 1687 0074 2168     		ldr	r1, [r4]
 1688 0076 4031     		add	r1, r1, #64
 1689 0078 E06C     		ldr	r0, [r4, #76]
 1690 007a 321C     		mov	r2, r6
 1691 007c 2B1C     		mov	r3, r5
 1692 007e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1693              	.LVL112:
1562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1694              		.loc 1 1562 0
 1695 0082 2268     		ldr	r2, [r4]
 1696 0084 9168     		ldr	r1, [r2, #8]
 1697 0086 0423     		mov	r3, #4
 1698 0088 0B43     		orr	r3, r1
 1699 008a 9360     		str	r3, [r2, #8]
 1700 008c 00E0     		b	.L122
 1701              	.LVL113:
 1702              	.L125:
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1703              		.loc 1 1567 0
 1704 008e 0227     		mov	r7, #2
 1705              	.LVL114:
 1706              	.L122:
1571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1707              		.loc 1 1571 0
 1708 0090 381C     		mov	r0, r7
 1709 0092 00E0     		b	.L123
 1710              	.LVL115:
 1711              	.L126:
ARM GAS  /tmp/cclbkaGF.s 			page 79


1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1712              		.loc 1 1503 0
 1713 0094 0220     		mov	r0, #2
 1714              	.LVL116:
 1715              	.L123:
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1716              		.loc 1 1572 0
 1717              		@ sp needed
 1718 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1719              	.L129:
 1720              		.align	2
 1721              	.L128:
 1722 0098 FEF0FFFF 		.word	-3842
 1723 009c 00000000 		.word	ADC_DMAConvCplt
 1724 00a0 00000000 		.word	ADC_DMAHalfConvCplt
 1725 00a4 00000000 		.word	ADC_DMAError
 1726              		.cfi_endproc
 1727              	.LFE44:
 1729              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1730              		.align	2
 1731              		.global	HAL_ADC_Stop_DMA
 1732              		.code	16
 1733              		.thumb_func
 1735              	HAL_ADC_Stop_DMA:
 1736              	.LFB45:
1583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1737              		.loc 1 1583 0
 1738              		.cfi_startproc
 1739              	.LVL117:
 1740 0000 38B5     		push	{r3, r4, r5, lr}
 1741              	.LCFI14:
 1742              		.cfi_def_cfa_offset 16
 1743              		.cfi_offset 3, -16
 1744              		.cfi_offset 4, -12
 1745              		.cfi_offset 5, -8
 1746              		.cfi_offset 14, -4
 1747              	.LVL118:
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1748              		.loc 1 1590 0
 1749 0002 5023     		mov	r3, #80
 1750 0004 C35C     		ldrb	r3, [r0, r3]
 1751 0006 012B     		cmp	r3, #1
 1752 0008 31D0     		beq	.L136
 1753 000a 051C     		mov	r5, r0
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1754              		.loc 1 1590 0 is_stmt 0 discriminator 2
 1755 000c 0122     		mov	r2, #1
 1756 000e 5023     		mov	r3, #80
 1757 0010 C254     		strb	r2, [r0, r3]
1593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1758              		.loc 1 1593 0 is_stmt 1 discriminator 2
 1759 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1760              	.LVL119:
 1761 0016 041E     		sub	r4, r0, #0
 1762              	.LVL120:
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1763              		.loc 1 1596 0 discriminator 2
ARM GAS  /tmp/cclbkaGF.s 			page 80


 1764 0018 24D1     		bne	.L132
1599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1765              		.loc 1 1599 0
 1766 001a 2A68     		ldr	r2, [r5]
 1767 001c D368     		ldr	r3, [r2, #12]
 1768 001e 0121     		mov	r1, #1
 1769 0020 8B43     		bic	r3, r1
 1770 0022 D360     		str	r3, [r2, #12]
1603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1771              		.loc 1 1603 0
 1772 0024 E86C     		ldr	r0, [r5, #76]
 1773              	.LVL121:
 1774 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 1775              	.LVL122:
 1776 002a 041E     		sub	r4, r0, #0
 1777              	.LVL123:
1606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1778              		.loc 1 1606 0
 1779 002c 03D0     		beq	.L133
1609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1780              		.loc 1 1609 0
 1781 002e 6A6D     		ldr	r2, [r5, #84]
 1782 0030 4023     		mov	r3, #64
 1783 0032 1343     		orr	r3, r2
 1784 0034 6B65     		str	r3, [r5, #84]
 1785              	.L133:
1613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1786              		.loc 1 1613 0
 1787 0036 2A68     		ldr	r2, [r5]
 1788 0038 5368     		ldr	r3, [r2, #4]
 1789 003a 1021     		mov	r1, #16
 1790 003c 8B43     		bic	r3, r1
 1791 003e 5360     		str	r3, [r2, #4]
1618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1792              		.loc 1 1618 0
 1793 0040 002C     		cmp	r4, #0
 1794 0042 04D1     		bne	.L134
1620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1795              		.loc 1 1620 0
 1796 0044 281C     		mov	r0, r5
 1797              	.LVL124:
 1798 0046 FFF7FEFF 		bl	ADC_Disable
 1799              	.LVL125:
 1800 004a 041C     		mov	r4, r0
 1801              	.LVL126:
 1802 004c 02E0     		b	.L135
 1803              	.L134:
1624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1804              		.loc 1 1624 0
 1805 004e 281C     		mov	r0, r5
 1806              	.LVL127:
 1807 0050 FFF7FEFF 		bl	ADC_Disable
 1808              	.LVL128:
 1809              	.L135:
1628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1810              		.loc 1 1628 0
 1811 0054 002C     		cmp	r4, #0
ARM GAS  /tmp/cclbkaGF.s 			page 81


 1812 0056 05D1     		bne	.L132
1631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1813              		.loc 1 1631 0
 1814 0058 6A6D     		ldr	r2, [r5, #84]
 1815 005a 064B     		ldr	r3, .L137
 1816 005c 1340     		and	r3, r2
 1817 005e 0122     		mov	r2, #1
 1818 0060 1343     		orr	r3, r2
 1819 0062 6B65     		str	r3, [r5, #84]
 1820              	.LVL129:
 1821              	.L132:
1639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1822              		.loc 1 1639 0
 1823 0064 0022     		mov	r2, #0
 1824 0066 5023     		mov	r3, #80
 1825 0068 EA54     		strb	r2, [r5, r3]
1642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1826              		.loc 1 1642 0
 1827 006a 201C     		mov	r0, r4
 1828 006c 00E0     		b	.L131
 1829              	.LVL130:
 1830              	.L136:
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1831              		.loc 1 1590 0
 1832 006e 0220     		mov	r0, #2
 1833              	.LVL131:
 1834              	.L131:
1643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1835              		.loc 1 1643 0
 1836              		@ sp needed
 1837 0070 38BD     		pop	{r3, r4, r5, pc}
 1838              	.L138:
 1839 0072 C046     		.align	2
 1840              	.L137:
 1841 0074 FEFEFFFF 		.word	-258
 1842              		.cfi_endproc
 1843              	.LFE45:
 1845              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1846              		.align	2
 1847              		.global	HAL_ADC_GetValue
 1848              		.code	16
 1849              		.thumb_func
 1851              	HAL_ADC_GetValue:
 1852              	.LFB46:
1665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 1853              		.loc 1 1665 0
 1854              		.cfi_startproc
 1855              	.LVL132:
1673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1856              		.loc 1 1673 0
 1857 0000 0368     		ldr	r3, [r0]
 1858 0002 186C     		ldr	r0, [r3, #64]
 1859              	.LVL133:
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1860              		.loc 1 1674 0
 1861              		@ sp needed
 1862 0004 7047     		bx	lr
ARM GAS  /tmp/cclbkaGF.s 			page 82


 1863              		.cfi_endproc
 1864              	.LFE46:
 1866 0006 C046     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1867              		.align	2
 1868              		.weak	HAL_ADC_ConvCpltCallback
 1869              		.code	16
 1870              		.thumb_func
 1872              	HAL_ADC_ConvCpltCallback:
 1873              	.LFB48:
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1874              		.loc 1 1813 0
 1875              		.cfi_startproc
 1876              	.LVL134:
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1877              		.loc 1 1820 0
 1878              		@ sp needed
 1879 0000 7047     		bx	lr
 1880              		.cfi_endproc
 1881              	.LFE48:
 1883 0002 C046     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1884              		.align	2
 1885              		.code	16
 1886              		.thumb_func
 1888              	ADC_DMAConvCplt:
 1889              	.LFB59:
2365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1890              		.loc 1 2365 0
 1891              		.cfi_startproc
 1892              	.LVL135:
 1893 0000 08B5     		push	{r3, lr}
 1894              	.LCFI15:
 1895              		.cfi_def_cfa_offset 8
 1896              		.cfi_offset 3, -8
 1897              		.cfi_offset 14, -4
2367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1898              		.loc 1 2367 0
 1899 0002 836A     		ldr	r3, [r0, #40]
 1900              	.LVL136:
2370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1901              		.loc 1 2370 0
 1902 0004 5A6D     		ldr	r2, [r3, #84]
 1903 0006 5021     		mov	r1, #80
 1904 0008 1142     		tst	r1, r2
 1905 000a 2BD1     		bne	.L142
2373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1906              		.loc 1 2373 0
 1907 000c 5A6D     		ldr	r2, [r3, #84]
 1908 000e B131     		add	r1, r1, #177
 1909 0010 FF31     		add	r1, r1, #255
 1910 0012 0A43     		orr	r2, r1
 1911 0014 5A65     		str	r2, [r3, #84]
2377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1912              		.loc 1 2377 0
 1913 0016 1A68     		ldr	r2, [r3]
 1914 0018 D068     		ldr	r0, [r2, #12]
 1915              	.LVL137:
 1916 001a C021     		mov	r1, #192
ARM GAS  /tmp/cclbkaGF.s 			page 83


 1917 001c 0901     		lsl	r1, r1, #4
 1918 001e 0842     		tst	r0, r1
 1919 0020 1CD1     		bne	.L143
2378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1920              		.loc 1 2378 0 discriminator 1
 1921 0022 2021     		mov	r1, #32
 1922 0024 595C     		ldrb	r1, [r3, r1]
2377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1923              		.loc 1 2377 0 discriminator 1
 1924 0026 0029     		cmp	r1, #0
 1925 0028 18D1     		bne	.L143
2381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1926              		.loc 1 2381 0
 1927 002a 1168     		ldr	r1, [r2]
 1928 002c 0907     		lsl	r1, r1, #28
 1929 002e 15D5     		bpl	.L143
2385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 1930              		.loc 1 2385 0
 1931 0030 9168     		ldr	r1, [r2, #8]
 1932 0032 4907     		lsl	r1, r1, #29
 1933 0034 0AD4     		bmi	.L144
2391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 1934              		.loc 1 2391 0
 1935 0036 5168     		ldr	r1, [r2, #4]
 1936 0038 0C20     		mov	r0, #12
 1937 003a 8143     		bic	r1, r0
 1938 003c 5160     		str	r1, [r2, #4]
2394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1939              		.loc 1 2394 0
 1940 003e 596D     		ldr	r1, [r3, #84]
 1941 0040 0A4A     		ldr	r2, .L146
 1942 0042 0A40     		and	r2, r1
 1943 0044 0121     		mov	r1, #1
 1944 0046 0A43     		orr	r2, r1
 1945 0048 5A65     		str	r2, [r3, #84]
 1946 004a 07E0     		b	.L143
 1947              	.L144:
2401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 1948              		.loc 1 2401 0
 1949 004c 596D     		ldr	r1, [r3, #84]
 1950 004e 2022     		mov	r2, #32
 1951 0050 0A43     		orr	r2, r1
 1952 0052 5A65     		str	r2, [r3, #84]
2404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 1953              		.loc 1 2404 0
 1954 0054 996D     		ldr	r1, [r3, #88]
 1955 0056 0122     		mov	r2, #1
 1956 0058 0A43     		orr	r2, r1
 1957 005a 9A65     		str	r2, [r3, #88]
 1958              	.L143:
2413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1959              		.loc 1 2413 0
 1960 005c 181C     		mov	r0, r3
 1961 005e FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1962              	.LVL138:
 1963 0062 02E0     		b	.L141
 1964              	.LVL139:
ARM GAS  /tmp/cclbkaGF.s 			page 84


 1965              	.L142:
2419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1966              		.loc 1 2419 0
 1967 0064 DB6C     		ldr	r3, [r3, #76]
 1968              	.LVL140:
 1969 0066 5B6B     		ldr	r3, [r3, #52]
 1970 0068 9847     		blx	r3
 1971              	.LVL141:
 1972              	.L141:
2421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1973              		.loc 1 2421 0
 1974              		@ sp needed
 1975 006a 08BD     		pop	{r3, pc}
 1976              	.L147:
 1977              		.align	2
 1978              	.L146:
 1979 006c FEFEFFFF 		.word	-258
 1980              		.cfi_endproc
 1981              	.LFE59:
 1983              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1984              		.align	2
 1985              		.weak	HAL_ADC_ConvHalfCpltCallback
 1986              		.code	16
 1987              		.thumb_func
 1989              	HAL_ADC_ConvHalfCpltCallback:
 1990              	.LFB49:
1828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1991              		.loc 1 1828 0
 1992              		.cfi_startproc
 1993              	.LVL142:
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1994              		.loc 1 1835 0
 1995              		@ sp needed
 1996 0000 7047     		bx	lr
 1997              		.cfi_endproc
 1998              	.LFE49:
 2000 0002 C046     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 2001              		.align	2
 2002              		.code	16
 2003              		.thumb_func
 2005              	ADC_DMAHalfConvCplt:
 2006              	.LFB60:
2429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2007              		.loc 1 2429 0
 2008              		.cfi_startproc
 2009              	.LVL143:
 2010 0000 08B5     		push	{r3, lr}
 2011              	.LCFI16:
 2012              		.cfi_def_cfa_offset 8
 2013              		.cfi_offset 3, -8
 2014              		.cfi_offset 14, -4
2431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2015              		.loc 1 2431 0
 2016 0002 806A     		ldr	r0, [r0, #40]
 2017              	.LVL144:
2437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2018              		.loc 1 2437 0
ARM GAS  /tmp/cclbkaGF.s 			page 85


 2019 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2020              	.LVL145:
2439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2021              		.loc 1 2439 0
 2022              		@ sp needed
 2023 0008 08BD     		pop	{r3, pc}
 2024              		.cfi_endproc
 2025              	.LFE60:
 2027 000a C046     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2028              		.align	2
 2029              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2030              		.code	16
 2031              		.thumb_func
 2033              	HAL_ADC_LevelOutOfWindowCallback:
 2034              	.LFB50:
1843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2035              		.loc 1 1843 0
 2036              		.cfi_startproc
 2037              	.LVL146:
1850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2038              		.loc 1 1850 0
 2039              		@ sp needed
 2040 0000 7047     		bx	lr
 2041              		.cfi_endproc
 2042              	.LFE50:
 2044 0002 C046     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2045              		.align	2
 2046              		.weak	HAL_ADC_ErrorCallback
 2047              		.code	16
 2048              		.thumb_func
 2050              	HAL_ADC_ErrorCallback:
 2051              	.LFB51:
1865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2052              		.loc 1 1865 0
 2053              		.cfi_startproc
 2054              	.LVL147:
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2055              		.loc 1 1872 0
 2056              		@ sp needed
 2057 0000 7047     		bx	lr
 2058              		.cfi_endproc
 2059              	.LFE51:
 2061 0002 C046     		.section	.text.ADC_DMAError,"ax",%progbits
 2062              		.align	2
 2063              		.code	16
 2064              		.thumb_func
 2066              	ADC_DMAError:
 2067              	.LFB61:
2447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2068              		.loc 1 2447 0
 2069              		.cfi_startproc
 2070              	.LVL148:
 2071 0000 08B5     		push	{r3, lr}
 2072              	.LCFI17:
 2073              		.cfi_def_cfa_offset 8
 2074              		.cfi_offset 3, -8
 2075              		.cfi_offset 14, -4
ARM GAS  /tmp/cclbkaGF.s 			page 86


2449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2076              		.loc 1 2449 0
 2077 0002 806A     		ldr	r0, [r0, #40]
 2078              	.LVL149:
2452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2079              		.loc 1 2452 0
 2080 0004 426D     		ldr	r2, [r0, #84]
 2081 0006 4023     		mov	r3, #64
 2082 0008 1343     		orr	r3, r2
 2083 000a 4365     		str	r3, [r0, #84]
2455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2084              		.loc 1 2455 0
 2085 000c 826D     		ldr	r2, [r0, #88]
 2086 000e 0423     		mov	r3, #4
 2087 0010 1343     		orr	r3, r2
 2088 0012 8365     		str	r3, [r0, #88]
2461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2089              		.loc 1 2461 0
 2090 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2091              	.LVL150:
2463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2092              		.loc 1 2463 0
 2093              		@ sp needed
 2094 0018 08BD     		pop	{r3, pc}
 2095              		.cfi_endproc
 2096              	.LFE61:
 2098 001a C046     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2099              		.align	2
 2100              		.global	HAL_ADC_IRQHandler
 2101              		.code	16
 2102              		.thumb_func
 2104              	HAL_ADC_IRQHandler:
 2105              	.LFB47:
1682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2106              		.loc 1 1682 0
 2107              		.cfi_startproc
 2108              	.LVL151:
 2109 0000 10B5     		push	{r4, lr}
 2110              	.LCFI18:
 2111              		.cfi_def_cfa_offset 8
 2112              		.cfi_offset 4, -8
 2113              		.cfi_offset 14, -4
 2114 0002 041C     		mov	r4, r0
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2115              		.loc 1 1689 0
 2116 0004 0368     		ldr	r3, [r0]
 2117 0006 1A68     		ldr	r2, [r3]
 2118 0008 5207     		lsl	r2, r2, #29
 2119 000a 02D5     		bpl	.L154
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2120              		.loc 1 1689 0 is_stmt 0 discriminator 1
 2121 000c 5A68     		ldr	r2, [r3, #4]
 2122 000e 5207     		lsl	r2, r2, #29
 2123 0010 05D4     		bmi	.L155
 2124              	.L154:
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2125              		.loc 1 1690 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/cclbkaGF.s 			page 87


 2126 0012 1A68     		ldr	r2, [r3]
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2127              		.loc 1 1689 0 discriminator 3
 2128 0014 1207     		lsl	r2, r2, #28
 2129 0016 35D5     		bpl	.L156
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2130              		.loc 1 1690 0
 2131 0018 5A68     		ldr	r2, [r3, #4]
 2132 001a 1207     		lsl	r2, r2, #28
 2133 001c 32D5     		bpl	.L156
 2134              	.L155:
1693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2135              		.loc 1 1693 0
 2136 001e 626D     		ldr	r2, [r4, #84]
 2137 0020 D206     		lsl	r2, r2, #27
 2138 0022 04D4     		bmi	.L157
1696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2139              		.loc 1 1696 0
 2140 0024 626D     		ldr	r2, [r4, #84]
 2141 0026 8021     		mov	r1, #128
 2142 0028 8900     		lsl	r1, r1, #2
 2143 002a 0A43     		orr	r2, r1
 2144 002c 6265     		str	r2, [r4, #84]
 2145              	.L157:
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2146              		.loc 1 1701 0
 2147 002e D968     		ldr	r1, [r3, #12]
 2148 0030 C022     		mov	r2, #192
 2149 0032 1201     		lsl	r2, r2, #4
 2150 0034 1142     		tst	r1, r2
 2151 0036 1CD1     		bne	.L158
1702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2152              		.loc 1 1702 0 discriminator 1
 2153 0038 2022     		mov	r2, #32
 2154 003a A25C     		ldrb	r2, [r4, r2]
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2155              		.loc 1 1701 0 discriminator 1
 2156 003c 002A     		cmp	r2, #0
 2157 003e 18D1     		bne	.L158
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 2158              		.loc 1 1705 0
 2159 0040 1A68     		ldr	r2, [r3]
 2160 0042 1207     		lsl	r2, r2, #28
 2161 0044 15D5     		bpl	.L158
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 2162              		.loc 1 1709 0
 2163 0046 9A68     		ldr	r2, [r3, #8]
 2164 0048 5207     		lsl	r2, r2, #29
 2165 004a 0AD4     		bmi	.L159
1715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2166              		.loc 1 1715 0
 2167 004c 5A68     		ldr	r2, [r3, #4]
 2168 004e 0C21     		mov	r1, #12
 2169 0050 8A43     		bic	r2, r1
 2170 0052 5A60     		str	r2, [r3, #4]
1718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2171              		.loc 1 1718 0
ARM GAS  /tmp/cclbkaGF.s 			page 88


 2172 0054 626D     		ldr	r2, [r4, #84]
 2173 0056 214B     		ldr	r3, .L164
 2174 0058 1340     		and	r3, r2
 2175 005a 0122     		mov	r2, #1
 2176 005c 1343     		orr	r3, r2
 2177 005e 6365     		str	r3, [r4, #84]
 2178 0060 07E0     		b	.L158
 2179              	.L159:
1725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2180              		.loc 1 1725 0
 2181 0062 626D     		ldr	r2, [r4, #84]
 2182 0064 2023     		mov	r3, #32
 2183 0066 1343     		orr	r3, r2
 2184 0068 6365     		str	r3, [r4, #84]
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 2185              		.loc 1 1728 0
 2186 006a A26D     		ldr	r2, [r4, #88]
 2187 006c 0123     		mov	r3, #1
 2188 006e 1343     		orr	r3, r2
 2189 0070 A365     		str	r3, [r4, #88]
 2190              	.L158:
1739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2191              		.loc 1 1739 0
 2192 0072 201C     		mov	r0, r4
 2193              	.LVL152:
 2194 0074 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2195              	.LVL153:
1752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2196              		.loc 1 1752 0
 2197 0078 A369     		ldr	r3, [r4, #24]
 2198 007a 012B     		cmp	r3, #1
 2199 007c 02D0     		beq	.L156
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2200              		.loc 1 1754 0
 2201 007e 2368     		ldr	r3, [r4]
 2202 0080 0C22     		mov	r2, #12
 2203 0082 1A60     		str	r2, [r3]
 2204              	.L156:
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2205              		.loc 1 1759 0
 2206 0084 2368     		ldr	r3, [r4]
 2207 0086 1A68     		ldr	r2, [r3]
 2208 0088 1206     		lsl	r2, r2, #24
 2209 008a 0DD5     		bpl	.L160
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2210              		.loc 1 1759 0 is_stmt 0 discriminator 1
 2211 008c 5B68     		ldr	r3, [r3, #4]
 2212 008e 1B06     		lsl	r3, r3, #24
 2213 0090 0AD5     		bpl	.L160
1762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2214              		.loc 1 1762 0 is_stmt 1
 2215 0092 636D     		ldr	r3, [r4, #84]
 2216 0094 8022     		mov	r2, #128
 2217 0096 5202     		lsl	r2, r2, #9
 2218 0098 1343     		orr	r3, r2
 2219 009a 6365     		str	r3, [r4, #84]
1767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
ARM GAS  /tmp/cclbkaGF.s 			page 89


 2220              		.loc 1 1767 0
 2221 009c 201C     		mov	r0, r4
 2222 009e FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2223              	.LVL154:
1771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 2224              		.loc 1 1771 0
 2225 00a2 2368     		ldr	r3, [r4]
 2226 00a4 8022     		mov	r2, #128
 2227 00a6 1A60     		str	r2, [r3]
 2228              	.L160:
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2229              		.loc 1 1777 0
 2230 00a8 2368     		ldr	r3, [r4]
 2231 00aa 1A68     		ldr	r2, [r3]
 2232 00ac D206     		lsl	r2, r2, #27
 2233 00ae 14D5     		bpl	.L153
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2234              		.loc 1 1777 0 is_stmt 0 discriminator 1
 2235 00b0 5A68     		ldr	r2, [r3, #4]
 2236 00b2 D206     		lsl	r2, r2, #27
 2237 00b4 11D5     		bpl	.L153
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2238              		.loc 1 1785 0 is_stmt 1
 2239 00b6 226B     		ldr	r2, [r4, #48]
 2240 00b8 002A     		cmp	r2, #0
 2241 00ba 02D0     		beq	.L162
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2242              		.loc 1 1786 0 discriminator 1
 2243 00bc DA68     		ldr	r2, [r3, #12]
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2244              		.loc 1 1785 0 discriminator 1
 2245 00be D207     		lsl	r2, r2, #31
 2246 00c0 08D5     		bpl	.L163
 2247              	.L162:
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2248              		.loc 1 1789 0
 2249 00c2 A16D     		ldr	r1, [r4, #88]
 2250 00c4 0222     		mov	r2, #2
 2251 00c6 0A43     		orr	r2, r1
 2252 00c8 A265     		str	r2, [r4, #88]
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2253              		.loc 1 1792 0
 2254 00ca 1022     		mov	r2, #16
 2255 00cc 1A60     		str	r2, [r3]
1797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2256              		.loc 1 1797 0
 2257 00ce 201C     		mov	r0, r4
 2258 00d0 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2259              	.LVL155:
 2260              	.L163:
1802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2261              		.loc 1 1802 0
 2262 00d4 2368     		ldr	r3, [r4]
 2263 00d6 1022     		mov	r2, #16
 2264 00d8 1A60     		str	r2, [r3]
 2265              	.L153:
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /tmp/cclbkaGF.s 			page 90


 2266              		.loc 1 1805 0
 2267              		@ sp needed
 2268              	.LVL156:
 2269 00da 10BD     		pop	{r4, pc}
 2270              	.L165:
 2271              		.align	2
 2272              	.L164:
 2273 00dc FEFEFFFF 		.word	-258
 2274              		.cfi_endproc
 2275              	.LFE47:
 2277              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2278              		.align	2
 2279              		.global	HAL_ADC_ConfigChannel
 2280              		.code	16
 2281              		.thumb_func
 2283              	HAL_ADC_ConfigChannel:
 2284              	.LFB52:
1916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2285              		.loc 1 1916 0
 2286              		.cfi_startproc
 2287              	.LVL157:
 2288 0000 38B5     		push	{r3, r4, r5, lr}
 2289              	.LCFI19:
 2290              		.cfi_def_cfa_offset 16
 2291              		.cfi_offset 3, -16
 2292              		.cfi_offset 4, -12
 2293              		.cfi_offset 5, -8
 2294              		.cfi_offset 14, -4
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2295              		.loc 1 1923 0
 2296 0002 5023     		mov	r3, #80
 2297 0004 C35C     		ldrb	r3, [r0, r3]
 2298 0006 012B     		cmp	r3, #1
 2299 0008 4CD0     		beq	.L173
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2300              		.loc 1 1923 0 is_stmt 0 discriminator 2
 2301 000a 0122     		mov	r2, #1
 2302 000c 5023     		mov	r3, #80
 2303 000e C254     		strb	r2, [r0, r3]
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2304              		.loc 1 1930 0 is_stmt 1 discriminator 2
 2305 0010 0268     		ldr	r2, [r0]
 2306 0012 9368     		ldr	r3, [r2, #8]
 2307 0014 5B07     		lsl	r3, r3, #29
 2308 0016 08D5     		bpl	.L168
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 2309              		.loc 1 1933 0
 2310 0018 426D     		ldr	r2, [r0, #84]
 2311 001a 2023     		mov	r3, #32
 2312 001c 1343     		orr	r3, r2
 2313 001e 4365     		str	r3, [r0, #84]
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 2314              		.loc 1 1935 0
 2315 0020 0022     		mov	r2, #0
 2316 0022 5023     		mov	r3, #80
 2317 0024 C254     		strb	r2, [r0, r3]
1936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
ARM GAS  /tmp/cclbkaGF.s 			page 91


 2318              		.loc 1 1936 0
 2319 0026 0120     		mov	r0, #1
 2320              	.LVL158:
 2321 0028 3DE0     		b	.L167
 2322              	.LVL159:
 2323              	.L168:
 2324 002a 0D1C     		mov	r5, r1
 2325 002c 041C     		mov	r4, r0
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2326              		.loc 1 1939 0
 2327 002e 1E4B     		ldr	r3, .L174
 2328 0030 4968     		ldr	r1, [r1, #4]
 2329              	.LVL160:
 2330 0032 9942     		cmp	r1, r3
 2331 0034 1BD0     		beq	.L169
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2332              		.loc 1 1942 0
 2333 0036 916A     		ldr	r1, [r2, #40]
 2334 0038 2B68     		ldr	r3, [r5]
 2335 003a 5B03     		lsl	r3, r3, #13
 2336 003c 5B0B     		lsr	r3, r3, #13
 2337 003e 0B43     		orr	r3, r1
 2338 0040 9362     		str	r3, [r2, #40]
1951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2339              		.loc 1 1951 0
 2340 0042 2B68     		ldr	r3, [r5]
 2341 0044 5B03     		lsl	r3, r3, #13
 2342 0046 08D5     		bpl	.L170
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2343              		.loc 1 1953 0
 2344 0048 184A     		ldr	r2, .L174+4
 2345 004a 1368     		ldr	r3, [r2]
 2346 004c 8021     		mov	r1, #128
 2347 004e 0904     		lsl	r1, r1, #16
 2348 0050 0B43     		orr	r3, r1
 2349 0052 1360     		str	r3, [r2]
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2350              		.loc 1 1956 0
 2351 0054 0A20     		mov	r0, #10
 2352              	.LVL161:
 2353 0056 FFF7FEFF 		bl	ADC_DelayMicroSecond
 2354              	.LVL162:
 2355              	.L170:
1961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2356              		.loc 1 1961 0
 2357 005a 2B68     		ldr	r3, [r5]
 2358 005c 9B03     		lsl	r3, r3, #14
 2359 005e 1CD5     		bpl	.L171
1963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2360              		.loc 1 1963 0
 2361 0060 124A     		ldr	r2, .L174+4
 2362 0062 1368     		ldr	r3, [r2]
 2363 0064 8021     		mov	r1, #128
 2364 0066 C903     		lsl	r1, r1, #15
 2365 0068 0B43     		orr	r3, r1
 2366 006a 1360     		str	r3, [r2]
 2367 006c 15E0     		b	.L171
ARM GAS  /tmp/cclbkaGF.s 			page 92


 2368              	.LVL163:
 2369              	.L169:
1978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2370              		.loc 1 1978 0
 2371 006e 916A     		ldr	r1, [r2, #40]
 2372 0070 2B68     		ldr	r3, [r5]
 2373 0072 5B03     		lsl	r3, r3, #13
 2374 0074 5B0B     		lsr	r3, r3, #13
 2375 0076 9943     		bic	r1, r3
 2376 0078 9162     		str	r1, [r2, #40]
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2377              		.loc 1 1984 0
 2378 007a 2B68     		ldr	r3, [r5]
 2379 007c 5B03     		lsl	r3, r3, #13
 2380 007e 04D5     		bpl	.L172
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2381              		.loc 1 1986 0
 2382 0080 0A4A     		ldr	r2, .L174+4
 2383 0082 1168     		ldr	r1, [r2]
 2384 0084 0A4B     		ldr	r3, .L174+8
 2385 0086 0B40     		and	r3, r1
 2386 0088 1360     		str	r3, [r2]
 2387              	.L172:
1991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2388              		.loc 1 1991 0
 2389 008a 2B68     		ldr	r3, [r5]
 2390 008c 9B03     		lsl	r3, r3, #14
 2391 008e 04D5     		bpl	.L171
1993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2392              		.loc 1 1993 0
 2393 0090 064A     		ldr	r2, .L174+4
 2394 0092 1168     		ldr	r1, [r2]
 2395 0094 074B     		ldr	r3, .L174+12
 2396 0096 0B40     		and	r3, r1
 2397 0098 1360     		str	r3, [r2]
 2398              	.LVL164:
 2399              	.L171:
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2400              		.loc 1 2006 0
 2401 009a 0022     		mov	r2, #0
 2402 009c 5023     		mov	r3, #80
 2403 009e E254     		strb	r2, [r4, r3]
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2404              		.loc 1 2009 0
 2405 00a0 0020     		mov	r0, #0
 2406 00a2 00E0     		b	.L167
 2407              	.LVL165:
 2408              	.L173:
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2409              		.loc 1 1923 0
 2410 00a4 0220     		mov	r0, #2
 2411              	.LVL166:
 2412              	.L167:
2010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2413              		.loc 1 2010 0
 2414              		@ sp needed
 2415 00a6 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cclbkaGF.s 			page 93


 2416              	.L175:
 2417              		.align	2
 2418              	.L174:
 2419 00a8 01100000 		.word	4097
 2420 00ac 08270140 		.word	1073817352
 2421 00b0 FFFF7FFF 		.word	-8388609
 2422 00b4 FFFFBFFF 		.word	-4194305
 2423              		.cfi_endproc
 2424              	.LFE52:
 2426              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2427              		.align	2
 2428              		.global	HAL_ADC_AnalogWDGConfig
 2429              		.code	16
 2430              		.thumb_func
 2432              	HAL_ADC_AnalogWDGConfig:
 2433              	.LFB53:
2035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2434              		.loc 1 2035 0
 2435              		.cfi_startproc
 2436              	.LVL167:
 2437 0000 70B5     		push	{r4, r5, r6, lr}
 2438              	.LCFI20:
 2439              		.cfi_def_cfa_offset 16
 2440              		.cfi_offset 4, -16
 2441              		.cfi_offset 5, -12
 2442              		.cfi_offset 6, -8
 2443              		.cfi_offset 14, -4
 2444              	.LVL168:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2445              		.loc 1 2056 0
 2446 0002 5023     		mov	r3, #80
 2447 0004 C35C     		ldrb	r3, [r0, r3]
 2448 0006 012B     		cmp	r3, #1
 2449 0008 45D0     		beq	.L182
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2450              		.loc 1 2056 0 is_stmt 0 discriminator 2
 2451 000a 0122     		mov	r2, #1
 2452 000c 5023     		mov	r3, #80
 2453 000e C254     		strb	r2, [r0, r3]
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2454              		.loc 1 2063 0 is_stmt 1 discriminator 2
 2455 0010 0368     		ldr	r3, [r0]
 2456 0012 9A68     		ldr	r2, [r3, #8]
 2457 0014 5207     		lsl	r2, r2, #29
 2458 0016 34D4     		bmi	.L178
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2459              		.loc 1 2066 0
 2460 0018 0A7A     		ldrb	r2, [r1, #8]
 2461 001a 012A     		cmp	r2, #1
 2462 001c 04D1     		bne	.L179
2069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2463              		.loc 1 2069 0
 2464 001e 5C68     		ldr	r4, [r3, #4]
 2465 0020 7F32     		add	r2, r2, #127
 2466 0022 2243     		orr	r2, r4
 2467 0024 5A60     		str	r2, [r3, #4]
 2468 0026 03E0     		b	.L180
ARM GAS  /tmp/cclbkaGF.s 			page 94


 2469              	.L179:
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2470              		.loc 1 2074 0
 2471 0028 5A68     		ldr	r2, [r3, #4]
 2472 002a 8024     		mov	r4, #128
 2473 002c A243     		bic	r2, r4
 2474 002e 5A60     		str	r2, [r3, #4]
 2475              	.L180:
2081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
 2476              		.loc 1 2081 0
 2477 0030 0268     		ldr	r2, [r0]
 2478 0032 D468     		ldr	r4, [r2, #12]
 2479 0034 194B     		ldr	r3, .L183
 2480 0036 2340     		and	r3, r4
 2481 0038 D360     		str	r3, [r2, #12]
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2482              		.loc 1 2085 0
 2483 003a 0268     		ldr	r2, [r0]
 2484 003c D468     		ldr	r4, [r2, #12]
2086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2485              		.loc 1 2086 0
 2486 003e F823     		mov	r3, #248
 2487 0040 DB05     		lsl	r3, r3, #23
 2488 0042 4D68     		ldr	r5, [r1, #4]
 2489 0044 2B40     		and	r3, r5
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2490              		.loc 1 2085 0
 2491 0046 0D68     		ldr	r5, [r1]
 2492 0048 2B43     		orr	r3, r5
 2493 004a 2343     		orr	r3, r4
 2494 004c D360     		str	r3, [r2, #12]
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2495              		.loc 1 2091 0
 2496 004e 0568     		ldr	r5, [r0]
 2497 0050 EA68     		ldr	r2, [r5, #12]
 2498 0052 1826     		mov	r6, #24
 2499 0054 3240     		and	r2, r6
 2500 0056 9208     		lsr	r2, r2, #2
 2501 0058 CC68     		ldr	r4, [r1, #12]
 2502 005a 9440     		lsl	r4, r4, r2
 2503              	.LVL169:
2092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2504              		.loc 1 2092 0
 2505 005c 0A69     		ldr	r2, [r1, #16]
 2506 005e EB68     		ldr	r3, [r5, #12]
 2507 0060 3340     		and	r3, r6
 2508 0062 9B08     		lsr	r3, r3, #2
 2509 0064 9A40     		lsl	r2, r2, r3
 2510 0066 131C     		mov	r3, r2
 2511              	.LVL170:
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2512              		.loc 1 2095 0
 2513 0068 296A     		ldr	r1, [r5, #32]
 2514              	.LVL171:
 2515 006a 0D4A     		ldr	r2, .L183+4
 2516              	.LVL172:
 2517 006c 0A40     		and	r2, r1
ARM GAS  /tmp/cclbkaGF.s 			page 95


 2518 006e 2A62     		str	r2, [r5, #32]
2098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
 2519              		.loc 1 2098 0
 2520 0070 0168     		ldr	r1, [r0]
 2521 0072 2204     		lsl	r2, r4, #16
 2522 0074 0A62     		str	r2, [r1, #32]
2100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2523              		.loc 1 2100 0
 2524 0076 0268     		ldr	r2, [r0]
 2525 0078 116A     		ldr	r1, [r2, #32]
 2526 007a 0B43     		orr	r3, r1
 2527              	.LVL173:
 2528 007c 1362     		str	r3, [r2, #32]
2036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2529              		.loc 1 2036 0
 2530 007e 0023     		mov	r3, #0
 2531 0080 04E0     		b	.L181
 2532              	.LVL174:
 2533              	.L178:
2107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2534              		.loc 1 2107 0
 2535 0082 426D     		ldr	r2, [r0, #84]
 2536 0084 2023     		mov	r3, #32
 2537 0086 1343     		orr	r3, r2
 2538 0088 4365     		str	r3, [r0, #84]
 2539              	.LVL175:
2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2540              		.loc 1 2109 0
 2541 008a 0123     		mov	r3, #1
 2542              	.LVL176:
 2543              	.L181:
2113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2544              		.loc 1 2113 0
 2545 008c 0021     		mov	r1, #0
 2546 008e 5022     		mov	r2, #80
 2547 0090 8154     		strb	r1, [r0, r2]
2116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2548              		.loc 1 2116 0
 2549 0092 181C     		mov	r0, r3
 2550              	.LVL177:
 2551 0094 00E0     		b	.L177
 2552              	.LVL178:
 2553              	.L182:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2554              		.loc 1 2056 0
 2555 0096 0220     		mov	r0, #2
 2556              	.LVL179:
 2557              	.L177:
2117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2558              		.loc 1 2117 0
 2559              		@ sp needed
 2560 0098 70BD     		pop	{r4, r5, r6, pc}
 2561              	.L184:
 2562 009a C046     		.align	2
 2563              	.L183:
 2564 009c FFFF3F83 		.word	-2092957697
 2565 00a0 00F000F0 		.word	-268374016
ARM GAS  /tmp/cclbkaGF.s 			page 96


 2566              		.cfi_endproc
 2567              	.LFE53:
 2569              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2570              		.align	2
 2571              		.global	HAL_ADC_GetState
 2572              		.code	16
 2573              		.thumb_func
 2575              	HAL_ADC_GetState:
 2576              	.LFB54:
2152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2577              		.loc 1 2152 0
 2578              		.cfi_startproc
 2579              	.LVL180:
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2580              		.loc 1 2157 0
 2581 0000 406D     		ldr	r0, [r0, #84]
 2582              	.LVL181:
2158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2583              		.loc 1 2158 0
 2584              		@ sp needed
 2585 0002 7047     		bx	lr
 2586              		.cfi_endproc
 2587              	.LFE54:
 2589              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2590              		.align	2
 2591              		.global	HAL_ADC_GetError
 2592              		.code	16
 2593              		.thumb_func
 2595              	HAL_ADC_GetError:
 2596              	.LFB55:
2166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2597              		.loc 1 2166 0
 2598              		.cfi_startproc
 2599              	.LVL182:
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2600              		.loc 1 2170 0
 2601 0000 806D     		ldr	r0, [r0, #88]
 2602              	.LVL183:
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2603              		.loc 1 2171 0
 2604              		@ sp needed
 2605 0002 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE55:
 2609              		.text
 2610              	.Letext0:
 2611              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2612              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2613              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
 2614              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 2615              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2616              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2617              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 2618              		.file 9 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 2619              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /tmp/cclbkaGF.s 			page 97


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_hal_adc.c
     /tmp/cclbkaGF.s:19     .text.ADC_DelayMicroSecond:0000000000000000 $t
     /tmp/cclbkaGF.s:23     .text.ADC_DelayMicroSecond:0000000000000000 ADC_DelayMicroSecond
     /tmp/cclbkaGF.s:67     .text.ADC_DelayMicroSecond:0000000000000028 $d
     /tmp/cclbkaGF.s:73     .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/cclbkaGF.s:77     .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/cclbkaGF.s:160    .text.ADC_Disable:0000000000000000 $t
     /tmp/cclbkaGF.s:164    .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/cclbkaGF.s:280    .text.ADC_Enable:0000000000000000 $t
     /tmp/cclbkaGF.s:284    .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/cclbkaGF.s:400    .text.ADC_Enable:0000000000000084 $d
     /tmp/cclbkaGF.s:405    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cclbkaGF.s:410    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cclbkaGF.s:422    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cclbkaGF.s:427    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cclbkaGF.s:761    .text.HAL_ADC_Init:00000000000001d4 $d
     /tmp/cclbkaGF.s:771    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cclbkaGF.s:776    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cclbkaGF.s:788    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cclbkaGF.s:793    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cclbkaGF.s:921    .text.HAL_ADC_DeInit:000000000000009c $d
     /tmp/cclbkaGF.s:931    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cclbkaGF.s:936    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cclbkaGF.s:1023   .text.HAL_ADC_Start:000000000000005c $d
     /tmp/cclbkaGF.s:1028   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cclbkaGF.s:1033   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cclbkaGF.s:1095   .text.HAL_ADC_Stop:000000000000003c $d
     /tmp/cclbkaGF.s:1100   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cclbkaGF.s:1105   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cclbkaGF.s:1267   .text.HAL_ADC_PollForConversion:00000000000000c4 $d
     /tmp/cclbkaGF.s:1272   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cclbkaGF.s:1277   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cclbkaGF.s:1386   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cclbkaGF.s:1391   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cclbkaGF.s:1504   .text.HAL_ADC_Start_IT:0000000000000084 $d
     /tmp/cclbkaGF.s:1509   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cclbkaGF.s:1514   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cclbkaGF.s:1582   .text.HAL_ADC_Stop_IT:0000000000000048 $d
     /tmp/cclbkaGF.s:1587   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cclbkaGF.s:1592   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cclbkaGF.s:1722   .text.HAL_ADC_Start_DMA:0000000000000098 $d
     /tmp/cclbkaGF.s:1888   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cclbkaGF.s:2005   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cclbkaGF.s:2066   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cclbkaGF.s:1730   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cclbkaGF.s:1735   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cclbkaGF.s:1841   .text.HAL_ADC_Stop_DMA:0000000000000074 $d
     /tmp/cclbkaGF.s:1846   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cclbkaGF.s:1851   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cclbkaGF.s:1867   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cclbkaGF.s:1872   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cclbkaGF.s:1884   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cclbkaGF.s:1979   .text.ADC_DMAConvCplt:000000000000006c $d
     /tmp/cclbkaGF.s:1984   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cclbkaGF.s:1989   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cclbkaGF.s:2001   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
ARM GAS  /tmp/cclbkaGF.s 			page 98


     /tmp/cclbkaGF.s:2028   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cclbkaGF.s:2033   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cclbkaGF.s:2045   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/cclbkaGF.s:2050   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cclbkaGF.s:2062   .text.ADC_DMAError:0000000000000000 $t
     /tmp/cclbkaGF.s:2099   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cclbkaGF.s:2104   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cclbkaGF.s:2273   .text.HAL_ADC_IRQHandler:00000000000000dc $d
     /tmp/cclbkaGF.s:2278   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cclbkaGF.s:2283   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cclbkaGF.s:2419   .text.HAL_ADC_ConfigChannel:00000000000000a8 $d
     /tmp/cclbkaGF.s:2427   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cclbkaGF.s:2432   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cclbkaGF.s:2564   .text.HAL_ADC_AnalogWDGConfig:000000000000009c $d
     /tmp/cclbkaGF.s:2570   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cclbkaGF.s:2575   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/cclbkaGF.s:2590   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cclbkaGF.s:2595   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
