ARM GAS  /tmp/ccLgws1W.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32l0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	2
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB34:
  25              		.file 1 "Src/system_stm32l0xx.c"
   1:Src/system_stm32l0xx.c **** /**
   2:Src/system_stm32l0xx.c ****   ******************************************************************************
   3:Src/system_stm32l0xx.c ****   * @file    system_stm32l0xx.c
   4:Src/system_stm32l0xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32l0xx.c ****   * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer System Source File.
   6:Src/system_stm32l0xx.c ****   *
   7:Src/system_stm32l0xx.c ****   *   This file provides two functions and one global variable to be called from
   8:Src/system_stm32l0xx.c ****   *   user application:
   9:Src/system_stm32l0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and
  10:Src/system_stm32l0xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32l0xx.c ****   *                      the "startup_stm32l0xx.s" file.
  12:Src/system_stm32l0xx.c ****   *
  13:Src/system_stm32l0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32l0xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32l0xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32l0xx.c ****   *
  17:Src/system_stm32l0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32l0xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32l0xx.c ****   *                                 during program execution.
  20:Src/system_stm32l0xx.c ****   *
  21:Src/system_stm32l0xx.c ****   *
  22:Src/system_stm32l0xx.c ****   ******************************************************************************
  23:Src/system_stm32l0xx.c ****   * @attention
  24:Src/system_stm32l0xx.c ****   *
  25:Src/system_stm32l0xx.c ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  26:Src/system_stm32l0xx.c ****   * All rights reserved.</center></h2>
  27:Src/system_stm32l0xx.c ****   *
  28:Src/system_stm32l0xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  29:Src/system_stm32l0xx.c ****   * the "License"; You may not use this file except in compliance with the
  30:Src/system_stm32l0xx.c ****   * License. You may obtain a copy of the License at:
  31:Src/system_stm32l0xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  32:Src/system_stm32l0xx.c ****   *
  33:Src/system_stm32l0xx.c ****   ******************************************************************************
ARM GAS  /tmp/ccLgws1W.s 			page 2


  34:Src/system_stm32l0xx.c ****   */
  35:Src/system_stm32l0xx.c **** 
  36:Src/system_stm32l0xx.c **** /** @addtogroup CMSIS
  37:Src/system_stm32l0xx.c ****   * @{
  38:Src/system_stm32l0xx.c ****   */
  39:Src/system_stm32l0xx.c **** 
  40:Src/system_stm32l0xx.c **** /** @addtogroup stm32l0xx_system
  41:Src/system_stm32l0xx.c ****   * @{
  42:Src/system_stm32l0xx.c ****   */
  43:Src/system_stm32l0xx.c **** 
  44:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Includes
  45:Src/system_stm32l0xx.c ****   * @{
  46:Src/system_stm32l0xx.c ****   */
  47:Src/system_stm32l0xx.c **** 
  48:Src/system_stm32l0xx.c **** #include "stm32l0xx.h"
  49:Src/system_stm32l0xx.c **** 
  50:Src/system_stm32l0xx.c **** #if !defined  (HSE_VALUE)
  51:Src/system_stm32l0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000U) /*!< Value of the External oscillator in Hz */
  52:Src/system_stm32l0xx.c **** #endif /* HSE_VALUE */
  53:Src/system_stm32l0xx.c **** 
  54:Src/system_stm32l0xx.c **** #if !defined  (MSI_VALUE)
  55:Src/system_stm32l0xx.c ****   #define MSI_VALUE    ((uint32_t)2097152U) /*!< Value of the Internal oscillator in Hz*/
  56:Src/system_stm32l0xx.c **** #endif /* MSI_VALUE */
  57:Src/system_stm32l0xx.c **** 
  58:Src/system_stm32l0xx.c **** #if !defined  (HSI_VALUE)
  59:Src/system_stm32l0xx.c ****   #define HSI_VALUE    ((uint32_t)16000000U) /*!< Value of the Internal oscillator in Hz*/
  60:Src/system_stm32l0xx.c **** #endif /* HSI_VALUE */
  61:Src/system_stm32l0xx.c **** 
  62:Src/system_stm32l0xx.c **** 
  63:Src/system_stm32l0xx.c **** /**
  64:Src/system_stm32l0xx.c ****   * @}
  65:Src/system_stm32l0xx.c ****   */
  66:Src/system_stm32l0xx.c **** 
  67:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_TypesDefinitions
  68:Src/system_stm32l0xx.c ****   * @{
  69:Src/system_stm32l0xx.c ****   */
  70:Src/system_stm32l0xx.c **** 
  71:Src/system_stm32l0xx.c **** /**
  72:Src/system_stm32l0xx.c ****   * @}
  73:Src/system_stm32l0xx.c ****   */
  74:Src/system_stm32l0xx.c **** 
  75:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Defines
  76:Src/system_stm32l0xx.c ****   * @{
  77:Src/system_stm32l0xx.c ****   */
  78:Src/system_stm32l0xx.c **** /************************* Miscellaneous Configuration ************************/
  79:Src/system_stm32l0xx.c **** 
  80:Src/system_stm32l0xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  81:Src/system_stm32l0xx.c ****      Internal SRAM. */
  82:Src/system_stm32l0xx.c **** /* #define VECT_TAB_SRAM */
  83:Src/system_stm32l0xx.c **** #define VECT_TAB_OFFSET  0x00U /*!< Vector Table base offset field.
  84:Src/system_stm32l0xx.c ****                                    This value must be a multiple of 0x100. */
  85:Src/system_stm32l0xx.c **** /******************************************************************************/
  86:Src/system_stm32l0xx.c **** /**
  87:Src/system_stm32l0xx.c ****   * @}
  88:Src/system_stm32l0xx.c ****   */
  89:Src/system_stm32l0xx.c **** 
  90:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Macros
ARM GAS  /tmp/ccLgws1W.s 			page 3


  91:Src/system_stm32l0xx.c ****   * @{
  92:Src/system_stm32l0xx.c ****   */
  93:Src/system_stm32l0xx.c **** 
  94:Src/system_stm32l0xx.c **** /**
  95:Src/system_stm32l0xx.c ****   * @}
  96:Src/system_stm32l0xx.c ****   */
  97:Src/system_stm32l0xx.c **** 
  98:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Variables
  99:Src/system_stm32l0xx.c ****   * @{
 100:Src/system_stm32l0xx.c ****   */
 101:Src/system_stm32l0xx.c ****   /* This variable is updated in three ways:
 102:Src/system_stm32l0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 103:Src/system_stm32l0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 104:Src/system_stm32l0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 105:Src/system_stm32l0xx.c ****          Note: If you use this function to configure the system clock; then there
 106:Src/system_stm32l0xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 107:Src/system_stm32l0xx.c ****                variable is updated automatically.
 108:Src/system_stm32l0xx.c ****   */
 109:Src/system_stm32l0xx.c ****   uint32_t SystemCoreClock = 2097152U; /* 32.768 kHz * 2^6 */
 110:Src/system_stm32l0xx.c ****   const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U
 111:Src/system_stm32l0xx.c ****   const uint8_t APBPrescTable[8] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 112:Src/system_stm32l0xx.c ****   const uint8_t PLLMulTable[9] = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};
 113:Src/system_stm32l0xx.c **** 
 114:Src/system_stm32l0xx.c **** /**
 115:Src/system_stm32l0xx.c ****   * @}
 116:Src/system_stm32l0xx.c ****   */
 117:Src/system_stm32l0xx.c **** 
 118:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_FunctionPrototypes
 119:Src/system_stm32l0xx.c ****   * @{
 120:Src/system_stm32l0xx.c ****   */
 121:Src/system_stm32l0xx.c **** 
 122:Src/system_stm32l0xx.c **** /**
 123:Src/system_stm32l0xx.c ****   * @}
 124:Src/system_stm32l0xx.c ****   */
 125:Src/system_stm32l0xx.c **** 
 126:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Functions
 127:Src/system_stm32l0xx.c ****   * @{
 128:Src/system_stm32l0xx.c ****   */
 129:Src/system_stm32l0xx.c **** 
 130:Src/system_stm32l0xx.c **** /**
 131:Src/system_stm32l0xx.c ****   * @brief  Setup the microcontroller system.
 132:Src/system_stm32l0xx.c ****   * @param  None
 133:Src/system_stm32l0xx.c ****   * @retval None
 134:Src/system_stm32l0xx.c ****   */
 135:Src/system_stm32l0xx.c **** void SystemInit (void)
 136:Src/system_stm32l0xx.c **** {
  26              		.loc 1 136 0
  27              		.cfi_startproc
 137:Src/system_stm32l0xx.c **** /*!< Set MSION bit */
 138:Src/system_stm32l0xx.c ****   RCC->CR |= (uint32_t)0x00000100U;
  28              		.loc 1 138 0
  29 0000 104B     		ldr	r3, .L2
  30 0002 1A68     		ldr	r2, [r3]
  31 0004 8021     		mov	r1, #128
  32 0006 4900     		lsl	r1, r1, #1
  33 0008 0A43     		orr	r2, r1
  34 000a 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccLgws1W.s 			page 4


 139:Src/system_stm32l0xx.c **** 
 140:Src/system_stm32l0xx.c ****   /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
 141:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t) 0x88FF400CU;
  35              		.loc 1 141 0
  36 000c D968     		ldr	r1, [r3, #12]
  37 000e 0E4A     		ldr	r2, .L2+4
  38 0010 0A40     		and	r2, r1
  39 0012 DA60     		str	r2, [r3, #12]
 142:Src/system_stm32l0xx.c **** 
 143:Src/system_stm32l0xx.c ****   /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
 144:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFF6U;
  40              		.loc 1 144 0
  41 0014 1968     		ldr	r1, [r3]
  42 0016 0D4A     		ldr	r2, .L2+8
  43 0018 0A40     		and	r2, r1
  44 001a 1A60     		str	r2, [r3]
 145:Src/system_stm32l0xx.c **** 
 146:Src/system_stm32l0xx.c ****   /*!< Reset HSI48ON  bit */
 147:Src/system_stm32l0xx.c ****   RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
  45              		.loc 1 147 0
  46 001c 9A68     		ldr	r2, [r3, #8]
  47 001e 0121     		mov	r1, #1
  48 0020 8A43     		bic	r2, r1
  49 0022 9A60     		str	r2, [r3, #8]
 148:Src/system_stm32l0xx.c **** 
 149:Src/system_stm32l0xx.c ****   /*!< Reset HSEBYP bit */
 150:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  50              		.loc 1 150 0
  51 0024 1968     		ldr	r1, [r3]
  52 0026 0A4A     		ldr	r2, .L2+12
  53 0028 0A40     		and	r2, r1
  54 002a 1A60     		str	r2, [r3]
 151:Src/system_stm32l0xx.c **** 
 152:Src/system_stm32l0xx.c ****   /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 153:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t)0xFF02FFFFU;
  55              		.loc 1 153 0
  56 002c D968     		ldr	r1, [r3, #12]
  57 002e 094A     		ldr	r2, .L2+16
  58 0030 0A40     		and	r2, r1
  59 0032 DA60     		str	r2, [r3, #12]
 154:Src/system_stm32l0xx.c **** 
 155:Src/system_stm32l0xx.c ****   /*!< Disable all interrupts */
 156:Src/system_stm32l0xx.c ****   RCC->CIER = 0x00000000U;
  60              		.loc 1 156 0
  61 0034 0022     		mov	r2, #0
  62 0036 1A61     		str	r2, [r3, #16]
 157:Src/system_stm32l0xx.c **** 
 158:Src/system_stm32l0xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 159:Src/system_stm32l0xx.c **** #ifdef VECT_TAB_SRAM
 160:Src/system_stm32l0xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 161:Src/system_stm32l0xx.c **** #else
 162:Src/system_stm32l0xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  63              		.loc 1 162 0
  64 0038 8022     		mov	r2, #128
  65 003a 1205     		lsl	r2, r2, #20
  66 003c 064B     		ldr	r3, .L2+20
  67 003e 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccLgws1W.s 			page 5


 163:Src/system_stm32l0xx.c **** #endif
 164:Src/system_stm32l0xx.c **** }
  68              		.loc 1 164 0
  69              		@ sp needed
  70 0040 7047     		bx	lr
  71              	.L3:
  72 0042 C046     		.align	2
  73              	.L2:
  74 0044 00100240 		.word	1073876992
  75 0048 0C40FF88 		.word	-1996537844
  76 004c F6FFF6FE 		.word	-17367050
  77 0050 FFFFFBFF 		.word	-262145
  78 0054 FFFF02FF 		.word	-16580609
  79 0058 00ED00E0 		.word	-536810240
  80              		.cfi_endproc
  81              	.LFE34:
  83              		.global	__aeabi_uidiv
  84              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  85              		.align	2
  86              		.global	SystemCoreClockUpdate
  87              		.code	16
  88              		.thumb_func
  90              	SystemCoreClockUpdate:
  91              	.LFB35:
 165:Src/system_stm32l0xx.c **** 
 166:Src/system_stm32l0xx.c **** /**
 167:Src/system_stm32l0xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 168:Src/system_stm32l0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 169:Src/system_stm32l0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 170:Src/system_stm32l0xx.c ****   *         other parameters.
 171:Src/system_stm32l0xx.c ****   *
 172:Src/system_stm32l0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 173:Src/system_stm32l0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 174:Src/system_stm32l0xx.c ****   *         based on this variable will be incorrect.
 175:Src/system_stm32l0xx.c ****   *
 176:Src/system_stm32l0xx.c ****   * @note   - The system frequency computed by this function is not the real
 177:Src/system_stm32l0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 178:Src/system_stm32l0xx.c ****   *           constant and the selected clock source:
 179:Src/system_stm32l0xx.c ****   *
 180:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI
 181:Src/system_stm32l0xx.c ****   *             value as defined by the MSI range.
 182:Src/system_stm32l0xx.c ****   *
 183:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 184:Src/system_stm32l0xx.c ****   *
 185:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 186:Src/system_stm32l0xx.c ****   *
 187:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 188:Src/system_stm32l0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 189:Src/system_stm32l0xx.c ****   *
 190:Src/system_stm32l0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 191:Src/system_stm32l0xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 192:Src/system_stm32l0xx.c ****   *             in voltage and temperature.
 193:Src/system_stm32l0xx.c ****   *
 194:Src/system_stm32l0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 195:Src/system_stm32l0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 196:Src/system_stm32l0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 197:Src/system_stm32l0xx.c ****   *              have wrong result.
ARM GAS  /tmp/ccLgws1W.s 			page 6


 198:Src/system_stm32l0xx.c ****   *
 199:Src/system_stm32l0xx.c ****   *         - The result of this function could be not correct when using fractional
 200:Src/system_stm32l0xx.c ****   *           value for HSE crystal.
 201:Src/system_stm32l0xx.c ****   * @param  None
 202:Src/system_stm32l0xx.c ****   * @retval None
 203:Src/system_stm32l0xx.c ****   */
 204:Src/system_stm32l0xx.c **** void SystemCoreClockUpdate (void)
 205:Src/system_stm32l0xx.c **** {
  92              		.loc 1 205 0
  93              		.cfi_startproc
  94 0000 08B5     		push	{r3, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 3, -8
  98              		.cfi_offset 14, -4
  99              	.LVL0:
 206:Src/system_stm32l0xx.c ****   uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 207:Src/system_stm32l0xx.c **** 
 208:Src/system_stm32l0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 209:Src/system_stm32l0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 100              		.loc 1 209 0
 101 0002 2A4B     		ldr	r3, .L14
 102 0004 DB68     		ldr	r3, [r3, #12]
 103 0006 0C22     		mov	r2, #12
 104 0008 1340     		and	r3, r2
 105              	.LVL1:
 210:Src/system_stm32l0xx.c **** 
 211:Src/system_stm32l0xx.c ****   switch (tmp)
 106              		.loc 1 211 0
 107 000a 042B     		cmp	r3, #4
 108 000c 0FD0     		beq	.L6
 109 000e 082B     		cmp	r3, #8
 110 0010 19D0     		beq	.L7
 111 0012 002B     		cmp	r3, #0
 112 0014 1BD1     		bne	.L13
 212:Src/system_stm32l0xx.c ****   {
 213:Src/system_stm32l0xx.c ****     case 0x00U:  /* MSI used as system clock */
 214:Src/system_stm32l0xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 113              		.loc 1 214 0
 114 0016 254B     		ldr	r3, .L14
 115              	.LVL2:
 116 0018 5B68     		ldr	r3, [r3, #4]
 117 001a 1B04     		lsl	r3, r3, #16
 118 001c 5B0F     		lsr	r3, r3, #29
 119              	.LVL3:
 215:Src/system_stm32l0xx.c ****       SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 120              		.loc 1 215 0
 121 001e 0133     		add	r3, r3, #1
 122              	.LVL4:
 123 0020 8022     		mov	r2, #128
 124 0022 1202     		lsl	r2, r2, #8
 125 0024 9A40     		lsl	r2, r2, r3
 126 0026 131C     		mov	r3, r2
 127              	.LVL5:
 128 0028 214A     		ldr	r2, .L14+4
 129 002a 1360     		str	r3, [r2]
 216:Src/system_stm32l0xx.c ****       break;
ARM GAS  /tmp/ccLgws1W.s 			page 7


 130              		.loc 1 216 0
 131 002c 33E0     		b	.L9
 132              	.LVL6:
 133              	.L6:
 217:Src/system_stm32l0xx.c ****     case 0x04U:  /* HSI used as system clock */
 218:Src/system_stm32l0xx.c ****       if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 134              		.loc 1 218 0
 135 002e 1F4B     		ldr	r3, .L14
 136              	.LVL7:
 137 0030 1B68     		ldr	r3, [r3]
 138 0032 DB06     		lsl	r3, r3, #27
 139 0034 03D5     		bpl	.L10
 219:Src/system_stm32l0xx.c ****       {
 220:Src/system_stm32l0xx.c ****         SystemCoreClock = HSI_VALUE / 4U;
 140              		.loc 1 220 0
 141 0036 1F4A     		ldr	r2, .L14+8
 142 0038 1D4B     		ldr	r3, .L14+4
 143 003a 1A60     		str	r2, [r3]
 144 003c 2BE0     		b	.L9
 145              	.L10:
 221:Src/system_stm32l0xx.c ****       }
 222:Src/system_stm32l0xx.c ****       else
 223:Src/system_stm32l0xx.c ****       {
 224:Src/system_stm32l0xx.c ****         SystemCoreClock = HSI_VALUE;
 146              		.loc 1 224 0
 147 003e 1E4A     		ldr	r2, .L14+12
 148 0040 1B4B     		ldr	r3, .L14+4
 149 0042 1A60     		str	r2, [r3]
 150 0044 27E0     		b	.L9
 151              	.LVL8:
 152              	.L7:
 225:Src/system_stm32l0xx.c ****       }
 226:Src/system_stm32l0xx.c ****       break;
 227:Src/system_stm32l0xx.c ****     case 0x08U:  /* HSE used as system clock */
 228:Src/system_stm32l0xx.c ****       SystemCoreClock = HSE_VALUE;
 153              		.loc 1 228 0
 154 0046 1D4A     		ldr	r2, .L14+16
 155 0048 194B     		ldr	r3, .L14+4
 156              	.LVL9:
 157 004a 1A60     		str	r2, [r3]
 229:Src/system_stm32l0xx.c ****       break;
 158              		.loc 1 229 0
 159 004c 23E0     		b	.L9
 160              	.LVL10:
 161              	.L13:
 230:Src/system_stm32l0xx.c ****     default:  /* PLL used as system clock */
 231:Src/system_stm32l0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 232:Src/system_stm32l0xx.c ****       pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 162              		.loc 1 232 0
 163 004e 174A     		ldr	r2, .L14
 164 0050 D368     		ldr	r3, [r2, #12]
 165              	.LVL11:
 166 0052 9B02     		lsl	r3, r3, #10
 167              	.LVL12:
 233:Src/system_stm32l0xx.c ****       plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 168              		.loc 1 233 0
 169 0054 D168     		ldr	r1, [r2, #12]
ARM GAS  /tmp/ccLgws1W.s 			page 8


 170 0056 0902     		lsl	r1, r1, #8
 171              	.LVL13:
 234:Src/system_stm32l0xx.c ****       pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 172              		.loc 1 234 0
 173 0058 1B0F     		lsr	r3, r3, #28
 174 005a 1948     		ldr	r0, .L14+20
 175 005c C05C     		ldrb	r0, [r0, r3]
 176              	.LVL14:
 235:Src/system_stm32l0xx.c ****       plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 177              		.loc 1 235 0
 178 005e 890F     		lsr	r1, r1, #30
 179 0060 0131     		add	r1, r1, #1
 180              	.LVL15:
 236:Src/system_stm32l0xx.c **** 
 237:Src/system_stm32l0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 181              		.loc 1 237 0
 182 0062 D368     		ldr	r3, [r2, #12]
 183              	.LVL16:
 238:Src/system_stm32l0xx.c **** 
 239:Src/system_stm32l0xx.c ****       if (pllsource == 0x00U)
 184              		.loc 1 239 0
 185 0064 DB03     		lsl	r3, r3, #15
 186 0066 10D4     		bmi	.L11
 187              	.LVL17:
 240:Src/system_stm32l0xx.c ****       {
 241:Src/system_stm32l0xx.c ****         /* HSI oscillator clock selected as PLL clock entry */
 242:Src/system_stm32l0xx.c ****         if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 188              		.loc 1 242 0
 189 0068 1368     		ldr	r3, [r2]
 190 006a DB06     		lsl	r3, r3, #27
 191 006c 06D5     		bpl	.L12
 243:Src/system_stm32l0xx.c ****         {
 244:Src/system_stm32l0xx.c ****           SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 192              		.loc 1 244 0
 193 006e 114B     		ldr	r3, .L14+8
 194 0070 5843     		mul	r0, r3
 195              	.LVL18:
 196 0072 FFF7FEFF 		bl	__aeabi_uidiv
 197              	.LVL19:
 198 0076 0E4B     		ldr	r3, .L14+4
 199 0078 1860     		str	r0, [r3]
 200 007a 0CE0     		b	.L9
 201              	.LVL20:
 202              	.L12:
 245:Src/system_stm32l0xx.c ****         }
 246:Src/system_stm32l0xx.c ****         else
 247:Src/system_stm32l0xx.c ****         {
 248:Src/system_stm32l0xx.c ****           SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 203              		.loc 1 248 0
 204 007c 0E4B     		ldr	r3, .L14+12
 205 007e 5843     		mul	r0, r3
 206              	.LVL21:
 207 0080 FFF7FEFF 		bl	__aeabi_uidiv
 208              	.LVL22:
 209 0084 0A4B     		ldr	r3, .L14+4
 210 0086 1860     		str	r0, [r3]
 211 0088 05E0     		b	.L9
ARM GAS  /tmp/ccLgws1W.s 			page 9


 212              	.LVL23:
 213              	.L11:
 249:Src/system_stm32l0xx.c ****         }
 250:Src/system_stm32l0xx.c ****       }
 251:Src/system_stm32l0xx.c ****       else
 252:Src/system_stm32l0xx.c ****       {
 253:Src/system_stm32l0xx.c ****         /* HSE selected as PLL clock entry */
 254:Src/system_stm32l0xx.c ****         SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 214              		.loc 1 254 0
 215 008a 0C4B     		ldr	r3, .L14+16
 216 008c 5843     		mul	r0, r3
 217              	.LVL24:
 218 008e FFF7FEFF 		bl	__aeabi_uidiv
 219              	.LVL25:
 220 0092 074B     		ldr	r3, .L14+4
 221 0094 1860     		str	r0, [r3]
 222              	.LVL26:
 223              	.L9:
 255:Src/system_stm32l0xx.c ****       }
 256:Src/system_stm32l0xx.c ****       break;
 257:Src/system_stm32l0xx.c ****   }
 258:Src/system_stm32l0xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
 259:Src/system_stm32l0xx.c ****   /* Get HCLK prescaler */
 260:Src/system_stm32l0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 224              		.loc 1 260 0
 225 0096 054B     		ldr	r3, .L14
 226 0098 DB68     		ldr	r3, [r3, #12]
 227 009a 1B06     		lsl	r3, r3, #24
 228 009c 1B0F     		lsr	r3, r3, #28
 229 009e 094A     		ldr	r2, .L14+24
 230 00a0 D35C     		ldrb	r3, [r2, r3]
 231              	.LVL27:
 261:Src/system_stm32l0xx.c ****   /* HCLK clock frequency */
 262:Src/system_stm32l0xx.c ****   SystemCoreClock >>= tmp;
 232              		.loc 1 262 0
 233 00a2 034A     		ldr	r2, .L14+4
 234 00a4 1168     		ldr	r1, [r2]
 235 00a6 D940     		lsr	r1, r1, r3
 236 00a8 1160     		str	r1, [r2]
 263:Src/system_stm32l0xx.c **** }
 237              		.loc 1 263 0
 238              		@ sp needed
 239 00aa 08BD     		pop	{r3, pc}
 240              	.L15:
 241              		.align	2
 242              	.L14:
 243 00ac 00100240 		.word	1073876992
 244 00b0 00000000 		.word	.LANCHOR0
 245 00b4 00093D00 		.word	4000000
 246 00b8 0024F400 		.word	16000000
 247 00bc 00127A00 		.word	8000000
 248 00c0 00000000 		.word	.LANCHOR1
 249 00c4 00000000 		.word	.LANCHOR2
 250              		.cfi_endproc
 251              	.LFE35:
 253              		.global	PLLMulTable
 254              		.global	APBPrescTable
ARM GAS  /tmp/ccLgws1W.s 			page 10


 255              		.global	AHBPrescTable
 256              		.global	SystemCoreClock
 257              		.section	.rodata.AHBPrescTable,"a",%progbits
 258              		.align	2
 259              		.set	.LANCHOR2,. + 0
 262              	AHBPrescTable:
 263 0000 00       		.byte	0
 264 0001 00       		.byte	0
 265 0002 00       		.byte	0
 266 0003 00       		.byte	0
 267 0004 00       		.byte	0
 268 0005 00       		.byte	0
 269 0006 00       		.byte	0
 270 0007 00       		.byte	0
 271 0008 01       		.byte	1
 272 0009 02       		.byte	2
 273 000a 03       		.byte	3
 274 000b 04       		.byte	4
 275 000c 06       		.byte	6
 276 000d 07       		.byte	7
 277 000e 08       		.byte	8
 278 000f 09       		.byte	9
 279              		.section	.rodata.APBPrescTable,"a",%progbits
 280              		.align	2
 283              	APBPrescTable:
 284 0000 00       		.byte	0
 285 0001 00       		.byte	0
 286 0002 00       		.byte	0
 287 0003 00       		.byte	0
 288 0004 01       		.byte	1
 289 0005 02       		.byte	2
 290 0006 03       		.byte	3
 291 0007 04       		.byte	4
 292              		.section	.rodata.PLLMulTable,"a",%progbits
 293              		.align	2
 294              		.set	.LANCHOR1,. + 0
 297              	PLLMulTable:
 298 0000 03       		.byte	3
 299 0001 04       		.byte	4
 300 0002 06       		.byte	6
 301 0003 08       		.byte	8
 302 0004 0C       		.byte	12
 303 0005 10       		.byte	16
 304 0006 18       		.byte	24
 305 0007 20       		.byte	32
 306 0008 30       		.byte	48
 307              		.section	.data.SystemCoreClock,"aw",%progbits
 308              		.align	2
 309              		.set	.LANCHOR0,. + 0
 312              	SystemCoreClock:
 313 0000 00002000 		.word	2097152
 314              		.text
 315              	.Letext0:
 316              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 317              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 318              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 319              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
ARM GAS  /tmp/ccLgws1W.s 			page 11


ARM GAS  /tmp/ccLgws1W.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32l0xx.c
     /tmp/ccLgws1W.s:18     .text.SystemInit:0000000000000000 $t
     /tmp/ccLgws1W.s:23     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccLgws1W.s:74     .text.SystemInit:0000000000000044 $d
     /tmp/ccLgws1W.s:85     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccLgws1W.s:90     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccLgws1W.s:243    .text.SystemCoreClockUpdate:00000000000000ac $d
     /tmp/ccLgws1W.s:297    .rodata.PLLMulTable:0000000000000000 PLLMulTable
     /tmp/ccLgws1W.s:283    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccLgws1W.s:262    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccLgws1W.s:312    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccLgws1W.s:258    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccLgws1W.s:280    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccLgws1W.s:293    .rodata.PLLMulTable:0000000000000000 $d
     /tmp/ccLgws1W.s:308    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
