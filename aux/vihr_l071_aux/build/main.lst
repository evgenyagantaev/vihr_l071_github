ARM GAS  /tmp/cctu1RYe.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.primitive_delay,"ax",%progbits
  18              		.align	2
  19              		.global	primitive_delay
  20              		.code	16
  21              		.thumb_func
  23              	primitive_delay:
  24              	.LFB36:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/cctu1RYe.s 			page 2


  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "string.h"
  42:Src/main.c    **** #include "stdio.h"
  43:Src/main.c    **** #include "stm32l0xx_hal.h"
  44:Src/main.c    **** #include "adc.h"
  45:Src/main.c    **** #include "i2c.h"
  46:Src/main.c    **** #include "spi.h"
  47:Src/main.c    **** #include "tim.h"
  48:Src/main.c    **** #include "usart.h"
  49:Src/main.c    **** #include "gpio.h"
  50:Src/main.c    **** 
  51:Src/main.c    **** #include "ssd1306.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** #include "one_second_timer_interface.h"
  54:Src/main.c    **** #include "pressure_sensor_object.h"
  55:Src/main.c    **** #include "voltmeter_object.h"
  56:Src/main.c    **** #include "depth_switch_interface.h"
  57:Src/main.c    **** #include "rtc_ds3231_interface.h"
  58:Src/main.c    **** #include "at24c32_interface.h"
  59:Src/main.c    **** #include "atm_barometer_interface.h"
  60:Src/main.c    **** #include "dive_meter_interface.h"
  61:Src/main.c    **** 
  62:Src/main.c    **** 
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN PV */
  67:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  68:Src/main.c    **** 
  69:Src/main.c    **** static char message[256];
  70:Src/main.c    **** static char timestamp[64];
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  73:Src/main.c    **** void SystemClock_Config(void);
  74:Src/main.c    **** 
  75:Src/main.c    **** uint8_t primitive_delay()
  76:Src/main.c    **** {
  26              		.loc 1 76 0
  27              		.cfi_startproc
  28 0000 82B0     		sub	sp, sp, #8
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  77:Src/main.c    **** 	uint32_t volatile i;
  78:Src/main.c    **** 	for(i=0; i<300000; i++);
  31              		.loc 1 78 0
  32 0002 0023     		mov	r3, #0
  33 0004 0193     		str	r3, [sp, #4]
  34 0006 02E0     		b	.L2
  35              	.L3:
  36              		.loc 1 78 0 is_stmt 0 discriminator 3
  37 0008 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cctu1RYe.s 			page 3


  38 000a 0133     		add	r3, r3, #1
  39 000c 0193     		str	r3, [sp, #4]
  40              	.L2:
  41              		.loc 1 78 0 discriminator 1
  42 000e 019A     		ldr	r2, [sp, #4]
  43 0010 024B     		ldr	r3, .L4
  44 0012 9A42     		cmp	r2, r3
  45 0014 F8D9     		bls	.L3
  79:Src/main.c    **** 
  80:Src/main.c    **** 	return 0;
  81:Src/main.c    **** }
  46              		.loc 1 81 0 is_stmt 1
  47 0016 0020     		mov	r0, #0
  48 0018 02B0     		add	sp, sp, #8
  49              		@ sp needed
  50 001a 7047     		bx	lr
  51              	.L5:
  52              		.align	2
  53              	.L4:
  54 001c DF930400 		.word	299999
  55              		.cfi_endproc
  56              	.LFE36:
  58              		.section	.text._Error_Handler,"ax",%progbits
  59              		.align	2
  60              		.global	_Error_Handler
  61              		.code	16
  62              		.thumb_func
  64              	_Error_Handler:
  65              	.LFB39:
  82:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  83:Src/main.c    **** 
  84:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  85:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  86:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  87:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  88:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  89:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  90:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  91:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  92:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  93:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  94:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  95:Src/main.c    **** int main(void)
  96:Src/main.c    **** {
  97:Src/main.c    **** 
  98:Src/main.c    **** 
  99:Src/main.c    **** 
 100:Src/main.c    **** 	uint32_t seconds_in_minute = 60;
 101:Src/main.c    **** 	uint32_t seconds_in_hour = seconds_in_minute * 60;
 102:Src/main.c    **** 	uint32_t seconds_in_day = seconds_in_hour * 24;
 103:Src/main.c    **** 	uint32_t rtc_time_counter;
 104:Src/main.c    **** 
 105:Src/main.c    **** 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 106:Src/main.c    ****     HAL_Init();
 107:Src/main.c    ****                                                                                     
 108:Src/main.c    ****     /* Configure the system clock */
 109:Src/main.c    ****     SystemClock_Config();
ARM GAS  /tmp/cctu1RYe.s 			page 4


 110:Src/main.c    ****                                                                                     
 111:Src/main.c    ****     /* Initialize all configured peripherals */
 112:Src/main.c    ****     MX_GPIO_Init();
 113:Src/main.c    ****     MX_ADC_Init();
 114:Src/main.c    ****     MX_I2C1_Init();
 115:Src/main.c    ****     MX_I2C2_Init();
 116:Src/main.c    ****     MX_I2C3_Init();
 117:Src/main.c    ****     MX_SPI1_Init();
 118:Src/main.c    ****     // enable spi1
 119:Src/main.c    ****     SPI1->CR1 |= SPI_CR1_SPE;
 120:Src/main.c    ****     MX_USART1_UART_Init();
 121:Src/main.c    **** 
 122:Src/main.c    **** 	//--------init display1------------------------------
 123:Src/main.c    ****     ssd1306_set_i2c_port(&hi2c1, 1);
 124:Src/main.c    ****   	ssd1306_Init();
 125:Src/main.c    ****   	HAL_Delay(100);
 126:Src/main.c    ****   	ssd1306_Fill(White);
 127:Src/main.c    ****   	ssd1306_UpdateScreen();
 128:Src/main.c    ****   	HAL_Delay(100);
 129:Src/main.c    ****   	ssd1306_Fill(Black);
 130:Src/main.c    ****   	ssd1306_UpdateScreen();
 131:Src/main.c    **** 
 132:Src/main.c    ****   	HAL_Delay(100);
 133:Src/main.c    **** 
 134:Src/main.c    ****   	ssd1306_SetCursor(0,0);
 135:Src/main.c    ****   	ssd1306_WriteString("DiveCmp", Font_16x26, White);
 136:Src/main.c    ****   	ssd1306_SetCursor(0,30);
 137:Src/main.c    ****   	ssd1306_WriteString("Start..", Font_16x26, White);
 138:Src/main.c    ****   	ssd1306_UpdateScreen();
 139:Src/main.c    **** 
 140:Src/main.c    **** 	one_second_timer_init();
 141:Src/main.c    **** 	one_second_timer_start();
 142:Src/main.c    **** 
 143:Src/main.c    **** 	pressure_sensor_object_init();
 144:Src/main.c    **** 	HAL_Delay(1000);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	int odd_even = 0;
 147:Src/main.c    **** 
 148:Src/main.c    **** 
 149:Src/main.c    **** 
 150:Src/main.c    **** //#define DEBUG
 151:Src/main.c    **** 
 152:Src/main.c    **** 	//************************   MAIN LOOP   *********************************
 153:Src/main.c    **** 
 154:Src/main.c    **** #ifdef DEBUG
 155:Src/main.c    **** 
 156:Src/main.c    **** 	int led_counter = 0;
 157:Src/main.c    **** 
 158:Src/main.c    **** 	while(1)                                                     	    
 159:Src/main.c    **** 	{   
 160:Src/main.c    **** 
 161:Src/main.c    **** 		// debug
 162:Src/main.c    **** 		/*
 163:Src/main.c    **** 	    HAL_GPIO_TogglePin(led0_GPIO_Port, led3_Pin); //           	    
 164:Src/main.c    **** 	    //HAL_Delay(500);                                          	    
 165:Src/main.c    **** 		primitive_delay();                                       		
 166:Src/main.c    **** 	    HAL_GPIO_TogglePin(led0_GPIO_Port, led3_Pin); //           	    
ARM GAS  /tmp/cctu1RYe.s 			page 5


 167:Src/main.c    **** 	    //HAL_Delay(500);                                          	    
 168:Src/main.c    **** 		primitive_delay();                                       		
 169:Src/main.c    **** 		*/
 170:Src/main.c    **** 
 171:Src/main.c    **** 
 172:Src/main.c    **** 		if(one_second_timer_get_flag())
 173:Src/main.c    **** 		{
 174:Src/main.c    **** 			one_second_timer_reset_flag();
 175:Src/main.c    **** 			odd_even = (odd_even+1)%2;
 176:Src/main.c    **** 
 177:Src/main.c    **** 			pressure_sensor_measure_pressure_temperature();                                                 
 178:Src/main.c    **** 		    double P = pressure_sensor_get_pressure();
 179:Src/main.c    **** 		    double actual_temperature = pressure_sensor_get_temperature();
 180:Src/main.c    **** 
 181:Src/main.c    **** 			// debug
 182:Src/main.c    **** 			//*
 183:Src/main.c    **** 			ssd1306_Fill(Black);                                                                            
 184:Src/main.c    ****   		    ssd1306_SetCursor(3,30);
 185:Src/main.c    **** 			if(odd_even)
 186:Src/main.c    **** 		        sprintf(message, "P%05d:T%03d" , (int)(P/10), (int)(actual_temperature/10));
 187:Src/main.c    **** 			else
 188:Src/main.c    **** 		        sprintf(message, "P%05d T%03d" , (int)(P/10), (int)(actual_temperature/10));
 189:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 190:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 191:Src/main.c    ****   		    ssd1306_UpdateScreen();                                                                    
 192:Src/main.c    **** 			//*/
 193:Src/main.c    **** 
 194:Src/main.c    **** 			led_counter++;
 195:Src/main.c    **** 			depth_switch_turn_signal_led(led_counter);
 196:Src/main.c    **** 			if(led_counter == 5)
 197:Src/main.c    **** 				led_counter = 0;
 198:Src/main.c    **** 
 199:Src/main.c    **** 
 200:Src/main.c    **** 		}
 201:Src/main.c    **** 
 202:Src/main.c    **** 	}       
 203:Src/main.c    **** 
 204:Src/main.c    **** #endif
 205:Src/main.c    **** 
 206:Src/main.c    **** 
 207:Src/main.c    **** 
 208:Src/main.c    **** #ifndef DEBUG
 209:Src/main.c    **** 	
 210:Src/main.c    **** 	depth_switch_turn_signal_led(1);
 211:Src/main.c    **** 
 212:Src/main.c    **** 	uint32_t surface_pressure = 101325;
 213:Src/main.c    **** 	ssd1306_Fill(Black);                                                                              
 214:Src/main.c    **** 
 215:Src/main.c    **** 	while(1)                                                     	    
 216:Src/main.c    **** 	{   
 217:Src/main.c    **** 
 218:Src/main.c    **** 		if(one_second_timer_get_flag())
 219:Src/main.c    **** 		{
 220:Src/main.c    **** 			one_second_timer_reset_flag();
 221:Src/main.c    **** 			odd_even = (odd_even+1)%2;
 222:Src/main.c    **** 
 223:Src/main.c    **** 			pressure_sensor_measure_pressure_temperature();                                                 
ARM GAS  /tmp/cctu1RYe.s 			page 6


 224:Src/main.c    **** 		    //double P = pressure_sensor_get_pressure();
 225:Src/main.c    **** 		    //double actual_temperature = pressure_sensor_get_temperature();
 226:Src/main.c    **** 		    
 227:Src/main.c    **** 			voltmeter_measure_voltage();
 228:Src/main.c    **** 		    //double accu_voltage = voltmeter_get_voltage();
 229:Src/main.c    **** 		    double accu_percentage = voltmeter_get_percentage();
 230:Src/main.c    **** 
 231:Src/main.c    **** 			// debug
 232:Src/main.c    **** 			//*
 233:Src/main.c    **** 			//ssd1306_Fill(Black);                                                                          
 234:Src/main.c    ****   		    ssd1306_SetCursor(3,30);
 235:Src/main.c    **** 			if(odd_even)
 236:Src/main.c    **** 		        sprintf(message, "P%05d:T%03d" , (int)(P/10), (int)(actual_temperature/10));
 237:Src/main.c    **** 			else
 238:Src/main.c    **** 		        sprintf(message, "P%05d T%03d" , (int)(P/10), (int)(actual_temperature/10));
 239:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 240:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 241:Src/main.c    ****   		    ssd1306_UpdateScreen();                                                                    
 242:Src/main.c    **** 			//*/
 243:Src/main.c    **** 
 244:Src/main.c    ****   		    ssd1306_SetCursor(0,0);                                                          
 245:Src/main.c    **** 		    sprintf(message, "akkum %02d%%", (int)accu_percentage);                        
 246:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);                                 
 247:Src/main.c    ****   		    ssd1306_UpdateScreen();                                                                    
 248:Src/main.c    **** 		}
 249:Src/main.c    **** 
 250:Src/main.c    ****   	}// end while(1)
 251:Src/main.c    **** 
 252:Src/main.c    **** #endif
 253:Src/main.c    **** 
 254:Src/main.c    **** 
 255:Src/main.c    **** 
 256:Src/main.c    **** 
 257:Src/main.c    **** 
 258:Src/main.c    **** 
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 262:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 263:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 264:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 265:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 266:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 267:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 268:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 269:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 270:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 271:Src/main.c    **** //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 272:Src/main.c    **** 
 273:Src/main.c    **** /**
 274:Src/main.c    ****   * @brief System Clock Configuration
 275:Src/main.c    ****   * @retval None
 276:Src/main.c    ****   */
 277:Src/main.c    **** void SystemClock_Config(void)
 278:Src/main.c    **** {
 279:Src/main.c    **** 
 280:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
ARM GAS  /tmp/cctu1RYe.s 			page 7


 281:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 282:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 283:Src/main.c    **** 
 284:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 285:Src/main.c    ****     */
 286:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 287:Src/main.c    **** 
 288:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 289:Src/main.c    ****     */
 290:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 291:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 292:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 293:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 294:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 295:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 296:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 297:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 298:Src/main.c    ****   {
 299:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 300:Src/main.c    ****   }
 301:Src/main.c    **** 
 302:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 303:Src/main.c    ****     */
 304:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 305:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 306:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 307:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 308:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 309:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 310:Src/main.c    **** 
 311:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 312:Src/main.c    ****   {
 313:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 314:Src/main.c    ****   }
 315:Src/main.c    **** 
 316:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 317:Src/main.c    ****                               |RCC_PERIPHCLK_I2C3;
 318:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 319:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 320:Src/main.c    ****   PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 321:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 322:Src/main.c    ****   {
 323:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 324:Src/main.c    ****   }
 325:Src/main.c    **** 
 326:Src/main.c    ****     /**Configure the Systick interrupt time 
 327:Src/main.c    ****     */
 328:Src/main.c    ****   //HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 329:Src/main.c    **** 
 330:Src/main.c    ****     /**Configure the Systick 
 331:Src/main.c    ****     */
 332:Src/main.c    ****   //HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 335:Src/main.c    ****   //HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 336:Src/main.c    **** }
 337:Src/main.c    **** 
ARM GAS  /tmp/cctu1RYe.s 			page 8


 338:Src/main.c    **** /* USER CODE BEGIN 4 */
 339:Src/main.c    **** 
 340:Src/main.c    **** /* USER CODE END 4 */
 341:Src/main.c    **** 
 342:Src/main.c    **** /**
 343:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 344:Src/main.c    ****   * @param  file: The file name as string.
 345:Src/main.c    ****   * @param  line: The line in file as a number.
 346:Src/main.c    ****   * @retval None
 347:Src/main.c    ****   */
 348:Src/main.c    **** void _Error_Handler(char *file, int line)
 349:Src/main.c    **** {
  66              		.loc 1 349 0
  67              		.cfi_startproc
  68              	.LVL0:
  69              	.L7:
 350:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 351:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 352:Src/main.c    ****   while(1)
 353:Src/main.c    ****   {
 354:Src/main.c    ****   }
  70              		.loc 1 354 0 discriminator 1
  71 0000 FEE7     		b	.L7
  72              		.cfi_endproc
  73              	.LFE39:
  75 0002 C046     		.section	.text.SystemClock_Config,"ax",%progbits
  76              		.align	2
  77              		.global	SystemClock_Config
  78              		.code	16
  79              		.thumb_func
  81              	SystemClock_Config:
  82              	.LFB38:
 278:Src/main.c    **** 
  83              		.loc 1 278 0
  84              		.cfi_startproc
  85 0000 00B5     		push	{lr}
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 14, -4
  89 0002 9BB0     		sub	sp, sp, #108
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 112
 286:Src/main.c    **** 
  92              		.loc 1 286 0
  93 0004 224A     		ldr	r2, .L12
  94 0006 1168     		ldr	r1, [r2]
  95 0008 224B     		ldr	r3, .L12+4
  96 000a 0B40     		and	r3, r1
  97 000c 8021     		mov	r1, #128
  98 000e 0901     		lsl	r1, r1, #4
  99 0010 0B43     		orr	r3, r1
 100 0012 1360     		str	r3, [r2]
 290:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 101              		.loc 1 290 0
 102 0014 0223     		mov	r3, #2
 103 0016 0D93     		str	r3, [sp, #52]
 291:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
ARM GAS  /tmp/cctu1RYe.s 			page 9


 104              		.loc 1 291 0
 105 0018 0122     		mov	r2, #1
 106 001a 1092     		str	r2, [sp, #64]
 292:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 107              		.loc 1 292 0
 108 001c 0F32     		add	r2, r2, #15
 109 001e 1192     		str	r2, [sp, #68]
 293:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 110              		.loc 1 293 0
 111 0020 1693     		str	r3, [sp, #88]
 294:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 112              		.loc 1 294 0
 113 0022 0023     		mov	r3, #0
 114 0024 1793     		str	r3, [sp, #92]
 295:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 115              		.loc 1 295 0
 116 0026 1893     		str	r3, [sp, #96]
 296:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 117              		.loc 1 296 0
 118 0028 8023     		mov	r3, #128
 119 002a 1B04     		lsl	r3, r3, #16
 120 002c 1993     		str	r3, [sp, #100]
 297:Src/main.c    ****   {
 121              		.loc 1 297 0
 122 002e 0DA8     		add	r0, sp, #52
 123 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 124              	.LVL1:
 125 0034 0028     		cmp	r0, #0
 126 0036 04D0     		beq	.L9
 299:Src/main.c    ****   }
 127              		.loc 1 299 0
 128 0038 1748     		ldr	r0, .L12+8
 129 003a 2C21     		mov	r1, #44
 130 003c FF31     		add	r1, r1, #255
 131 003e FFF7FEFF 		bl	_Error_Handler
 132              	.LVL2:
 133              	.L9:
 304:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 134              		.loc 1 304 0
 135 0042 0F23     		mov	r3, #15
 136 0044 0893     		str	r3, [sp, #32]
 306:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 137              		.loc 1 306 0
 138 0046 0C3B     		sub	r3, r3, #12
 139 0048 0993     		str	r3, [sp, #36]
 307:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 140              		.loc 1 307 0
 141 004a 9D33     		add	r3, r3, #157
 142 004c 0A93     		str	r3, [sp, #40]
 308:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 143              		.loc 1 308 0
 144 004e 0023     		mov	r3, #0
 145 0050 0B93     		str	r3, [sp, #44]
 309:Src/main.c    **** 
 146              		.loc 1 309 0
 147 0052 0C93     		str	r3, [sp, #48]
 311:Src/main.c    ****   {
ARM GAS  /tmp/cctu1RYe.s 			page 10


 148              		.loc 1 311 0
 149 0054 08A8     		add	r0, sp, #32
 150 0056 0021     		mov	r1, #0
 151 0058 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 152              	.LVL3:
 153 005c 0028     		cmp	r0, #0
 154 005e 04D0     		beq	.L10
 313:Src/main.c    ****   }
 155              		.loc 1 313 0
 156 0060 0D48     		ldr	r0, .L12+8
 157 0062 3A21     		mov	r1, #58
 158 0064 FF31     		add	r1, r1, #255
 159 0066 FFF7FEFF 		bl	_Error_Handler
 160              	.LVL4:
 161              	.L10:
 316:Src/main.c    ****                               |RCC_PERIPHCLK_I2C3;
 162              		.loc 1 316 0
 163 006a 0A23     		mov	r3, #10
 164 006c FF33     		add	r3, r3, #255
 165 006e 0093     		str	r3, [sp]
 318:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 166              		.loc 1 318 0
 167 0070 0023     		mov	r3, #0
 168 0072 0293     		str	r3, [sp, #8]
 319:Src/main.c    ****   PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 169              		.loc 1 319 0
 170 0074 0593     		str	r3, [sp, #20]
 320:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 171              		.loc 1 320 0
 172 0076 0693     		str	r3, [sp, #24]
 321:Src/main.c    ****   {
 173              		.loc 1 321 0
 174 0078 6846     		mov	r0, sp
 175 007a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 176              	.LVL5:
 177 007e 0028     		cmp	r0, #0
 178 0080 04D0     		beq	.L8
 323:Src/main.c    ****   }
 179              		.loc 1 323 0
 180 0082 0548     		ldr	r0, .L12+8
 181 0084 4421     		mov	r1, #68
 182 0086 FF31     		add	r1, r1, #255
 183 0088 FFF7FEFF 		bl	_Error_Handler
 184              	.LVL6:
 185              	.L8:
 336:Src/main.c    **** 
 186              		.loc 1 336 0
 187 008c 1BB0     		add	sp, sp, #108
 188              		@ sp needed
 189 008e 00BD     		pop	{pc}
 190              	.L13:
 191              		.align	2
 192              	.L12:
 193 0090 00700040 		.word	1073770496
 194 0094 FFE7FFFF 		.word	-6145
 195 0098 00000000 		.word	.LC0
 196              		.cfi_endproc
ARM GAS  /tmp/cctu1RYe.s 			page 11


 197              	.LFE38:
 199              		.global	__aeabi_d2iz
 200              		.section	.text.main,"ax",%progbits
 201              		.align	2
 202              		.global	main
 203              		.code	16
 204              		.thumb_func
 206              	main:
 207              	.LFB37:
  96:Src/main.c    **** 
 208              		.loc 1 96 0
 209              		.cfi_startproc
 210 0000 70B5     		push	{r4, r5, r6, lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 16
 213              		.cfi_offset 4, -16
 214              		.cfi_offset 5, -12
 215              		.cfi_offset 6, -8
 216              		.cfi_offset 14, -4
 217 0002 82B0     		sub	sp, sp, #8
 218              	.LCFI4:
 219              		.cfi_def_cfa_offset 24
 220              	.LVL7:
 106:Src/main.c    ****                                                                                     
 221              		.loc 1 106 0
 222 0004 FFF7FEFF 		bl	HAL_Init
 223              	.LVL8:
 109:Src/main.c    ****                                                                                     
 224              		.loc 1 109 0
 225 0008 FFF7FEFF 		bl	SystemClock_Config
 226              	.LVL9:
 112:Src/main.c    ****     MX_ADC_Init();
 227              		.loc 1 112 0
 228 000c FFF7FEFF 		bl	MX_GPIO_Init
 229              	.LVL10:
 113:Src/main.c    ****     MX_I2C1_Init();
 230              		.loc 1 113 0
 231 0010 FFF7FEFF 		bl	MX_ADC_Init
 232              	.LVL11:
 114:Src/main.c    ****     MX_I2C2_Init();
 233              		.loc 1 114 0
 234 0014 FFF7FEFF 		bl	MX_I2C1_Init
 235              	.LVL12:
 115:Src/main.c    ****     MX_I2C3_Init();
 236              		.loc 1 115 0
 237 0018 FFF7FEFF 		bl	MX_I2C2_Init
 238              	.LVL13:
 116:Src/main.c    ****     MX_SPI1_Init();
 239              		.loc 1 116 0
 240 001c FFF7FEFF 		bl	MX_I2C3_Init
 241              	.LVL14:
 117:Src/main.c    ****     // enable spi1
 242              		.loc 1 117 0
 243 0020 FFF7FEFF 		bl	MX_SPI1_Init
 244              	.LVL15:
 119:Src/main.c    ****     MX_USART1_UART_Init();
 245              		.loc 1 119 0
ARM GAS  /tmp/cctu1RYe.s 			page 12


 246 0024 4A4A     		ldr	r2, .L19
 247 0026 1168     		ldr	r1, [r2]
 248 0028 4023     		mov	r3, #64
 249 002a 0B43     		orr	r3, r1
 250 002c 1360     		str	r3, [r2]
 120:Src/main.c    **** 
 251              		.loc 1 120 0
 252 002e FFF7FEFF 		bl	MX_USART1_UART_Init
 253              	.LVL16:
 123:Src/main.c    ****   	ssd1306_Init();
 254              		.loc 1 123 0
 255 0032 4848     		ldr	r0, .L19+4
 256 0034 0121     		mov	r1, #1
 257 0036 FFF7FEFF 		bl	ssd1306_set_i2c_port
 258              	.LVL17:
 124:Src/main.c    ****   	HAL_Delay(100);
 259              		.loc 1 124 0
 260 003a FFF7FEFF 		bl	ssd1306_Init
 261              	.LVL18:
 125:Src/main.c    ****   	ssd1306_Fill(White);
 262              		.loc 1 125 0
 263 003e 6420     		mov	r0, #100
 264 0040 FFF7FEFF 		bl	HAL_Delay
 265              	.LVL19:
 126:Src/main.c    ****   	ssd1306_UpdateScreen();
 266              		.loc 1 126 0
 267 0044 0120     		mov	r0, #1
 268 0046 FFF7FEFF 		bl	ssd1306_Fill
 269              	.LVL20:
 127:Src/main.c    ****   	HAL_Delay(100);
 270              		.loc 1 127 0
 271 004a FFF7FEFF 		bl	ssd1306_UpdateScreen
 272              	.LVL21:
 128:Src/main.c    ****   	ssd1306_Fill(Black);
 273              		.loc 1 128 0
 274 004e 6420     		mov	r0, #100
 275 0050 FFF7FEFF 		bl	HAL_Delay
 276              	.LVL22:
 129:Src/main.c    ****   	ssd1306_UpdateScreen();
 277              		.loc 1 129 0
 278 0054 0020     		mov	r0, #0
 279 0056 FFF7FEFF 		bl	ssd1306_Fill
 280              	.LVL23:
 130:Src/main.c    **** 
 281              		.loc 1 130 0
 282 005a FFF7FEFF 		bl	ssd1306_UpdateScreen
 283              	.LVL24:
 132:Src/main.c    **** 
 284              		.loc 1 132 0
 285 005e 6420     		mov	r0, #100
 286 0060 FFF7FEFF 		bl	HAL_Delay
 287              	.LVL25:
 134:Src/main.c    ****   	ssd1306_WriteString("DiveCmp", Font_16x26, White);
 288              		.loc 1 134 0
 289 0064 0020     		mov	r0, #0
 290 0066 0021     		mov	r1, #0
 291 0068 FFF7FEFF 		bl	ssd1306_SetCursor
ARM GAS  /tmp/cctu1RYe.s 			page 13


 292              	.LVL26:
 135:Src/main.c    ****   	ssd1306_SetCursor(0,30);
 293              		.loc 1 135 0
 294 006c 3A4C     		ldr	r4, .L19+8
 295 006e 3B48     		ldr	r0, .L19+12
 296 0070 2168     		ldr	r1, [r4]
 297 0072 6268     		ldr	r2, [r4, #4]
 298 0074 0123     		mov	r3, #1
 299 0076 FFF7FEFF 		bl	ssd1306_WriteString
 300              	.LVL27:
 136:Src/main.c    ****   	ssd1306_WriteString("Start..", Font_16x26, White);
 301              		.loc 1 136 0
 302 007a 0020     		mov	r0, #0
 303 007c 1E21     		mov	r1, #30
 304 007e FFF7FEFF 		bl	ssd1306_SetCursor
 305              	.LVL28:
 137:Src/main.c    ****   	ssd1306_UpdateScreen();
 306              		.loc 1 137 0
 307 0082 3748     		ldr	r0, .L19+16
 308 0084 2168     		ldr	r1, [r4]
 309 0086 6268     		ldr	r2, [r4, #4]
 310 0088 0123     		mov	r3, #1
 311 008a FFF7FEFF 		bl	ssd1306_WriteString
 312              	.LVL29:
 138:Src/main.c    **** 
 313              		.loc 1 138 0
 314 008e FFF7FEFF 		bl	ssd1306_UpdateScreen
 315              	.LVL30:
 140:Src/main.c    **** 	one_second_timer_start();
 316              		.loc 1 140 0
 317 0092 FFF7FEFF 		bl	one_second_timer_init
 318              	.LVL31:
 141:Src/main.c    **** 
 319              		.loc 1 141 0
 320 0096 FFF7FEFF 		bl	one_second_timer_start
 321              	.LVL32:
 143:Src/main.c    **** 	HAL_Delay(1000);
 322              		.loc 1 143 0
 323 009a FFF7FEFF 		bl	pressure_sensor_object_init
 324              	.LVL33:
 144:Src/main.c    **** 
 325              		.loc 1 144 0
 326 009e FA20     		mov	r0, #250
 327 00a0 8000     		lsl	r0, r0, #2
 328 00a2 FFF7FEFF 		bl	HAL_Delay
 329              	.LVL34:
 210:Src/main.c    **** 
 330              		.loc 1 210 0
 331 00a6 0120     		mov	r0, #1
 332 00a8 FFF7FEFF 		bl	depth_switch_turn_signal_led
 333              	.LVL35:
 213:Src/main.c    **** 
 334              		.loc 1 213 0
 335 00ac 0020     		mov	r0, #0
 336 00ae FFF7FEFF 		bl	ssd1306_Fill
 337              	.LVL36:
 146:Src/main.c    **** 
ARM GAS  /tmp/cctu1RYe.s 			page 14


 338              		.loc 1 146 0
 339 00b2 0024     		mov	r4, #0
 340              	.LVL37:
 341              	.L15:
 218:Src/main.c    **** 		{
 342              		.loc 1 218 0
 343 00b4 FFF7FEFF 		bl	one_second_timer_get_flag
 344              	.LVL38:
 345 00b8 0028     		cmp	r0, #0
 346 00ba FBD0     		beq	.L15
 347              	.LBB2:
 220:Src/main.c    **** 			odd_even = (odd_even+1)%2;
 348              		.loc 1 220 0
 349 00bc FFF7FEFF 		bl	one_second_timer_reset_flag
 350              	.LVL39:
 221:Src/main.c    **** 
 351              		.loc 1 221 0
 352 00c0 0134     		add	r4, r4, #1
 353              	.LVL40:
 354 00c2 E30F     		lsr	r3, r4, #31
 355 00c4 E418     		add	r4, r4, r3
 356              	.LVL41:
 357 00c6 0122     		mov	r2, #1
 358 00c8 1440     		and	r4, r2
 359 00ca E41A     		sub	r4, r4, r3
 360              	.LVL42:
 223:Src/main.c    **** 		    //double P = pressure_sensor_get_pressure();
 361              		.loc 1 223 0
 362 00cc FFF7FEFF 		bl	pressure_sensor_measure_pressure_temperature
 363              	.LVL43:
 227:Src/main.c    **** 		    //double accu_voltage = voltmeter_get_voltage();
 364              		.loc 1 227 0
 365 00d0 FFF7FEFF 		bl	voltmeter_measure_voltage
 366              	.LVL44:
 229:Src/main.c    **** 
 367              		.loc 1 229 0
 368 00d4 FFF7FEFF 		bl	voltmeter_get_percentage
 369              	.LVL45:
 370 00d8 0090     		str	r0, [sp]
 371 00da 0191     		str	r1, [sp, #4]
 372              	.LVL46:
 234:Src/main.c    **** 			if(odd_even)
 373              		.loc 1 234 0
 374 00dc 0320     		mov	r0, #3
 375              	.LVL47:
 376 00de 1E21     		mov	r1, #30
 377 00e0 FFF7FEFF 		bl	ssd1306_SetCursor
 378              	.LVL48:
 235:Src/main.c    **** 		        sprintf(message, "P%05d:T%03d" , (int)(P/10), (int)(actual_temperature/10));
 379              		.loc 1 235 0
 380 00e4 002C     		cmp	r4, #0
 381 00e6 06D0     		beq	.L16
 236:Src/main.c    **** 			else
 382              		.loc 1 236 0
 383 00e8 1E48     		ldr	r0, .L19+20
 384 00ea 1F49     		ldr	r1, .L19+24
 385 00ec 0022     		mov	r2, #0
ARM GAS  /tmp/cctu1RYe.s 			page 15


 386 00ee 0023     		mov	r3, #0
 387 00f0 FFF7FEFF 		bl	sprintf
 388              	.LVL49:
 389 00f4 05E0     		b	.L17
 390              	.L16:
 238:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 391              		.loc 1 238 0
 392 00f6 1B48     		ldr	r0, .L19+20
 393 00f8 1C49     		ldr	r1, .L19+28
 394 00fa 0022     		mov	r2, #0
 395 00fc 0023     		mov	r3, #0
 396 00fe FFF7FEFF 		bl	sprintf
 397              	.LVL50:
 398              	.L17:
 239:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);
 399              		.loc 1 239 0
 400 0102 184D     		ldr	r5, .L19+20
 401 0104 1A4E     		ldr	r6, .L19+32
 402 0106 281C     		mov	r0, r5
 403 0108 3168     		ldr	r1, [r6]
 404 010a 7268     		ldr	r2, [r6, #4]
 405 010c 0123     		mov	r3, #1
 406 010e FFF7FEFF 		bl	ssd1306_WriteString
 407              	.LVL51:
 240:Src/main.c    ****   		    ssd1306_UpdateScreen();                                                                    
 408              		.loc 1 240 0
 409 0112 281C     		mov	r0, r5
 410 0114 3168     		ldr	r1, [r6]
 411 0116 7268     		ldr	r2, [r6, #4]
 412 0118 0123     		mov	r3, #1
 413 011a FFF7FEFF 		bl	ssd1306_WriteString
 414              	.LVL52:
 241:Src/main.c    **** 			//*/
 415              		.loc 1 241 0
 416 011e FFF7FEFF 		bl	ssd1306_UpdateScreen
 417              	.LVL53:
 244:Src/main.c    **** 		    sprintf(message, "akkum %02d%%", (int)accu_percentage);                        
 418              		.loc 1 244 0
 419 0122 0020     		mov	r0, #0
 420 0124 0021     		mov	r1, #0
 421 0126 FFF7FEFF 		bl	ssd1306_SetCursor
 422              	.LVL54:
 245:Src/main.c    ****   		    ssd1306_WriteString(message, Font_11x18, White);                                 
 423              		.loc 1 245 0
 424 012a 0098     		ldr	r0, [sp]
 425 012c 0199     		ldr	r1, [sp, #4]
 426 012e FFF7FEFF 		bl	__aeabi_d2iz
 427              	.LVL55:
 428 0132 021C     		mov	r2, r0
 429 0134 281C     		mov	r0, r5
 430 0136 0F49     		ldr	r1, .L19+36
 431 0138 FFF7FEFF 		bl	sprintf
 432              	.LVL56:
 246:Src/main.c    ****   		    ssd1306_UpdateScreen();                                                                    
 433              		.loc 1 246 0
 434 013c 281C     		mov	r0, r5
 435 013e 3168     		ldr	r1, [r6]
ARM GAS  /tmp/cctu1RYe.s 			page 16


 436 0140 7268     		ldr	r2, [r6, #4]
 437 0142 0123     		mov	r3, #1
 438 0144 FFF7FEFF 		bl	ssd1306_WriteString
 439              	.LVL57:
 247:Src/main.c    **** 		}
 440              		.loc 1 247 0
 441 0148 FFF7FEFF 		bl	ssd1306_UpdateScreen
 442              	.LVL58:
 443 014c B2E7     		b	.L15
 444              	.L20:
 445 014e C046     		.align	2
 446              	.L19:
 447 0150 00300140 		.word	1073819648
 448 0154 00000000 		.word	hi2c1
 449 0158 00000000 		.word	Font_16x26
 450 015c 0C000000 		.word	.LC3
 451 0160 14000000 		.word	.LC6
 452 0164 00000000 		.word	.LANCHOR0
 453 0168 1C000000 		.word	.LC9
 454 016c 28000000 		.word	.LC11
 455 0170 00000000 		.word	Font_11x18
 456 0174 34000000 		.word	.LC14
 457              	.LBE2:
 458              		.cfi_endproc
 459              	.LFE37:
 461              		.comm	SSD1306_I2C_PORT,4,4
 462              		.section	.rodata.str1.4,"aMS",%progbits,1
 463              		.align	2
 464              	.LC0:
 465 0000 5372632F 		.ascii	"Src/main.c\000"
 465      6D61696E 
 465      2E6300
 466 000b 00       		.space	1
 467              	.LC3:
 468 000c 44697665 		.ascii	"DiveCmp\000"
 468      436D7000 
 469              	.LC6:
 470 0014 53746172 		.ascii	"Start..\000"
 470      742E2E00 
 471              	.LC9:
 472 001c 50253035 		.ascii	"P%05d:T%03d\000"
 472      643A5425 
 472      30336400 
 473              	.LC11:
 474 0028 50253035 		.ascii	"P%05d T%03d\000"
 474      64205425 
 474      30336400 
 475              	.LC14:
 476 0034 616B6B75 		.ascii	"akkum %02d%%\000"
 476      6D202530 
 476      32642525 
 476      00
 477              		.section	.bss.message,"aw",%nobits
 478              		.align	2
 479              		.set	.LANCHOR0,. + 0
 482              	message:
 483 0000 00000000 		.space	256
ARM GAS  /tmp/cctu1RYe.s 			page 17


 483      00000000 
 483      00000000 
 483      00000000 
 483      00000000 
 484              		.text
 485              	.Letext0:
 486              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 487              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 488              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
 489              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 490              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 491              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 492              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 493              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h"
 494              		.file 10 "Inc/fonts.h"
 495              		.file 11 "Inc/ssd1306.h"
 496              		.file 12 "Inc/pressure_sensor_object.h"
 497              		.file 13 "Inc/voltmeter_object.h"
 498              		.file 14 "Inc/dive_meter_object.h"
 499              		.file 15 "Inc/i2c.h"
 500              		.file 16 "Inc/one_second_timer_interface.h"
 501              		.file 17 "/usr/include/newlib/stdio.h"
 502              		.file 18 "Inc/gpio.h"
 503              		.file 19 "Inc/adc.h"
 504              		.file 20 "Inc/spi.h"
 505              		.file 21 "Inc/usart.h"
 506              		.file 22 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 507              		.file 23 "Inc/depth_switch_interface.h"
ARM GAS  /tmp/cctu1RYe.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cctu1RYe.s:18     .text.primitive_delay:0000000000000000 $t
     /tmp/cctu1RYe.s:23     .text.primitive_delay:0000000000000000 primitive_delay
     /tmp/cctu1RYe.s:54     .text.primitive_delay:000000000000001c $d
     /tmp/cctu1RYe.s:59     .text._Error_Handler:0000000000000000 $t
     /tmp/cctu1RYe.s:64     .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cctu1RYe.s:76     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cctu1RYe.s:81     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cctu1RYe.s:193    .text.SystemClock_Config:0000000000000090 $d
     /tmp/cctu1RYe.s:201    .text.main:0000000000000000 $t
     /tmp/cctu1RYe.s:206    .text.main:0000000000000000 main
     /tmp/cctu1RYe.s:447    .text.main:0000000000000150 $d
                            *COM*:0000000000000004 SSD1306_I2C_PORT
     /tmp/cctu1RYe.s:463    .rodata.str1.4:0000000000000000 $d
     /tmp/cctu1RYe.s:478    .bss.message:0000000000000000 $d
     /tmp/cctu1RYe.s:482    .bss.message:0000000000000000 message
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_d2iz
HAL_Init
MX_GPIO_Init
MX_ADC_Init
MX_I2C1_Init
MX_I2C2_Init
MX_I2C3_Init
MX_SPI1_Init
MX_USART1_UART_Init
ssd1306_set_i2c_port
ssd1306_Init
HAL_Delay
ssd1306_Fill
ssd1306_UpdateScreen
ssd1306_SetCursor
ssd1306_WriteString
one_second_timer_init
one_second_timer_start
pressure_sensor_object_init
depth_switch_turn_signal_led
one_second_timer_get_flag
one_second_timer_reset_flag
pressure_sensor_measure_pressure_temperature
voltmeter_measure_voltage
voltmeter_get_percentage
sprintf
hi2c1
Font_16x26
Font_11x18
