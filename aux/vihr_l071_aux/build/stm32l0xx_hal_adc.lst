ARM GAS  /tmp/ccK9yGTA.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32l0xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_uidiv
  18              		.section	.text.ADC_DelayMicroSecond,"ax",%progbits
  19              		.align	2
  20              		.code	16
  21              		.thumb_func
  23              	ADC_DelayMicroSecond:
  24              	.LFB64:
  25              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @file    stm32l0xx_hal_adc.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          "stm32l0xx_hal_adc_ex.c".
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   [..]
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 2


  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC calibration
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      ##### How to use this driver #####
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ==============================================================================
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Enable the ADC interface
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              Caution: On STM32L0, ADC clock frequency max is 16MHz (refer
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       to device datasheet).
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       Therefore, ADC clock prescaler must be configured in 
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       function of ADC clock source frequency to remain below
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       this maximum frequency.
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    16MHz.
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSIState" must be set either:
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    - to "...HSIState = RCC_HSI_ON" to maintain the HSI16 oscillator
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                 (mandatory)
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                HSI enable                                         (optional: if asynchronous clock 
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI16CalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccK9yGTA.s 			page 3


  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ADCx_IRQHandler().
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ================================================================
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_Init().
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         monitored, thresholds, ...)
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init().
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         In case of internal temperature sensor to be measured:
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ====================================
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         conversion accuracy
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
ARM GAS  /tmp/ccK9yGTA.s 			page 4


 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (this function must be implemented in user program)
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 destination variable address.
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      ============================================================
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      [..]
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Disable the ADC interface
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         (++) ADC clock disable
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              (+++) Example:
 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                    other device clock parameters configuration:
ARM GAS  /tmp/ccK9yGTA.s 			page 5


 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) ADC pins configuration
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Deinitialize the DMA
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_DMA_Init().
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     @endverbatim
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @attention
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *      without specific prior written permission.
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ******************************************************************************  
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #include "stm32l0xx_hal.h"
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @addtogroup STM32L0xx_HAL_Driver
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
ARM GAS  /tmp/ccK9yGTA.s 			page 6


 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC ADC
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief ADC HAL module driver
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for ADC stabilization time.                                          */
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 1us (refer to device datasheet, parameter tSTART). */
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_STAB_DELAY_US       ((uint32_t) 1U)
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Delay for temperature sensor stabilization time. */
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Maximum delay is 10us (refer to device datasheet, parameter tSTART). */
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Unit: us */
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #define ADC_TEMPSENSOR_DELAY_US ((uint32_t) 10U) 
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond);
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim    
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
ARM GAS  /tmp/ccK9yGTA.s 			page 7


 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) De-initialize the ADC.
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to  
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         depending on possible clock sources: APB clock of HSI clock.
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   When device is in mode low-power (low-power run, low-power sleep or stop mode), 
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINT()" must be called before function HAL_ADC_Init() 
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (in case of previous ADC operations: function HAL_ADC_DeInit() must be called first).
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In case of internal temperature sensor to be measured:
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
ARM GAS  /tmp/ccK9yGTA.s 			page 8


 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Initialize ADC error code */
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Init the low level hardware */
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */
 406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on the fly).                                                             */
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL);
 423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                            */
 425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated only when ADC is disabled:              */
 426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock mode                                                      */
 427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC clock prescaler                                                 */
 428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - ADC Resolution                                                      */
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Some parameters of this register are not reset, since they are set   */
 432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by other functions and must be kept in case of usage of this         */
ARM GAS  /tmp/ccK9yGTA.s 			page 9


 433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* without needing to reconfigure all other ADC groups/channels         */
 435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* parameters):                                                         */
 436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*     (set into HAL_ADC_ConfigChannel() )                              */
 438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC clock: clock source PCLK or asynchronous with 
 440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     selectable prescaler */
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLOCK_PRESCALER(hadc);
 442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of ADC:                                                */
 444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Resolution                                                        */
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the Low Frequency mode */
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable voltage regulator (if disabled at this step) */
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADVREGEN bit */
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR |= ADC_CR_ADVREGEN;
 458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC:                                                    */
 461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Resolution                                                            */
 462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Data alignment                                                        */
 463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Scan direction                                                        */
 464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger to start conversion                                  */
 465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - External trigger polarity                                             */
 466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Continuous conversion mode                                            */
 467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - DMA continuous request                                                */
 468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Overrun                                                               */
 469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - AutoDelay feature                                                     */
 470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Discontinuous mode                                                    */
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTSEL  |
 474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_EXTEN   |
 475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_CONT    |
 476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DMACFG  |
 477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_OVRMOD  |
 478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTDLY  |
 479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  |
 480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_DISCEN   );
 481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 10


 490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
 491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* start.                                                                 */
 492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
 493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       software start.                                                  */
 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Enable discontinuous mode only if continuous mode is disabled */
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.DiscontinuousConvMode == ENABLE)
 503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.ContinuousConvMode == DISABLE)
 505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the selected ADC group regular discontinuous mode */
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADC regular group discontinuous was intended to be enabled,        */
 512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* but ADC regular group modes continuous and sequencer discontinuous */
 513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* cannot be enabled simultaneously.                                  */
 514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of Oversampler:                                          */
 530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Oversampling Ratio                                                  */
 531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Right bit shift                                                     */
 532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Triggered mode                                                      */
 533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_TOVS );
 537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable OverSampling mode */
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccK9yGTA.s 			page 11


 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable OverSampling mode if needed */
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }    
 553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear the old sampling time */
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the new sample time */
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear ADC error code */
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set the ADC state */
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_STATE_CLR_SET(hadc->State,
 565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_READY);
 567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         common group is still running.
 582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check ADC handle */
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(hadc == NULL)
 591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 12


 604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Change ADC state */
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* correctly completed.                                                     */
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register IER */
 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register ISR */
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CR */
 636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable voltage regulator */
 637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Regulator disable useful for power saving */
 638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset ADVREGEN bit */
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable 
 642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* No action */
 643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR1 */
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
 648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
 649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CFGR2 */
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register SMPR */
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register TR */
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
ARM GAS  /tmp/ccK9yGTA.s 			page 13


 661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register DR */
 670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset register CALFACT */
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*                                                                        */
 681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* DeInit the low level hardware */
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC error code to none */
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
ARM GAS  /tmp/ccK9yGTA.s 			page 14


 718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
 720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
 725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */ 
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
 733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
 736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
 737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
 738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
 739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                       ##### IO operation functions #####
 741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
 742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group.
 744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Poll for conversion event.
 747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
 754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
 755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
 759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
 760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
ARM GAS  /tmp/ccK9yGTA.s 			page 15


 775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
 788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
 815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
 828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccK9yGTA.s 			page 16


 832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
 840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
 852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
 859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
 863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
 882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
 883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
 885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC   = 0x00;
 887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccK9yGTA.s 			page 17


 889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
 892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
 897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* each conversion:                                                       */
 901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
 908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
 911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
 914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
 916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
 922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
 936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
 939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update ADC state machine */
 944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 18


 946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC state */
 965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       else
 970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Change ADC state to error state */
 972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
 990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
 991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
 994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Poll for ADC event.
 995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
 996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  EventType: the ADC event type.
 997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          This parameter can be one of the following values:
 998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
 999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set  
ARM GAS  /tmp/ccK9yGTA.s 			page 19


1003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten 
1004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR); 
1007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
1012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Get tick count */
1018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tickstart = HAL_GetTick();
1019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check selected event flag */
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((Timeout == 0U) ||((HAL_GetTick() - tickstart ) > Timeout))
1027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Process unlocked */
1032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_TIMEOUT;
1035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   switch(EventType)
1040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Overrun event */
1051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* considered as an error.                                                */
1054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
ARM GAS  /tmp/ccK9yGTA.s 			page 20


1060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
1068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence), 
1078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         OVR overrun.
1079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure 
1082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() doesn't enable the End Of Sampling 
1084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         mode), the user must:
1086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP) 
1088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
ARM GAS  /tmp/ccK9yGTA.s 			page 21


1117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         default:
1146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
1148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccK9yGTA.s 			page 22


1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete. 
1217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  pData: Destination Buffer address.
1220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  Length: Length of data to be transferred from ADC peripheral to memory (in bytes)
1221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
ARM GAS  /tmp/ccK9yGTA.s 			page 23


1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process locked */
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state                                                        */
1248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Process unlocked */
1258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set the DMA error callback */
1269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* operations)                                                          */
1278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Start the DMA channel */
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
ARM GAS  /tmp/ccK9yGTA.s 			page 24


1288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* trigger event.                                                       */
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC peripheral.
1309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
ARM GAS  /tmp/ccK9yGTA.s 			page 25


1345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_Disable(hadc);
1356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            to flag EOC.
1385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         To clear this flag, either use function:
1389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
ARM GAS  /tmp/ccK9yGTA.s 			page 26


1402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC converted value */ 
1404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->Instance->DR;
1405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1406:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1407:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1410:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1411:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1414:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1417:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1418:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1419:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1422:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1423:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1425:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1426:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC state */
1427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1428:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1430:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1431:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1433:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1434:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1435:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1437:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1438:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1439:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1442:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1443:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1444:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1447:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1448:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
1449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1452:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1453:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
1454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
1455:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
1458:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
ARM GAS  /tmp/ccK9yGTA.s 			page 27


1459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1460:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
1461:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1462:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1463:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1464:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
1465:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1466:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1467:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1469:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1470:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1472:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1473:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1474:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1475:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Note: Management of low power auto-wait enabled: flags must be cleared */
1476:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       by user when fetching ADC conversion data.                       */
1477:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       This case is managed in IRQ handler, but this low-power mode     */
1478:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       should not be used with programming model IT or DMA.             */
1479:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*       Refer to comment of parameter "LowPowerAutoWait".                */
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoWait != ENABLE)
1481:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check analog watchdog 1 flag ========== */
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1489:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
1490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1491:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1492:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Level out of window 1 callback */
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1494:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1498:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1499:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1500:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1501:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1503:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1505:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1506:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* overrun ")                                                             */
1508:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1509:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* error.                                                                 */
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1512:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1513:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1515:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /tmp/ccK9yGTA.s 			page 28


1516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1518:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Error callback */ 
1520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1521:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1522:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear the Overrun flag */
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1525:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1526:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1528:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1529:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1530:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
1531:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1532:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1533:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1536:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1537:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1540:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1541:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    */
1542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1544:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1545:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
1546:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1548:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1549:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1551:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1552:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1553:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1554:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1556:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1559:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1560:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
1561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1562:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1563:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1566:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1567:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1568:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1569:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
ARM GAS  /tmp/ccK9yGTA.s 			page 29


1573:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1574:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1575:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
1576:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
1577:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1578:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1579:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1580:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1581:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1582:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1583:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1584:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
1585:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1588:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1589:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   UNUSED(hadc);
1590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1591:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1593:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1595:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1596:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1597:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1598:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1600:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1601:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1603:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim   
1604:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1606:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================  
1607:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure channels on regular group
1609:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Configure the analog watchdog
1610:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1612:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1613:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1615:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1616:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
1617:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1618:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         VrefInt/Vlcd(STM32L0x3xx only)/TempSensor.
1619:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1620:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         setting).
1622:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1623:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         TS_vlcd (STM32L0x3xx only), TS_temp (values rough order: 5us to 17us).
1624:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1625:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1627:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
1628:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
1629:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
ARM GAS  /tmp/ccK9yGTA.s 			page 30


1630:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         without resetting the ADC.
1631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
1632:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
1633:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1634:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
1635:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1636:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1637:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1640:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1641:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1642:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1643:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1644:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1646:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1647:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1648:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1649:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1650:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Channel number                                                        */
1651:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
1652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
1653:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1654:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1656:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
1659:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (sConfig->Rank != ADC_RANK_NONE)
1662:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable selected channels */
1664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
1665:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1666:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: Vlcd (STM32L0x3xx only)/VrefInt/TempSensor */
1667:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths enable: If internal channel selected, enable  */
1668:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* dedicated internal buffers and path.                                     */
1669:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1670:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Temperature sensor channel is selected, then enable the internal      */
1671:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* buffers and path  */
1672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_TSEN;   
1675:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1676:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
1678:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1679:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1680:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1682:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VREFEN;   
1684:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1686:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
ARM GAS  /tmp/ccK9yGTA.s 			page 31


1687:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1689:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1690:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR |= ADC_CCR_VLCDEN;   
1691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1692:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1693:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1694:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1696:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Regular sequence configuration */
1697:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Reset the channel selection register from the selected channel */
1698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
1699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1700:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1701:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* internal measurement paths disable: If internal channel selected,    */
1702:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* disable dedicated internal buffers and path.                         */
1703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSO
1704:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_TSEN;   
1706:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1708:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If VRefInt channel is selected, then enable the internal buffers and path   */
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC
1710:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VREFEN;   
1712:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1713:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx
1715:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* If Vlcd channel is selected, then enable the internal buffers and path   */
1716:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANN
1717:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1718:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       ADC->CCR &= ~ADC_CCR_VLCDEN;   
1719:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1720:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** #endif
1721:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1723:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1725:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1726:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1730:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1731:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
1732:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1733:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive  
1734:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1735:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting 
1736:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the ADC.
1737:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1738:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1739:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1740:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1741:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         is on going.
1742:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1743:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
ARM GAS  /tmp/ccK9yGTA.s 			page 32


1744:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1745:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1746:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1747:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1748:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1749:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1750:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status
1751:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1752:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1755:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1756:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1757:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1758:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1759:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1760:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1761:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1762:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1763:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1766:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1767:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1768:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1769:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1770:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1772:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1773:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process locked */
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1775:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1776:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1777:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1778:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1780:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1782:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1783:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1786:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1788:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1789:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1791:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1793:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1794:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                        */
1796:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the analog watchdog mode                                          */
1797:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog              */
1798:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR1_AWD1SGL=0)                             */
1799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
ARM GAS  /tmp/ccK9yGTA.s 			page 33


1801:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDCH);
1802:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode |
1804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
1805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1806:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1807:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds  */
1808:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0     */
1809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1812:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Clear High & Low high thresholds */
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR &= (uint32_t) ~ (ADC_TR_HT | ADC_TR_LT);
1814:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1815:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the high threshold */
1816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted);
1817:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->TR |= tmpAWDLowThresholdShifted;
1819:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1822:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
1823:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1824:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Update ADC state machine to error */
1825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1826:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1828:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1829:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Process unlocked */
1831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1832:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1833:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return function status */
1834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return tmp_hal_status;
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1836:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1838:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1839:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1841:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1842:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *  @brief    ADC Peripheral State functions
1844:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  *
1845:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @verbatim
1846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1847:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
1848:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  ===============================================================================
1849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     [..]
1850:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1851:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     peripheral.
1852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC state
1853:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (+) Check the ADC error code
1854:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1855:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** @endverbatim
1856:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1857:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
ARM GAS  /tmp/ccK9yGTA.s 			page 34


1858:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1860:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC handle state.
1861:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
1862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         compared with states bits.
1863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         For example:                                                         
1864:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1865:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1866:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1867:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
1868:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1869:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1871:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1872:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1873:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1874:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return ADC handle state */
1875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->State;
1876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1877:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1878:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1879:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Return the ADC error code.
1880:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1881:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
1882:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1883:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1885:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
1886:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1887:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return hadc->ErrorCode;
1889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1890:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1891:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1893:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1895:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1896:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @}
1897:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1898:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1899:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1900:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @{
1901:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1902:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1903:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1904:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1906:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1907:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         performed automatically by hardware.
1909:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1910:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1912:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
1914:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
ARM GAS  /tmp/ccK9yGTA.s 			page 35


1915:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1916:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1918:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1919:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1920:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1921:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1923:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1926:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1929:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1931:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1932:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1934:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
1936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1937:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1940:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1941:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Delay for ADC stabilization time. */
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
1943:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
1945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1946:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
1947:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1949:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1951:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
1952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1954:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1955:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1957:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
1959:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
1960:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1961:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
1962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
1963:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
1964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
1965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
1966:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
1967:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
1968:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1969:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1970:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped.
1971:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccK9yGTA.s 			page 36


1972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
1973:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
1974:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
1976:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1977:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
1978:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1979:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1980:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /*       disabled.                                                          */
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1982:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
1983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1985:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1988:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1989:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     else
1990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
1991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Update ADC state machine to error */
1992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1993:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1994:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1996:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       return HAL_ERROR;
1998:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
1999:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      
2000:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2001:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2003:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2005:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2007:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2008:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2011:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2013:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2015:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2016:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2017:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2019:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2022:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2023:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2025:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2027:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   *         stopped to disable the ADC.
2028:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccK9yGTA.s 			page 37


2029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval HAL status.
2030:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2031:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2033:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2035:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
2036:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2037:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2038:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* this function if not needed.                                             */
2040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
2041:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2042:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2043:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
2046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
2047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* Stop conversions on regular group */
2049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
2050:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2051:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2052:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2053:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Get tick count */
2054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2055:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
2057:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2060:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Update ADC state machine to error */
2061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
2063:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2065:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         return HAL_ERROR;
2067:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2068:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2069:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2070:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
2072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Return HAL status */
2073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   return HAL_OK;
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2075:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2076:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2077:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2078:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2079:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2080:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2081:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2082:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2084:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
ARM GAS  /tmp/ccK9yGTA.s 			page 38


2086:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2087:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
2089:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2090:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set ADC state */
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2092:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
2093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
2096:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2097:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
2098:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
2100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
2101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
2104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC state */
2112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         else
2117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
2118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Change ADC state to error state */
2119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
2121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
2124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
2125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
2126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Conversion complete callback */
2128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   else
2131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Call DMA error callback */
2133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccK9yGTA.s 			page 39


2143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Half conversion callback */
2148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
2149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  DMA error callback.
2153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
2158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC state */
2162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
2166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
2167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Error callback */
2168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
2169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
2170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** /**
2172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @brief  Delay micro seconds 
2173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @param  microSecond : delay
2174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   * @retval None
2175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   */
2176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** static void ADC_DelayMicroSecond(uint32_t microSecond)
2177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** {
  26              		.loc 1 2177 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 10B5     		push	{r4, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 041C     		mov	r4, r0
2178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Compute number of CPU cycles to wait for */
2179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
  38              		.loc 1 2179 0
  39 0006 084B     		ldr	r3, .L4
  40 0008 1868     		ldr	r0, [r3]
  41              	.LVL1:
  42 000a 0849     		ldr	r1, .L4+4
  43 000c FFF7FEFF 		bl	__aeabi_uidiv
  44              	.LVL2:
  45 0010 4443     		mul	r4, r0
ARM GAS  /tmp/ccK9yGTA.s 			page 40


  46              	.LVL3:
  47 0012 0194     		str	r4, [sp, #4]
2180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
2181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   while(waitLoopIndex != 0U)
  48              		.loc 1 2181 0
  49 0014 02E0     		b	.L2
  50              	.L3:
2182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
2183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     waitLoopIndex--;
  51              		.loc 1 2183 0
  52 0016 019B     		ldr	r3, [sp, #4]
  53 0018 013B     		sub	r3, r3, #1
  54 001a 0193     		str	r3, [sp, #4]
  55              	.L2:
2181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  56              		.loc 1 2181 0
  57 001c 019B     		ldr	r3, [sp, #4]
  58 001e 002B     		cmp	r3, #0
  59 0020 F9D1     		bne	.L3
2184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   } 
2185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
  60              		.loc 1 2185 0
  61 0022 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0024 10BD     		pop	{r4, pc}
  64              	.L5:
  65 0026 C046     		.align	2
  66              	.L4:
  67 0028 00000000 		.word	SystemCoreClock
  68 002c 40420F00 		.word	1000000
  69              		.cfi_endproc
  70              	.LFE64:
  72              		.section	.text.ADC_ConversionStop,"ax",%progbits
  73              		.align	2
  74              		.code	16
  75              		.thumb_func
  77              	ADC_ConversionStop:
  78              	.LFB60:
2032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
  79              		.loc 1 2032 0
  80              		.cfi_startproc
  81              	.LVL4:
  82 0000 38B5     		push	{r3, r4, r5, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 3, -16
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 5, -8
  88              		.cfi_offset 14, -4
  89              	.LVL5:
2040:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
  90              		.loc 1 2040 0
  91 0002 0368     		ldr	r3, [r0]
  92 0004 9A68     		ldr	r2, [r3, #8]
  93 0006 5207     		lsl	r2, r2, #29
  94 0008 23D5     		bpl	.L11
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
ARM GAS  /tmp/ccK9yGTA.s 			page 41


  95              		.loc 1 2045 0
  96 000a 9A68     		ldr	r2, [r3, #8]
  97 000c 5207     		lsl	r2, r2, #29
  98 000e 06D5     		bpl	.L8
2046:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
  99              		.loc 1 2046 0 discriminator 1
 100 0010 9A68     		ldr	r2, [r3, #8]
2045:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 101              		.loc 1 2045 0 discriminator 1
 102 0012 9207     		lsl	r2, r2, #30
 103 0014 03D4     		bmi	.L8
2049:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 104              		.loc 1 2049 0
 105 0016 9968     		ldr	r1, [r3, #8]
 106 0018 1022     		mov	r2, #16
 107 001a 0A43     		orr	r2, r1
 108 001c 9A60     		str	r2, [r3, #8]
 109              	.L8:
 110 001e 041C     		mov	r4, r0
2054:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 111              		.loc 1 2054 0
 112 0020 FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL6:
 114 0024 051C     		mov	r5, r0
 115              	.LVL7:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 116              		.loc 1 2056 0
 117 0026 0EE0     		b	.L9
 118              	.LVL8:
 119              	.L10:
2058:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 120              		.loc 1 2058 0
 121 0028 FFF7FEFF 		bl	HAL_GetTick
 122              	.LVL9:
 123 002c 401B     		sub	r0, r0, r5
 124 002e 0A28     		cmp	r0, #10
 125 0030 09D9     		bls	.L9
2061:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 126              		.loc 1 2061 0
 127 0032 A26D     		ldr	r2, [r4, #88]
 128 0034 1023     		mov	r3, #16
 129 0036 1343     		orr	r3, r2
 130 0038 A365     		str	r3, [r4, #88]
2064:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 131              		.loc 1 2064 0
 132 003a E26D     		ldr	r2, [r4, #92]
 133 003c 0123     		mov	r3, #1
 134 003e 1343     		orr	r3, r2
 135 0040 E365     		str	r3, [r4, #92]
2066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 136              		.loc 1 2066 0
 137 0042 0120     		mov	r0, #1
 138 0044 06E0     		b	.L7
 139              	.L9:
2056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 140              		.loc 1 2056 0
 141 0046 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccK9yGTA.s 			page 42


 142 0048 9B68     		ldr	r3, [r3, #8]
 143 004a 5B07     		lsl	r3, r3, #29
 144 004c ECD4     		bmi	.L10
2073:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 145              		.loc 1 2073 0
 146 004e 0020     		mov	r0, #0
 147 0050 00E0     		b	.L7
 148              	.LVL10:
 149              	.L11:
 150 0052 0020     		mov	r0, #0
 151              	.LVL11:
 152              	.L7:
2074:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 153              		.loc 1 2074 0
 154              		@ sp needed
 155 0054 38BD     		pop	{r3, r4, r5, pc}
 156              		.cfi_endproc
 157              	.LFE60:
 159 0056 C046     		.section	.text.ADC_Disable,"ax",%progbits
 160              		.align	2
 161              		.code	16
 162              		.thumb_func
 164              	ADC_Disable:
 165              	.LFB59:
1975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 166              		.loc 1 1975 0
 167              		.cfi_startproc
 168              	.LVL12:
 169 0000 38B5     		push	{r3, r4, r5, lr}
 170              	.LCFI3:
 171              		.cfi_def_cfa_offset 16
 172              		.cfi_offset 3, -16
 173              		.cfi_offset 4, -12
 174              		.cfi_offset 5, -8
 175              		.cfi_offset 14, -4
 176              	.LVL13:
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 177              		.loc 1 1981 0
 178 0002 0268     		ldr	r2, [r0]
 179 0004 9368     		ldr	r3, [r2, #8]
 180 0006 0321     		mov	r1, #3
 181 0008 0B40     		and	r3, r1
 182 000a 012B     		cmp	r3, #1
 183 000c 04D1     		bne	.L18
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 184              		.loc 1 1981 0 is_stmt 0 discriminator 1
 185 000e 1368     		ldr	r3, [r2]
 186 0010 DB07     		lsl	r3, r3, #31
 187 0012 03D4     		bmi	.L19
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 188              		.loc 1 1981 0
 189 0014 0023     		mov	r3, #0
 190 0016 02E0     		b	.L13
 191              	.L18:
 192 0018 0023     		mov	r3, #0
 193 001a 00E0     		b	.L13
 194              	.L19:
ARM GAS  /tmp/ccK9yGTA.s 			page 43


 195 001c 0123     		mov	r3, #1
 196              	.L13:
1981:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 197              		.loc 1 1981 0 discriminator 6
 198 001e 002B     		cmp	r3, #0
 199 0020 2FD0     		beq	.L20
1984:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 200              		.loc 1 1984 0 is_stmt 1
 201 0022 9368     		ldr	r3, [r2, #8]
 202 0024 0521     		mov	r1, #5
 203 0026 0B40     		and	r3, r1
 204 0028 012B     		cmp	r3, #1
 205 002a 0BD1     		bne	.L15
 206 002c 041C     		mov	r4, r0
1987:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 207              		.loc 1 1987 0
 208 002e 9168     		ldr	r1, [r2, #8]
 209 0030 0133     		add	r3, r3, #1
 210 0032 0B43     		orr	r3, r1
 211 0034 9360     		str	r3, [r2, #8]
 212 0036 0368     		ldr	r3, [r0]
 213 0038 0322     		mov	r2, #3
 214 003a 1A60     		str	r2, [r3]
2002:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 215              		.loc 1 2002 0
 216 003c FFF7FEFF 		bl	HAL_GetTick
 217              	.LVL14:
 218 0040 051C     		mov	r5, r0
 219              	.LVL15:
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 220              		.loc 1 2004 0
 221 0042 18E0     		b	.L16
 222              	.LVL16:
 223              	.L15:
1992:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 224              		.loc 1 1992 0
 225 0044 826D     		ldr	r2, [r0, #88]
 226 0046 1023     		mov	r3, #16
 227 0048 1343     		orr	r3, r2
 228 004a 8365     		str	r3, [r0, #88]
1995:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 229              		.loc 1 1995 0
 230 004c C26D     		ldr	r2, [r0, #92]
 231 004e 0123     		mov	r3, #1
 232 0050 1343     		orr	r3, r2
 233 0052 C365     		str	r3, [r0, #92]
1997:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 234              		.loc 1 1997 0
 235 0054 0120     		mov	r0, #1
 236              	.LVL17:
 237 0056 15E0     		b	.L14
 238              	.LVL18:
 239              	.L17:
2006:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 240              		.loc 1 2006 0
 241 0058 FFF7FEFF 		bl	HAL_GetTick
 242              	.LVL19:
ARM GAS  /tmp/ccK9yGTA.s 			page 44


 243 005c 401B     		sub	r0, r0, r5
 244 005e 0A28     		cmp	r0, #10
 245 0060 09D9     		bls	.L16
2009:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 246              		.loc 1 2009 0
 247 0062 A26D     		ldr	r2, [r4, #88]
 248 0064 1023     		mov	r3, #16
 249 0066 1343     		orr	r3, r2
 250 0068 A365     		str	r3, [r4, #88]
2012:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 251              		.loc 1 2012 0
 252 006a E26D     		ldr	r2, [r4, #92]
 253 006c 0123     		mov	r3, #1
 254 006e 1343     		orr	r3, r2
 255 0070 E365     		str	r3, [r4, #92]
2014:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 256              		.loc 1 2014 0
 257 0072 0120     		mov	r0, #1
 258 0074 06E0     		b	.L14
 259              	.L16:
2004:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 260              		.loc 1 2004 0
 261 0076 2368     		ldr	r3, [r4]
 262 0078 9B68     		ldr	r3, [r3, #8]
 263 007a DB07     		lsl	r3, r3, #31
 264 007c ECD4     		bmi	.L17
2020:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 265              		.loc 1 2020 0
 266 007e 0020     		mov	r0, #0
 267 0080 00E0     		b	.L14
 268              	.LVL20:
 269              	.L20:
 270 0082 0020     		mov	r0, #0
 271              	.LVL21:
 272              	.L14:
2021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 273              		.loc 1 2021 0
 274              		@ sp needed
 275 0084 38BD     		pop	{r3, r4, r5, pc}
 276              		.cfi_endproc
 277              	.LFE59:
 279 0086 C046     		.section	.text.ADC_Enable,"ax",%progbits
 280              		.align	2
 281              		.code	16
 282              		.thumb_func
 284              	ADC_Enable:
 285              	.LFB58:
1917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 286              		.loc 1 1917 0
 287              		.cfi_startproc
 288              	.LVL22:
 289 0000 38B5     		push	{r3, r4, r5, lr}
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 3, -16
 293              		.cfi_offset 4, -12
 294              		.cfi_offset 5, -8
ARM GAS  /tmp/ccK9yGTA.s 			page 45


 295              		.cfi_offset 14, -4
 296              	.LVL23:
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 297              		.loc 1 1924 0
 298 0002 0268     		ldr	r2, [r0]
 299 0004 9368     		ldr	r3, [r2, #8]
 300 0006 0321     		mov	r1, #3
 301 0008 0B40     		and	r3, r1
 302 000a 012B     		cmp	r3, #1
 303 000c 04D1     		bne	.L27
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 304              		.loc 1 1924 0 is_stmt 0 discriminator 1
 305 000e 1368     		ldr	r3, [r2]
 306 0010 DB07     		lsl	r3, r3, #31
 307 0012 03D4     		bmi	.L28
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 308              		.loc 1 1924 0
 309 0014 0023     		mov	r3, #0
 310 0016 02E0     		b	.L22
 311              	.L27:
 312 0018 0023     		mov	r3, #0
 313 001a 00E0     		b	.L22
 314              	.L28:
 315 001c 0123     		mov	r3, #1
 316              	.L22:
1924:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 317              		.loc 1 1924 0 discriminator 6
 318 001e 002B     		cmp	r3, #0
 319 0020 2ED1     		bne	.L29
1927:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 320              		.loc 1 1927 0 is_stmt 1
 321 0022 9168     		ldr	r1, [r2, #8]
 322 0024 174B     		ldr	r3, .L30
 323 0026 1942     		tst	r1, r3
 324 0028 09D0     		beq	.L24
1930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 325              		.loc 1 1930 0
 326 002a 826D     		ldr	r2, [r0, #88]
 327 002c 1023     		mov	r3, #16
 328 002e 1343     		orr	r3, r2
 329 0030 8365     		str	r3, [r0, #88]
1933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 330              		.loc 1 1933 0
 331 0032 C26D     		ldr	r2, [r0, #92]
 332 0034 0123     		mov	r3, #1
 333 0036 1343     		orr	r3, r2
 334 0038 C365     		str	r3, [r0, #92]
1935:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 335              		.loc 1 1935 0
 336 003a 0120     		mov	r0, #1
 337              	.LVL24:
 338 003c 21E0     		b	.L23
 339              	.LVL25:
 340              	.L24:
 341 003e 041C     		mov	r4, r0
1939:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 342              		.loc 1 1939 0
ARM GAS  /tmp/ccK9yGTA.s 			page 46


 343 0040 9168     		ldr	r1, [r2, #8]
 344 0042 0123     		mov	r3, #1
 345 0044 0B43     		orr	r3, r1
 346 0046 9360     		str	r3, [r2, #8]
1942:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 347              		.loc 1 1942 0
 348 0048 0120     		mov	r0, #1
 349              	.LVL26:
 350 004a FFF7FEFF 		bl	ADC_DelayMicroSecond
 351              	.LVL27:
1945:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 352              		.loc 1 1945 0
 353 004e FFF7FEFF 		bl	HAL_GetTick
 354              	.LVL28:
 355 0052 051C     		mov	r5, r0
 356              	.LVL29:
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 357              		.loc 1 1948 0
 358 0054 0EE0     		b	.L25
 359              	.LVL30:
 360              	.L26:
1950:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 361              		.loc 1 1950 0
 362 0056 FFF7FEFF 		bl	HAL_GetTick
 363              	.LVL31:
 364 005a 401B     		sub	r0, r0, r5
 365 005c 0A28     		cmp	r0, #10
 366 005e 09D9     		bls	.L25
1953:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 367              		.loc 1 1953 0
 368 0060 A26D     		ldr	r2, [r4, #88]
 369 0062 1023     		mov	r3, #16
 370 0064 1343     		orr	r3, r2
 371 0066 A365     		str	r3, [r4, #88]
1956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 372              		.loc 1 1956 0
 373 0068 E26D     		ldr	r2, [r4, #92]
 374 006a 0123     		mov	r3, #1
 375 006c 1343     		orr	r3, r2
 376 006e E365     		str	r3, [r4, #92]
1958:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 377              		.loc 1 1958 0
 378 0070 0120     		mov	r0, #1
 379 0072 06E0     		b	.L23
 380              	.L25:
1948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 381              		.loc 1 1948 0
 382 0074 2368     		ldr	r3, [r4]
 383 0076 1B68     		ldr	r3, [r3]
 384 0078 DB07     		lsl	r3, r3, #31
 385 007a ECD5     		bpl	.L26
1964:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 386              		.loc 1 1964 0
 387 007c 0020     		mov	r0, #0
 388 007e 00E0     		b	.L23
 389              	.LVL32:
 390              	.L29:
ARM GAS  /tmp/ccK9yGTA.s 			page 47


 391 0080 0020     		mov	r0, #0
 392              	.LVL33:
 393              	.L23:
1965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 394              		.loc 1 1965 0
 395              		@ sp needed
 396 0082 38BD     		pop	{r3, r4, r5, pc}
 397              	.L31:
 398              		.align	2
 399              	.L30:
 400 0084 17000080 		.word	-2147483625
 401              		.cfi_endproc
 402              	.LFE58:
 404              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 405              		.align	2
 406              		.weak	HAL_ADC_MspInit
 407              		.code	16
 408              		.thumb_func
 410              	HAL_ADC_MspInit:
 411              	.LFB38:
 707:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 412              		.loc 1 707 0
 413              		.cfi_startproc
 414              	.LVL34:
 714:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 415              		.loc 1 714 0
 416              		@ sp needed
 417 0000 7047     		bx	lr
 418              		.cfi_endproc
 419              	.LFE38:
 421 0002 C046     		.section	.text.HAL_ADC_Init,"ax",%progbits
 422              		.align	2
 423              		.global	HAL_ADC_Init
 424              		.code	16
 425              		.thumb_func
 427              	HAL_ADC_Init:
 428              	.LFB36:
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****  
 429              		.loc 1 356 0
 430              		.cfi_startproc
 431              	.LVL35:
 432 0000 38B5     		push	{r3, r4, r5, lr}
 433              	.LCFI5:
 434              		.cfi_def_cfa_offset 16
 435              		.cfi_offset 3, -16
 436              		.cfi_offset 4, -12
 437              		.cfi_offset 5, -8
 438              		.cfi_offset 14, -4
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 439              		.loc 1 359 0
 440 0002 0028     		cmp	r0, #0
 441 0004 00D1     		bne	.LCB422
 442 0006 DFE0     		b	.L50	@long jump
 443              	.LCB422:
 444 0008 041C     		mov	r4, r0
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 445              		.loc 1 391 0
ARM GAS  /tmp/ccK9yGTA.s 			page 48


 446 000a 836D     		ldr	r3, [r0, #88]
 447 000c 002B     		cmp	r3, #0
 448 000e 04D1     		bne	.L35
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 449              		.loc 1 394 0
 450 0010 C365     		str	r3, [r0, #92]
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 451              		.loc 1 397 0
 452 0012 5422     		mov	r2, #84
 453 0014 8354     		strb	r3, [r0, r2]
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 454              		.loc 1 400 0
 455 0016 FFF7FEFF 		bl	HAL_ADC_MspInit
 456              	.LVL36:
 457              	.L35:
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 458              		.loc 1 408 0
 459 001a A36D     		ldr	r3, [r4, #88]
 460 001c DB06     		lsl	r3, r3, #27
 461 001e 04D4     		bmi	.L36
 409:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 462              		.loc 1 409 0 discriminator 1
 463 0020 2268     		ldr	r2, [r4]
 464 0022 9368     		ldr	r3, [r2, #8]
 465 0024 0421     		mov	r1, #4
 466 0026 0B40     		and	r3, r1
 408:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 467              		.loc 1 408 0 discriminator 1
 468 0028 08D0     		beq	.L37
 469              	.L36:
 412:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 470              		.loc 1 412 0
 471 002a A26D     		ldr	r2, [r4, #88]
 472 002c 1023     		mov	r3, #16
 473 002e 1343     		orr	r3, r2
 474 0030 A365     		str	r3, [r4, #88]
 415:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 475              		.loc 1 415 0
 476 0032 0022     		mov	r2, #0
 477 0034 5423     		mov	r3, #84
 478 0036 E254     		strb	r2, [r4, r3]
 416:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 479              		.loc 1 416 0
 480 0038 0120     		mov	r0, #1
 481 003a C6E0     		b	.L34
 482              	.L37:
 420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_REG_BUSY,
 483              		.loc 1 420 0
 484 003c A06D     		ldr	r0, [r4, #88]
 485 003e 6349     		ldr	r1, .L53
 486 0040 0140     		and	r1, r0
 487 0042 0220     		mov	r0, #2
 488 0044 0143     		orr	r1, r0
 489 0046 A165     		str	r1, [r4, #88]
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 490              		.loc 1 429 0
 491 0048 9168     		ldr	r1, [r2, #8]
ARM GAS  /tmp/ccK9yGTA.s 			page 49


 492 004a 0130     		add	r0, r0, #1
 493 004c 0140     		and	r1, r0
 494 004e 0129     		cmp	r1, #1
 495 0050 04D1     		bne	.L51
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 496              		.loc 1 429 0 is_stmt 0 discriminator 1
 497 0052 1168     		ldr	r1, [r2]
 498 0054 C907     		lsl	r1, r1, #31
 499 0056 03D4     		bmi	.L52
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 500              		.loc 1 429 0
 501 0058 0021     		mov	r1, #0
 502 005a 02E0     		b	.L38
 503              	.L51:
 504 005c 0021     		mov	r1, #0
 505 005e 00E0     		b	.L38
 506              	.L52:
 507 0060 0121     		mov	r1, #1
 508              	.L38:
 429:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 509              		.loc 1 429 0 discriminator 6
 510 0062 0029     		cmp	r1, #0
 511 0064 2DD1     		bne	.L39
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 512              		.loc 1 441 0 is_stmt 1
 513 0066 6168     		ldr	r1, [r4, #4]
 514 0068 C020     		mov	r0, #192
 515 006a 0006     		lsl	r0, r0, #24
 516 006c 8142     		cmp	r1, r0
 517 006e 07D0     		beq	.L40
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 518              		.loc 1 441 0 is_stmt 0 discriminator 2
 519 0070 8020     		mov	r0, #128
 520 0072 C005     		lsl	r0, r0, #23
 521 0074 8142     		cmp	r1, r0
 522 0076 03D0     		beq	.L40
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 523              		.loc 1 441 0 discriminator 4
 524 0078 8020     		mov	r0, #128
 525 007a 0006     		lsl	r0, r0, #24
 526 007c 8142     		cmp	r1, r0
 527 007e 09D1     		bne	.L41
 528              	.L40:
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 529              		.loc 1 441 0 discriminator 5
 530 0080 1169     		ldr	r1, [r2, #16]
 531 0082 8900     		lsl	r1, r1, #2
 532 0084 8908     		lsr	r1, r1, #2
 533 0086 1161     		str	r1, [r2, #16]
 534 0088 2168     		ldr	r1, [r4]
 535 008a 0A69     		ldr	r2, [r1, #16]
 536 008c 6068     		ldr	r0, [r4, #4]
 537 008e 0243     		orr	r2, r0
 538 0090 0A61     		str	r2, [r1, #16]
 539 0092 0CE0     		b	.L42
 540              	.L41:
 441:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
ARM GAS  /tmp/ccK9yGTA.s 			page 50


 541              		.loc 1 441 0 discriminator 6
 542 0094 1169     		ldr	r1, [r2, #16]
 543 0096 8900     		lsl	r1, r1, #2
 544 0098 8908     		lsr	r1, r1, #2
 545 009a 1161     		str	r1, [r2, #16]
 546 009c 4C4A     		ldr	r2, .L53+4
 547 009e 1068     		ldr	r0, [r2]
 548 00a0 4C49     		ldr	r1, .L53+8
 549 00a2 0140     		and	r1, r0
 550 00a4 1160     		str	r1, [r2]
 551 00a6 1168     		ldr	r1, [r2]
 552 00a8 6068     		ldr	r0, [r4, #4]
 553 00aa 0143     		orr	r1, r0
 554 00ac 1160     		str	r1, [r2]
 555              	.L42:
 445:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 556              		.loc 1 445 0 is_stmt 1
 557 00ae 2168     		ldr	r1, [r4]
 558 00b0 CA68     		ldr	r2, [r1, #12]
 559 00b2 1820     		mov	r0, #24
 560 00b4 8243     		bic	r2, r0
 561 00b6 CA60     		str	r2, [r1, #12]
 446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 562              		.loc 1 446 0
 563 00b8 2168     		ldr	r1, [r4]
 564 00ba CA68     		ldr	r2, [r1, #12]
 565 00bc A068     		ldr	r0, [r4, #8]
 566 00be 0243     		orr	r2, r0
 567 00c0 CA60     		str	r2, [r1, #12]
 568              	.L39:
 450:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 569              		.loc 1 450 0
 570 00c2 4349     		ldr	r1, .L53+4
 571 00c4 0868     		ldr	r0, [r1]
 572 00c6 444A     		ldr	r2, .L53+12
 573 00c8 0240     		and	r2, r0
 574 00ca 0A60     		str	r2, [r1]
 451:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 575              		.loc 1 451 0
 576 00cc 0868     		ldr	r0, [r1]
 577 00ce A26B     		ldr	r2, [r4, #56]
 578 00d0 5206     		lsl	r2, r2, #25
 579 00d2 0243     		orr	r2, r0
 580 00d4 0A60     		str	r2, [r1]
 454:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 581              		.loc 1 454 0
 582 00d6 2268     		ldr	r2, [r4]
 583 00d8 9168     		ldr	r1, [r2, #8]
 584 00da C900     		lsl	r1, r1, #3
 585 00dc 04D4     		bmi	.L43
 457:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 586              		.loc 1 457 0
 587 00de 9168     		ldr	r1, [r2, #8]
 588 00e0 8020     		mov	r0, #128
 589 00e2 4005     		lsl	r0, r0, #21
 590 00e4 0143     		orr	r1, r0
 591 00e6 9160     		str	r1, [r2, #8]
ARM GAS  /tmp/ccK9yGTA.s 			page 51


 592              	.L43:
 471:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR |
 593              		.loc 1 471 0
 594 00e8 2168     		ldr	r1, [r4]
 595 00ea C868     		ldr	r0, [r1, #12]
 596 00ec 3B4A     		ldr	r2, .L53+16
 597 00ee 0240     		and	r2, r0
 598 00f0 CA60     		str	r2, [r1, #12]
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 599              		.loc 1 482 0
 600 00f2 2068     		ldr	r0, [r4]
 601 00f4 C568     		ldr	r5, [r0, #12]
 602 00f6 E268     		ldr	r2, [r4, #12]
 603 00f8 2169     		ldr	r1, [r4, #16]
 604 00fa 0229     		cmp	r1, #2
 605 00fc 00D1     		bne	.L44
 606 00fe 0423     		mov	r3, #4
 607              	.L44:
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 608              		.loc 1 482 0 is_stmt 0 discriminator 4
 609 0100 1A43     		orr	r2, r3
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 610              		.loc 1 484 0 is_stmt 1 discriminator 4
 611 0102 236A     		ldr	r3, [r4, #32]
 612 0104 5903     		lsl	r1, r3, #13
 483:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 613              		.loc 1 483 0 discriminator 4
 614 0106 0A43     		orr	r2, r1
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 615              		.loc 1 485 0 discriminator 4
 616 0108 236B     		ldr	r3, [r4, #48]
 617 010a 5900     		lsl	r1, r3, #1
 484:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 618              		.loc 1 484 0 discriminator 4
 619 010c 0A43     		orr	r2, r1
 485:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             hadc->Init.Overrun                               |
 620              		.loc 1 485 0 discriminator 4
 621 010e 636B     		ldr	r3, [r4, #52]
 622 0110 1343     		orr	r3, r2
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 623              		.loc 1 487 0 discriminator 4
 624 0112 A269     		ldr	r2, [r4, #24]
 625 0114 9103     		lsl	r1, r2, #14
 486:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 626              		.loc 1 486 0 discriminator 4
 627 0116 0B43     		orr	r3, r1
 488:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 628              		.loc 1 488 0 discriminator 4
 629 0118 E269     		ldr	r2, [r4, #28]
 630 011a D203     		lsl	r2, r2, #15
 487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 631              		.loc 1 487 0 discriminator 4
 632 011c 1343     		orr	r3, r2
 482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 633              		.loc 1 482 0 discriminator 4
 634 011e 2B43     		orr	r3, r5
 635 0120 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/ccK9yGTA.s 			page 52


 495:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 636              		.loc 1 495 0 discriminator 4
 637 0122 A36A     		ldr	r3, [r4, #40]
 638 0124 C222     		mov	r2, #194
 639 0126 FF32     		add	r2, r2, #255
 640 0128 9342     		cmp	r3, r2
 641 012a 05D0     		beq	.L45
 497:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                              hadc->Init.ExternalTrigConvEdge;
 642              		.loc 1 497 0
 643 012c 2268     		ldr	r2, [r4]
 644 012e D168     		ldr	r1, [r2, #12]
 645 0130 E06A     		ldr	r0, [r4, #44]
 646 0132 0343     		orr	r3, r0
 647 0134 0B43     		orr	r3, r1
 648 0136 D360     		str	r3, [r2, #12]
 649              	.L45:
 502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 650              		.loc 1 502 0
 651 0138 636A     		ldr	r3, [r4, #36]
 652 013a 012B     		cmp	r3, #1
 653 013c 11D1     		bne	.L46
 504:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 654              		.loc 1 504 0
 655 013e 236A     		ldr	r3, [r4, #32]
 656 0140 002B     		cmp	r3, #0
 657 0142 06D1     		bne	.L47
 507:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 658              		.loc 1 507 0
 659 0144 2268     		ldr	r2, [r4]
 660 0146 D368     		ldr	r3, [r2, #12]
 661 0148 8021     		mov	r1, #128
 662 014a 4902     		lsl	r1, r1, #9
 663 014c 0B43     		orr	r3, r1
 664 014e D360     		str	r3, [r2, #12]
 665 0150 07E0     		b	.L46
 666              	.L47:
 516:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 667              		.loc 1 516 0
 668 0152 A26D     		ldr	r2, [r4, #88]
 669 0154 2023     		mov	r3, #32
 670 0156 1343     		orr	r3, r2
 671 0158 A365     		str	r3, [r4, #88]
 519:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 672              		.loc 1 519 0
 673 015a E26D     		ldr	r2, [r4, #92]
 674 015c 0123     		mov	r3, #1
 675 015e 1343     		orr	r3, r2
 676 0160 E365     		str	r3, [r4, #92]
 677              	.L46:
 523:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 678              		.loc 1 523 0
 679 0162 236C     		ldr	r3, [r4, #64]
 680 0164 012B     		cmp	r3, #1
 681 0166 13D1     		bne	.L48
 534:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_CFGR2_OVSS |
 682              		.loc 1 534 0
 683 0168 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccK9yGTA.s 			page 53


 684 016a 1169     		ldr	r1, [r2, #16]
 685 016c 1C4B     		ldr	r3, .L53+20
 686 016e 0B40     		and	r3, r1
 687 0170 1361     		str	r3, [r2, #16]
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 688              		.loc 1 538 0
 689 0172 2268     		ldr	r2, [r4]
 690 0174 1169     		ldr	r1, [r2, #16]
 691 0176 636C     		ldr	r3, [r4, #68]
 692 0178 A06C     		ldr	r0, [r4, #72]
 693 017a 0343     		orr	r3, r0
 539:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.TriggeredMode );
 694              		.loc 1 539 0
 695 017c E06C     		ldr	r0, [r4, #76]
 696 017e 0343     		orr	r3, r0
 538:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                hadc->Init.Oversample.RightBitShift             |
 697              		.loc 1 538 0
 698 0180 0B43     		orr	r3, r1
 699 0182 1361     		str	r3, [r2, #16]
 543:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 700              		.loc 1 543 0
 701 0184 2268     		ldr	r2, [r4]
 702 0186 1169     		ldr	r1, [r2, #16]
 703 0188 0123     		mov	r3, #1
 704 018a 0B43     		orr	r3, r1
 705 018c 1361     		str	r3, [r2, #16]
 706 018e 07E0     		b	.L49
 707              	.L48:
 547:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 708              		.loc 1 547 0
 709 0190 2368     		ldr	r3, [r4]
 710 0192 1A69     		ldr	r2, [r3, #16]
 711 0194 D207     		lsl	r2, r2, #31
 712 0196 03D5     		bpl	.L49
 550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 713              		.loc 1 550 0
 714 0198 1A69     		ldr	r2, [r3, #16]
 715 019a 0121     		mov	r1, #1
 716 019c 8A43     		bic	r2, r1
 717 019e 1A61     		str	r2, [r3, #16]
 718              	.L49:
 555:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 719              		.loc 1 555 0
 720 01a0 2268     		ldr	r2, [r4]
 721 01a2 5369     		ldr	r3, [r2, #20]
 722 01a4 0721     		mov	r1, #7
 723 01a6 8B43     		bic	r3, r1
 724 01a8 5361     		str	r3, [r2, #20]
 558:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 725              		.loc 1 558 0
 726 01aa 2268     		ldr	r2, [r4]
 727 01ac 5369     		ldr	r3, [r2, #20]
 728 01ae E16B     		ldr	r1, [r4, #60]
 729 01b0 0B43     		orr	r3, r1
 730 01b2 5361     		str	r3, [r2, #20]
 561:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 731              		.loc 1 561 0
ARM GAS  /tmp/ccK9yGTA.s 			page 54


 732 01b4 0023     		mov	r3, #0
 733 01b6 E365     		str	r3, [r4, #92]
 564:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                     HAL_ADC_STATE_BUSY_INTERNAL,
 734              		.loc 1 564 0
 735 01b8 A36D     		ldr	r3, [r4, #88]
 736 01ba 0322     		mov	r2, #3
 737 01bc 9343     		bic	r3, r2
 738 01be 023A     		sub	r2, r2, #2
 739 01c0 1343     		orr	r3, r2
 740 01c2 A365     		str	r3, [r4, #88]
 570:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 741              		.loc 1 570 0
 742 01c4 0020     		mov	r0, #0
 743 01c6 00E0     		b	.L34
 744              	.LVL37:
 745              	.L50:
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 746              		.loc 1 361 0
 747 01c8 0120     		mov	r0, #1
 748              	.LVL38:
 749              	.L34:
 571:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 750              		.loc 1 571 0
 751              		@ sp needed
 752 01ca 38BD     		pop	{r3, r4, r5, pc}
 753              	.L54:
 754              		.align	2
 755              	.L53:
 756 01cc FDFEFFFF 		.word	-259
 757 01d0 08270140 		.word	1073817352
 758 01d4 FFFFC3FF 		.word	-3932161
 759 01d8 FFFFFFFD 		.word	-33554433
 760 01dc 1902FEFF 		.word	-130535
 761 01e0 03FCFFFF 		.word	-1021
 762              		.cfi_endproc
 763              	.LFE36:
 765              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 766              		.align	2
 767              		.weak	HAL_ADC_MspDeInit
 768              		.code	16
 769              		.thumb_func
 771              	HAL_ADC_MspDeInit:
 772              	.LFB39:
 722:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 773              		.loc 1 722 0
 774              		.cfi_startproc
 775              	.LVL39:
 729:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 776              		.loc 1 729 0
 777              		@ sp needed
 778 0000 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE39:
 782 0002 C046     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 783              		.align	2
 784              		.global	HAL_ADC_DeInit
 785              		.code	16
ARM GAS  /tmp/ccK9yGTA.s 			page 55


 786              		.thumb_func
 788              	HAL_ADC_DeInit:
 789              	.LFB37:
 586:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 790              		.loc 1 586 0
 791              		.cfi_startproc
 792              	.LVL40:
 793 0000 38B5     		push	{r3, r4, r5, lr}
 794              	.LCFI6:
 795              		.cfi_def_cfa_offset 16
 796              		.cfi_offset 3, -16
 797              		.cfi_offset 4, -12
 798              		.cfi_offset 5, -8
 799              		.cfi_offset 14, -4
 800              	.LVL41:
 590:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 801              		.loc 1 590 0
 802 0002 0028     		cmp	r0, #0
 803 0004 48D0     		beq	.L60
 804 0006 041C     		mov	r4, r0
 599:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 805              		.loc 1 599 0
 806 0008 826D     		ldr	r2, [r0, #88]
 807 000a 0223     		mov	r3, #2
 808 000c 1343     		orr	r3, r2
 809 000e 8365     		str	r3, [r0, #88]
 602:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 810              		.loc 1 602 0
 811 0010 FFF7FEFF 		bl	ADC_ConversionStop
 812              	.LVL42:
 813 0014 051E     		sub	r5, r0, #0
 814              	.LVL43:
 605:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {   
 815              		.loc 1 605 0
 816 0016 07D1     		bne	.L58
 608:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 817              		.loc 1 608 0
 818 0018 201C     		mov	r0, r4
 819              	.LVL44:
 820 001a FFF7FEFF 		bl	ADC_Disable
 821              	.LVL45:
 822 001e 051E     		sub	r5, r0, #0
 823              	.LVL46:
 611:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 824              		.loc 1 611 0
 825 0020 012D     		cmp	r5, #1
 826 0022 01D0     		beq	.L58
 614:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 827              		.loc 1 614 0
 828 0024 0123     		mov	r3, #1
 829 0026 A365     		str	r3, [r4, #88]
 830              	.LVL47:
 831              	.L58:
 621:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 832              		.loc 1 621 0
 833 0028 012D     		cmp	r5, #1
 834 002a 30D0     		beq	.L59
ARM GAS  /tmp/ccK9yGTA.s 			page 56


 626:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
 835              		.loc 1 626 0
 836 002c 2268     		ldr	r2, [r4]
 837 002e 5168     		ldr	r1, [r2, #4]
 838 0030 1A4B     		ldr	r3, .L61
 839 0032 0B40     		and	r3, r1
 840 0034 5360     		str	r3, [r2, #4]
 631:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                 ADC_FLAG_EOC | ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 841              		.loc 1 631 0
 842 0036 2368     		ldr	r3, [r4]
 843 0038 194A     		ldr	r2, .L61+4
 844 003a 1A60     		str	r2, [r3]
 639:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 845              		.loc 1 639 0
 846 003c 2268     		ldr	r2, [r4]
 847 003e 9168     		ldr	r1, [r2, #8]
 848 0040 184B     		ldr	r3, .L61+8
 849 0042 0B40     		and	r3, r1
 850 0044 9360     		str	r3, [r2, #8]
 645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_DISCEN | ADC_CFGR1_AUTOFF | ADC_CFGR1_AUTDLY | \
 851              		.loc 1 645 0
 852 0046 2268     		ldr	r2, [r4]
 853 0048 D168     		ldr	r1, [r2, #12]
 854 004a 174B     		ldr	r3, .L61+12
 855 004c 0B40     		and	r3, r1
 856 004e D360     		str	r3, [r2, #12]
 652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
 857              		.loc 1 652 0
 858 0050 2268     		ldr	r2, [r4]
 859 0052 1169     		ldr	r1, [r2, #16]
 860 0054 154B     		ldr	r3, .L61+16
 861 0056 0B40     		and	r3, r1
 862 0058 1361     		str	r3, [r2, #16]
 657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 863              		.loc 1 657 0
 864 005a 2268     		ldr	r2, [r4]
 865 005c 5369     		ldr	r3, [r2, #20]
 866 005e 0721     		mov	r1, #7
 867 0060 8B43     		bic	r3, r1
 868 0062 5361     		str	r3, [r2, #20]
 660:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 869              		.loc 1 660 0
 870 0064 2268     		ldr	r2, [r4]
 871 0066 116A     		ldr	r1, [r2, #32]
 872 0068 114B     		ldr	r3, .L61+20
 873 006a 0B40     		and	r3, r1
 874 006c 1362     		str	r3, [r2, #32]
 663:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 875              		.loc 1 663 0
 876 006e 2168     		ldr	r1, [r4]
 877 0070 B423     		mov	r3, #180
 878 0072 CA58     		ldr	r2, [r1, r3]
 879 0074 7F20     		mov	r0, #127
 880 0076 8243     		bic	r2, r0
 881 0078 CA50     		str	r2, [r1, r3]
 673:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 882              		.loc 1 673 0
ARM GAS  /tmp/ccK9yGTA.s 			page 57


 883 007a 2168     		ldr	r1, [r4]
 884 007c CA58     		ldr	r2, [r1, r3]
 885 007e 8243     		bic	r2, r0
 886 0080 CA50     		str	r2, [r1, r3]
 685:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 887              		.loc 1 685 0
 888 0082 201C     		mov	r0, r4
 889 0084 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 890              	.LVL48:
 688:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 891              		.loc 1 688 0
 892 0088 0023     		mov	r3, #0
 893 008a E365     		str	r3, [r4, #92]
 691:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 894              		.loc 1 691 0
 895 008c A365     		str	r3, [r4, #88]
 896              	.L59:
 695:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 897              		.loc 1 695 0
 898 008e 0022     		mov	r2, #0
 899 0090 5423     		mov	r3, #84
 900 0092 E254     		strb	r2, [r4, r3]
 698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 901              		.loc 1 698 0
 902 0094 281C     		mov	r0, r5
 903 0096 00E0     		b	.L57
 904              	.LVL49:
 905              	.L60:
 592:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 906              		.loc 1 592 0
 907 0098 0120     		mov	r0, #1
 908              	.LVL50:
 909              	.L57:
 699:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 910              		.loc 1 699 0
 911              		@ sp needed
 912 009a 38BD     		pop	{r3, r4, r5, pc}
 913              	.L62:
 914              		.align	2
 915              	.L61:
 916 009c 60F7FFFF 		.word	-2208
 917 00a0 9F080000 		.word	2207
 918 00a4 FFFFFFEF 		.word	-268435457
 919 00a8 00023E83 		.word	-2093088256
 920 00ac 02FCFF3F 		.word	1073740802
 921 00b0 00F000F0 		.word	-268374016
 922              		.cfi_endproc
 923              	.LFE37:
 925              		.section	.text.HAL_ADC_Start,"ax",%progbits
 926              		.align	2
 927              		.global	HAL_ADC_Start
 928              		.code	16
 929              		.thumb_func
 931              	HAL_ADC_Start:
 932              	.LFB40:
 764:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 933              		.loc 1 764 0
ARM GAS  /tmp/ccK9yGTA.s 			page 58


 934              		.cfi_startproc
 935              	.LVL51:
 936 0000 10B5     		push	{r4, lr}
 937              	.LCFI7:
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 4, -8
 940              		.cfi_offset 14, -4
 941              	.LVL52:
 771:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 942              		.loc 1 771 0
 943 0002 0368     		ldr	r3, [r0]
 944 0004 9B68     		ldr	r3, [r3, #8]
 945 0006 5B07     		lsl	r3, r3, #29
 946 0008 24D4     		bmi	.L67
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 947              		.loc 1 774 0
 948 000a 5423     		mov	r3, #84
 949 000c C35C     		ldrb	r3, [r0, r3]
 950 000e 012B     		cmp	r3, #1
 951 0010 22D0     		beq	.L68
 952 0012 041C     		mov	r4, r0
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 953              		.loc 1 774 0 is_stmt 0 discriminator 2
 954 0014 0122     		mov	r2, #1
 955 0016 5423     		mov	r3, #84
 956 0018 C254     		strb	r2, [r0, r3]
 779:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 957              		.loc 1 779 0 is_stmt 1 discriminator 2
 958 001a C369     		ldr	r3, [r0, #28]
 959 001c 012B     		cmp	r3, #1
 960 001e 02D0     		beq	.L69
 781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 961              		.loc 1 781 0
 962 0020 FFF7FEFF 		bl	ADC_Enable
 963              	.LVL53:
 964 0024 00E0     		b	.L66
 965              	.LVL54:
 966              	.L69:
 765:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 967              		.loc 1 765 0
 968 0026 0020     		mov	r0, #0
 969              	.LVL55:
 970              	.L66:
 785:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 971              		.loc 1 785 0
 972 0028 0028     		cmp	r0, #0
 973 002a 16D1     		bne	.L65
 790:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 974              		.loc 1 790 0
 975 002c A26D     		ldr	r2, [r4, #88]
 976 002e 0B4B     		ldr	r3, .L70
 977 0030 1340     		and	r3, r2
 978 0032 8022     		mov	r2, #128
 979 0034 5200     		lsl	r2, r2, #1
 980 0036 1343     		orr	r3, r2
 981 0038 A365     		str	r3, [r4, #88]
 795:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
ARM GAS  /tmp/ccK9yGTA.s 			page 59


 982              		.loc 1 795 0
 983 003a 0023     		mov	r3, #0
 984 003c E365     		str	r3, [r4, #92]
 800:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 985              		.loc 1 800 0
 986 003e AC3A     		sub	r2, r2, #172
 987 0040 A354     		strb	r3, [r4, r2]
 805:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 988              		.loc 1 805 0
 989 0042 2368     		ldr	r3, [r4]
 990 0044 383A     		sub	r2, r2, #56
 991 0046 1A60     		str	r2, [r3]
 811:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 992              		.loc 1 811 0
 993 0048 2268     		ldr	r2, [r4]
 994 004a 9168     		ldr	r1, [r2, #8]
 995 004c 0423     		mov	r3, #4
 996 004e 0B43     		orr	r3, r1
 997 0050 9360     		str	r3, [r2, #8]
 998 0052 02E0     		b	.L65
 999              	.LVL56:
 1000              	.L67:
 816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1001              		.loc 1 816 0
 1002 0054 0220     		mov	r0, #2
 1003              	.LVL57:
 820:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1004              		.loc 1 820 0
 1005 0056 00E0     		b	.L65
 1006              	.LVL58:
 1007              	.L68:
 774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1008              		.loc 1 774 0
 1009 0058 0220     		mov	r0, #2
 1010              	.LVL59:
 1011              	.L65:
 821:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1012              		.loc 1 821 0
 1013              		@ sp needed
 1014 005a 10BD     		pop	{r4, pc}
 1015              	.L71:
 1016              		.align	2
 1017              	.L70:
 1018 005c FEF0FFFF 		.word	-3842
 1019              		.cfi_endproc
 1020              	.LFE40:
 1022              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1023              		.align	2
 1024              		.global	HAL_ADC_Stop
 1025              		.code	16
 1026              		.thumb_func
 1028              	HAL_ADC_Stop:
 1029              	.LFB41:
 830:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1030              		.loc 1 830 0
 1031              		.cfi_startproc
 1032              	.LVL60:
ARM GAS  /tmp/ccK9yGTA.s 			page 60


 1033 0000 10B5     		push	{r4, lr}
 1034              	.LCFI8:
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 4, -8
 1037              		.cfi_offset 14, -4
 1038              	.LVL61:
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1039              		.loc 1 837 0
 1040 0002 5423     		mov	r3, #84
 1041 0004 C35C     		ldrb	r3, [r0, r3]
 1042 0006 012B     		cmp	r3, #1
 1043 0008 16D0     		beq	.L75
 1044 000a 041C     		mov	r4, r0
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1045              		.loc 1 837 0 is_stmt 0 discriminator 2
 1046 000c 0122     		mov	r2, #1
 1047 000e 5423     		mov	r3, #84
 1048 0010 C254     		strb	r2, [r0, r3]
 840:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1049              		.loc 1 840 0 is_stmt 1 discriminator 2
 1050 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1051              	.LVL62:
 843:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1052              		.loc 1 843 0 discriminator 2
 1053 0016 0028     		cmp	r0, #0
 1054 0018 0AD1     		bne	.L74
 846:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1055              		.loc 1 846 0
 1056 001a 201C     		mov	r0, r4
 1057              	.LVL63:
 1058 001c FFF7FEFF 		bl	ADC_Disable
 1059              	.LVL64:
 849:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1060              		.loc 1 849 0
 1061 0020 0028     		cmp	r0, #0
 1062 0022 05D1     		bne	.L74
 852:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1063              		.loc 1 852 0
 1064 0024 A26D     		ldr	r2, [r4, #88]
 1065 0026 054B     		ldr	r3, .L76
 1066 0028 1340     		and	r3, r2
 1067 002a 0122     		mov	r2, #1
 1068 002c 1343     		orr	r3, r2
 1069 002e A365     		str	r3, [r4, #88]
 1070              	.LVL65:
 1071              	.L74:
 859:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1072              		.loc 1 859 0
 1073 0030 0022     		mov	r2, #0
 1074 0032 5423     		mov	r3, #84
 1075 0034 E254     		strb	r2, [r4, r3]
 862:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1076              		.loc 1 862 0
 1077 0036 00E0     		b	.L73
 1078              	.LVL66:
 1079              	.L75:
 837:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 61


 1080              		.loc 1 837 0
 1081 0038 0220     		mov	r0, #2
 1082              	.LVL67:
 1083              	.L73:
 863:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1084              		.loc 1 863 0
 1085              		@ sp needed
 1086 003a 10BD     		pop	{r4, pc}
 1087              	.L77:
 1088              		.align	2
 1089              	.L76:
 1090 003c FEFEFFFF 		.word	-258
 1091              		.cfi_endproc
 1092              	.LFE41:
 1094              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1095              		.align	2
 1096              		.global	HAL_ADC_PollForConversion
 1097              		.code	16
 1098              		.thumb_func
 1100              	HAL_ADC_PollForConversion:
 1101              	.LFB42:
 884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0;
 1102              		.loc 1 884 0
 1103              		.cfi_startproc
 1104              	.LVL68:
 1105 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1106              	.LCFI9:
 1107              		.cfi_def_cfa_offset 24
 1108              		.cfi_offset 3, -24
 1109              		.cfi_offset 4, -20
 1110              		.cfi_offset 5, -16
 1111              		.cfi_offset 6, -12
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114              	.LVL69:
 892:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1115              		.loc 1 892 0
 1116 0002 4369     		ldr	r3, [r0, #20]
 1117 0004 082B     		cmp	r3, #8
 1118 0006 0CD0     		beq	.L87
 905:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1119              		.loc 1 905 0
 1120 0008 0368     		ldr	r3, [r0]
 1121 000a DB68     		ldr	r3, [r3, #12]
 1122 000c DB07     		lsl	r3, r3, #31
 1123 000e 0AD5     		bpl	.L88
 908:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1124              		.loc 1 908 0
 1125 0010 826D     		ldr	r2, [r0, #88]
 1126 0012 2023     		mov	r3, #32
 1127 0014 1343     		orr	r3, r2
 1128 0016 8365     		str	r3, [r0, #88]
 911:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1129              		.loc 1 911 0
 1130 0018 0022     		mov	r2, #0
 1131 001a 5423     		mov	r3, #84
 1132 001c C254     		strb	r2, [r0, r3]
ARM GAS  /tmp/ccK9yGTA.s 			page 62


 913:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1133              		.loc 1 913 0
 1134 001e 0120     		mov	r0, #1
 1135              	.LVL70:
 1136 0020 4EE0     		b	.L80
 1137              	.LVL71:
 1138              	.L87:
 894:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1139              		.loc 1 894 0
 1140 0022 0826     		mov	r6, #8
 1141 0024 00E0     		b	.L79
 1142              	.L88:
 917:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1143              		.loc 1 917 0
 1144 0026 0C26     		mov	r6, #12
 1145              	.L79:
 1146 0028 0D1C     		mov	r5, r1
 1147 002a 041C     		mov	r4, r0
 1148              	.LVL72:
 922:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1149              		.loc 1 922 0
 1150 002c FFF7FEFF 		bl	HAL_GetTick
 1151              	.LVL73:
 1152 0030 071C     		mov	r7, r0
 1153              	.LVL74:
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1154              		.loc 1 925 0
 1155 0032 11E0     		b	.L82
 1156              	.LVL75:
 1157              	.L84:
 928:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1158              		.loc 1 928 0
 1159 0034 6B1C     		add	r3, r5, #1
 1160 0036 0FD0     		beq	.L82
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1161              		.loc 1 930 0
 1162 0038 002D     		cmp	r5, #0
 1163 003a 04D0     		beq	.L83
 930:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1164              		.loc 1 930 0 is_stmt 0 discriminator 1
 1165 003c FFF7FEFF 		bl	HAL_GetTick
 1166              	.LVL76:
 1167 0040 C01B     		sub	r0, r0, r7
 1168 0042 A842     		cmp	r0, r5
 1169 0044 08D9     		bls	.L82
 1170              	.L83:
 933:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1171              		.loc 1 933 0 is_stmt 1
 1172 0046 A26D     		ldr	r2, [r4, #88]
 1173 0048 0423     		mov	r3, #4
 1174 004a 1343     		orr	r3, r2
 1175 004c A365     		str	r3, [r4, #88]
 936:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1176              		.loc 1 936 0
 1177 004e 0022     		mov	r2, #0
 1178 0050 5423     		mov	r3, #84
 1179 0052 E254     		strb	r2, [r4, r3]
ARM GAS  /tmp/ccK9yGTA.s 			page 63


 938:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1180              		.loc 1 938 0
 1181 0054 0320     		mov	r0, #3
 1182 0056 33E0     		b	.L80
 1183              	.L82:
 925:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1184              		.loc 1 925 0
 1185 0058 2368     		ldr	r3, [r4]
 1186 005a 1A68     		ldr	r2, [r3]
 1187 005c 1642     		tst	r6, r2
 1188 005e E9D0     		beq	.L84
 944:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1189              		.loc 1 944 0
 1190 0060 A26D     		ldr	r2, [r4, #88]
 1191 0062 8021     		mov	r1, #128
 1192 0064 8900     		lsl	r1, r1, #2
 1193 0066 0A43     		orr	r2, r1
 1194 0068 A265     		str	r2, [r4, #88]
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1195              		.loc 1 948 0
 1196 006a D968     		ldr	r1, [r3, #12]
 1197 006c C022     		mov	r2, #192
 1198 006e 1201     		lsl	r2, r2, #4
 1199 0070 1142     		tst	r1, r2
 1200 0072 1CD1     		bne	.L85
 948:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1201              		.loc 1 948 0 is_stmt 0 discriminator 1
 1202 0074 226A     		ldr	r2, [r4, #32]
 1203 0076 002A     		cmp	r2, #0
 1204 0078 19D1     		bne	.L85
 952:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1205              		.loc 1 952 0 is_stmt 1
 1206 007a 1A68     		ldr	r2, [r3]
 1207 007c 1207     		lsl	r2, r2, #28
 1208 007e 16D5     		bpl	.L85
 956:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1209              		.loc 1 956 0
 1210 0080 9A68     		ldr	r2, [r3, #8]
 1211 0082 5207     		lsl	r2, r2, #29
 1212 0084 0BD4     		bmi	.L86
 962:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1213              		.loc 1 962 0
 1214 0086 5A68     		ldr	r2, [r3, #4]
 1215 0088 0C21     		mov	r1, #12
 1216 008a 8A43     		bic	r2, r1
 1217 008c 5A60     		str	r2, [r3, #4]
 965:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1218              		.loc 1 965 0
 1219 008e A26D     		ldr	r2, [r4, #88]
 1220 0090 0C4B     		ldr	r3, .L90
 1221 0092 1A40     		and	r2, r3
 1222 0094 0433     		add	r3, r3, #4
 1223 0096 FF33     		add	r3, r3, #255
 1224 0098 1343     		orr	r3, r2
 1225 009a A365     		str	r3, [r4, #88]
 1226 009c 07E0     		b	.L85
 1227              	.L86:
ARM GAS  /tmp/ccK9yGTA.s 			page 64


 972:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1228              		.loc 1 972 0
 1229 009e A26D     		ldr	r2, [r4, #88]
 1230 00a0 2023     		mov	r3, #32
 1231 00a2 1343     		orr	r3, r2
 1232 00a4 A365     		str	r3, [r4, #88]
 975:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1233              		.loc 1 975 0
 1234 00a6 E26D     		ldr	r2, [r4, #92]
 1235 00a8 0123     		mov	r3, #1
 1236 00aa 1343     		orr	r3, r2
 1237 00ac E365     		str	r3, [r4, #92]
 1238              	.L85:
 983:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1239              		.loc 1 983 0
 1240 00ae A369     		ldr	r3, [r4, #24]
 1241 00b0 002B     		cmp	r3, #0
 1242 00b2 04D1     		bne	.L89
 986:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1243              		.loc 1 986 0
 1244 00b4 2368     		ldr	r3, [r4]
 1245 00b6 0C22     		mov	r2, #12
 1246 00b8 1A60     		str	r2, [r3]
 990:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1247              		.loc 1 990 0
 1248 00ba 0020     		mov	r0, #0
 1249 00bc 00E0     		b	.L80
 1250              	.L89:
 1251 00be 0020     		mov	r0, #0
 1252              	.LVL77:
 1253              	.L80:
 991:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1254              		.loc 1 991 0
 1255              		@ sp needed
 1256 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1257              	.L91:
 1258 00c2 C046     		.align	2
 1259              	.L90:
 1260 00c4 FEFEFFFF 		.word	-258
 1261              		.cfi_endproc
 1262              	.LFE42:
 1264              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1265              		.align	2
 1266              		.global	HAL_ADC_PollForEvent
 1267              		.code	16
 1268              		.thumb_func
 1270              	HAL_ADC_PollForEvent:
 1271              	.LFB43:
1010:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1272              		.loc 1 1010 0
 1273              		.cfi_startproc
 1274              	.LVL78:
 1275 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1276              	.LCFI10:
 1277              		.cfi_def_cfa_offset 24
 1278              		.cfi_offset 3, -24
 1279              		.cfi_offset 4, -20
ARM GAS  /tmp/ccK9yGTA.s 			page 65


 1280              		.cfi_offset 5, -16
 1281              		.cfi_offset 6, -12
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 051C     		mov	r5, r0
 1285 0004 0C1C     		mov	r4, r1
 1286 0006 161C     		mov	r6, r2
 1287              	.LVL79:
1018:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1288              		.loc 1 1018 0
 1289 0008 FFF7FEFF 		bl	HAL_GetTick
 1290              	.LVL80:
 1291 000c 071C     		mov	r7, r0
 1292              	.LVL81:
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1293              		.loc 1 1021 0
 1294 000e 11E0     		b	.L94
 1295              	.LVL82:
 1296              	.L97:
1024:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1297              		.loc 1 1024 0
 1298 0010 731C     		add	r3, r6, #1
 1299 0012 0FD0     		beq	.L94
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1300              		.loc 1 1026 0
 1301 0014 002E     		cmp	r6, #0
 1302 0016 04D0     		beq	.L95
1026:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1303              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1304 0018 FFF7FEFF 		bl	HAL_GetTick
 1305              	.LVL83:
 1306 001c C01B     		sub	r0, r0, r7
 1307 001e B042     		cmp	r0, r6
 1308 0020 08D9     		bls	.L94
 1309              	.L95:
1029:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1310              		.loc 1 1029 0 is_stmt 1
 1311 0022 AA6D     		ldr	r2, [r5, #88]
 1312 0024 0423     		mov	r3, #4
 1313 0026 1343     		orr	r3, r2
 1314 0028 AB65     		str	r3, [r5, #88]
1032:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1315              		.loc 1 1032 0
 1316 002a 0022     		mov	r2, #0
 1317 002c 5423     		mov	r3, #84
 1318 002e EA54     		strb	r2, [r5, r3]
1034:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       }
 1319              		.loc 1 1034 0
 1320 0030 0320     		mov	r0, #3
 1321 0032 1EE0     		b	.L96
 1322              	.L94:
1021:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1323              		.loc 1 1021 0
 1324 0034 2A68     		ldr	r2, [r5]
 1325 0036 1368     		ldr	r3, [r2]
 1326 0038 2340     		and	r3, r4
 1327 003a A342     		cmp	r3, r4
ARM GAS  /tmp/ccK9yGTA.s 			page 66


 1328 003c E8D1     		bne	.L97
1039:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1329              		.loc 1 1039 0
 1330 003e 802C     		cmp	r4, #128
 1331 0040 08D1     		bne	.L101
1044:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1332              		.loc 1 1044 0
 1333 0042 AB6D     		ldr	r3, [r5, #88]
 1334 0044 8021     		mov	r1, #128
 1335 0046 4902     		lsl	r1, r1, #9
 1336 0048 0B43     		orr	r3, r1
 1337 004a AB65     		str	r3, [r5, #88]
1047:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1338              		.loc 1 1047 0
 1339 004c 8023     		mov	r3, #128
 1340 004e 1360     		str	r3, [r2]
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1341              		.loc 1 1071 0
 1342 0050 0020     		mov	r0, #0
1048:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1343              		.loc 1 1048 0
 1344 0052 0EE0     		b	.L96
 1345              	.L101:
1056:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1346              		.loc 1 1056 0
 1347 0054 6B6B     		ldr	r3, [r5, #52]
 1348 0056 002B     		cmp	r3, #0
 1349 0058 08D1     		bne	.L100
1059:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         
 1350              		.loc 1 1059 0
 1351 005a AB6D     		ldr	r3, [r5, #88]
 1352 005c 8021     		mov	r1, #128
 1353 005e C900     		lsl	r1, r1, #3
 1354 0060 0B43     		orr	r3, r1
 1355 0062 AB65     		str	r3, [r5, #88]
1062:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1356              		.loc 1 1062 0
 1357 0064 E96D     		ldr	r1, [r5, #92]
 1358 0066 0223     		mov	r3, #2
 1359 0068 0B43     		orr	r3, r1
 1360 006a EB65     		str	r3, [r5, #92]
 1361              	.L100:
1066:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     break;
 1362              		.loc 1 1066 0
 1363 006c 1023     		mov	r3, #16
 1364 006e 1360     		str	r3, [r2]
1071:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1365              		.loc 1 1071 0
 1366 0070 0020     		mov	r0, #0
 1367              	.L96:
1072:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1368              		.loc 1 1072 0
 1369              		@ sp needed
 1370              	.LVL84:
 1371              	.LVL85:
 1372              	.LVL86:
 1373              	.LVL87:
ARM GAS  /tmp/ccK9yGTA.s 			page 67


 1374 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1375              		.cfi_endproc
 1376              	.LFE43:
 1378              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1379              		.align	2
 1380              		.global	HAL_ADC_Start_IT
 1381              		.code	16
 1382              		.thumb_func
 1384              	HAL_ADC_Start_IT:
 1385              	.LFB44:
1093:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1386              		.loc 1 1093 0
 1387              		.cfi_startproc
 1388              	.LVL88:
 1389 0000 10B5     		push	{r4, lr}
 1390              	.LCFI11:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 4, -8
 1393              		.cfi_offset 14, -4
 1394              	.LVL89:
1100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1395              		.loc 1 1100 0
 1396 0002 0368     		ldr	r3, [r0]
 1397 0004 9B68     		ldr	r3, [r3, #8]
 1398 0006 5B07     		lsl	r3, r3, #29
 1399 0008 37D4     		bmi	.L109
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1400              		.loc 1 1103 0
 1401 000a 5423     		mov	r3, #84
 1402 000c C35C     		ldrb	r3, [r0, r3]
 1403 000e 012B     		cmp	r3, #1
 1404 0010 35D0     		beq	.L110
 1405 0012 041C     		mov	r4, r0
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1406              		.loc 1 1103 0 is_stmt 0 discriminator 2
 1407 0014 0122     		mov	r2, #1
 1408 0016 5423     		mov	r3, #84
 1409 0018 C254     		strb	r2, [r0, r3]
1108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1410              		.loc 1 1108 0 is_stmt 1 discriminator 2
 1411 001a C369     		ldr	r3, [r0, #28]
 1412 001c 012B     		cmp	r3, #1
 1413 001e 02D0     		beq	.L111
1110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1414              		.loc 1 1110 0
 1415 0020 FFF7FEFF 		bl	ADC_Enable
 1416              	.LVL90:
 1417 0024 00E0     		b	.L105
 1418              	.LVL91:
 1419              	.L111:
1094:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1420              		.loc 1 1094 0
 1421 0026 0020     		mov	r0, #0
 1422              	.LVL92:
 1423              	.L105:
1114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1424              		.loc 1 1114 0
ARM GAS  /tmp/ccK9yGTA.s 			page 68


 1425 0028 0028     		cmp	r0, #0
 1426 002a 29D1     		bne	.L104
1119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1427              		.loc 1 1119 0
 1428 002c A26D     		ldr	r2, [r4, #88]
 1429 002e 154B     		ldr	r3, .L113
 1430 0030 1340     		and	r3, r2
 1431 0032 8022     		mov	r2, #128
 1432 0034 5200     		lsl	r2, r2, #1
 1433 0036 1343     		orr	r3, r2
 1434 0038 A365     		str	r3, [r4, #88]
1124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1435              		.loc 1 1124 0
 1436 003a 0023     		mov	r3, #0
 1437 003c E365     		str	r3, [r4, #92]
1129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1438              		.loc 1 1129 0
 1439 003e AC3A     		sub	r2, r2, #172
 1440 0040 A354     		strb	r3, [r4, r2]
1134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1441              		.loc 1 1134 0
 1442 0042 2368     		ldr	r3, [r4]
 1443 0044 383A     		sub	r2, r2, #56
 1444 0046 1A60     		str	r2, [r3]
1138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1445              		.loc 1 1138 0
 1446 0048 6369     		ldr	r3, [r4, #20]
 1447 004a 082B     		cmp	r3, #8
 1448 004c 0AD1     		bne	.L112
1141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1449              		.loc 1 1141 0
 1450 004e 2268     		ldr	r2, [r4]
 1451 0050 5368     		ldr	r3, [r2, #4]
 1452 0052 0421     		mov	r1, #4
 1453 0054 8B43     		bic	r3, r1
 1454 0056 5360     		str	r3, [r2, #4]
1142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1455              		.loc 1 1142 0
 1456 0058 2268     		ldr	r2, [r4]
 1457 005a 5168     		ldr	r1, [r2, #4]
 1458 005c 1823     		mov	r3, #24
 1459 005e 0B43     		orr	r3, r1
 1460 0060 5360     		str	r3, [r2, #4]
1143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
 1461              		.loc 1 1143 0
 1462 0062 04E0     		b	.L108
 1463              	.L112:
1146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           break;
 1464              		.loc 1 1146 0
 1465 0064 2268     		ldr	r2, [r4]
 1466 0066 5168     		ldr	r1, [r2, #4]
 1467 0068 1C23     		mov	r3, #28
 1468 006a 0B43     		orr	r3, r1
 1469 006c 5360     		str	r3, [r2, #4]
 1470              	.L108:
1154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1471              		.loc 1 1154 0
ARM GAS  /tmp/ccK9yGTA.s 			page 69


 1472 006e 2268     		ldr	r2, [r4]
 1473 0070 9168     		ldr	r1, [r2, #8]
 1474 0072 0423     		mov	r3, #4
 1475 0074 0B43     		orr	r3, r1
 1476 0076 9360     		str	r3, [r2, #8]
 1477 0078 02E0     		b	.L104
 1478              	.LVL93:
 1479              	.L109:
1159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1480              		.loc 1 1159 0
 1481 007a 0220     		mov	r0, #2
 1482              	.LVL94:
1163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1483              		.loc 1 1163 0
 1484 007c 00E0     		b	.L104
 1485              	.LVL95:
 1486              	.L110:
1103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1487              		.loc 1 1103 0
 1488 007e 0220     		mov	r0, #2
 1489              	.LVL96:
 1490              	.L104:
1164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1491              		.loc 1 1164 0
 1492              		@ sp needed
 1493 0080 10BD     		pop	{r4, pc}
 1494              	.L114:
 1495 0082 C046     		.align	2
 1496              	.L113:
 1497 0084 FEF0FFFF 		.word	-3842
 1498              		.cfi_endproc
 1499              	.LFE44:
 1501              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1502              		.align	2
 1503              		.global	HAL_ADC_Stop_IT
 1504              		.code	16
 1505              		.thumb_func
 1507              	HAL_ADC_Stop_IT:
 1508              	.LFB45:
1174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1509              		.loc 1 1174 0
 1510              		.cfi_startproc
 1511              	.LVL97:
 1512 0000 10B5     		push	{r4, lr}
 1513              	.LCFI12:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 4, -8
 1516              		.cfi_offset 14, -4
 1517              	.LVL98:
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1518              		.loc 1 1181 0
 1519 0002 5423     		mov	r3, #84
 1520 0004 C35C     		ldrb	r3, [r0, r3]
 1521 0006 012B     		cmp	r3, #1
 1522 0008 1BD0     		beq	.L118
 1523 000a 041C     		mov	r4, r0
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
ARM GAS  /tmp/ccK9yGTA.s 			page 70


 1524              		.loc 1 1181 0 is_stmt 0 discriminator 2
 1525 000c 0122     		mov	r2, #1
 1526 000e 5423     		mov	r3, #84
 1527 0010 C254     		strb	r2, [r0, r3]
1184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1528              		.loc 1 1184 0 is_stmt 1 discriminator 2
 1529 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1530              	.LVL99:
1187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1531              		.loc 1 1187 0 discriminator 2
 1532 0016 0028     		cmp	r0, #0
 1533 0018 0FD1     		bne	.L117
1191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1534              		.loc 1 1191 0
 1535 001a 2268     		ldr	r2, [r4]
 1536 001c 5368     		ldr	r3, [r2, #4]
 1537 001e 1C21     		mov	r1, #28
 1538 0020 8B43     		bic	r3, r1
 1539 0022 5360     		str	r3, [r2, #4]
1194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1540              		.loc 1 1194 0
 1541 0024 201C     		mov	r0, r4
 1542              	.LVL100:
 1543 0026 FFF7FEFF 		bl	ADC_Disable
 1544              	.LVL101:
1197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1545              		.loc 1 1197 0
 1546 002a 0028     		cmp	r0, #0
 1547 002c 05D1     		bne	.L117
1200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1548              		.loc 1 1200 0
 1549 002e A26D     		ldr	r2, [r4, #88]
 1550 0030 054B     		ldr	r3, .L119
 1551 0032 1340     		and	r3, r2
 1552 0034 0122     		mov	r2, #1
 1553 0036 1343     		orr	r3, r2
 1554 0038 A365     		str	r3, [r4, #88]
 1555              	.LVL102:
 1556              	.L117:
1207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1557              		.loc 1 1207 0
 1558 003a 0022     		mov	r2, #0
 1559 003c 5423     		mov	r3, #84
 1560 003e E254     		strb	r2, [r4, r3]
1210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1561              		.loc 1 1210 0
 1562 0040 00E0     		b	.L116
 1563              	.LVL103:
 1564              	.L118:
1181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1565              		.loc 1 1181 0
 1566 0042 0220     		mov	r0, #2
 1567              	.LVL104:
 1568              	.L116:
1211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1569              		.loc 1 1211 0
 1570              		@ sp needed
ARM GAS  /tmp/ccK9yGTA.s 			page 71


 1571 0044 10BD     		pop	{r4, pc}
 1572              	.L120:
 1573 0046 C046     		.align	2
 1574              	.L119:
 1575 0048 FEFEFFFF 		.word	-258
 1576              		.cfi_endproc
 1577              	.LFE45:
 1579              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1580              		.align	2
 1581              		.global	HAL_ADC_Start_DMA
 1582              		.code	16
 1583              		.thumb_func
 1585              	HAL_ADC_Start_DMA:
 1586              	.LFB46:
1224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1587              		.loc 1 1224 0
 1588              		.cfi_startproc
 1589              	.LVL105:
 1590 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1591              	.LCFI13:
 1592              		.cfi_def_cfa_offset 24
 1593              		.cfi_offset 3, -24
 1594              		.cfi_offset 4, -20
 1595              		.cfi_offset 5, -16
 1596              		.cfi_offset 6, -12
 1597              		.cfi_offset 7, -8
 1598              		.cfi_offset 14, -4
 1599              	.LVL106:
1231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1600              		.loc 1 1231 0
 1601 0002 0368     		ldr	r3, [r0]
 1602 0004 9B68     		ldr	r3, [r3, #8]
 1603 0006 5B07     		lsl	r3, r3, #29
 1604 0008 41D4     		bmi	.L125
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1605              		.loc 1 1234 0
 1606 000a 5423     		mov	r3, #84
 1607 000c C35C     		ldrb	r3, [r0, r3]
 1608 000e 012B     		cmp	r3, #1
 1609 0010 40D0     		beq	.L126
 1610 0012 151C     		mov	r5, r2
 1611 0014 0E1C     		mov	r6, r1
 1612 0016 041C     		mov	r4, r0
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1613              		.loc 1 1234 0 is_stmt 0 discriminator 2
 1614 0018 0122     		mov	r2, #1
 1615              	.LVL107:
 1616 001a 5423     		mov	r3, #84
 1617 001c C254     		strb	r2, [r0, r3]
1239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1618              		.loc 1 1239 0 is_stmt 1 discriminator 2
 1619 001e C369     		ldr	r3, [r0, #28]
 1620 0020 012B     		cmp	r3, #1
 1621 0022 03D0     		beq	.L127
1241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1622              		.loc 1 1241 0
 1623 0024 FFF7FEFF 		bl	ADC_Enable
ARM GAS  /tmp/ccK9yGTA.s 			page 72


 1624              	.LVL108:
 1625 0028 071C     		mov	r7, r0
 1626              	.LVL109:
 1627 002a 00E0     		b	.L124
 1628              	.LVL110:
 1629              	.L127:
1225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1630              		.loc 1 1225 0
 1631 002c 0027     		mov	r7, #0
 1632              	.LVL111:
 1633              	.L124:
1245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1634              		.loc 1 1245 0
 1635 002e 002F     		cmp	r7, #0
 1636 0030 2ED1     		bne	.L122
1250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1637              		.loc 1 1250 0
 1638 0032 A26D     		ldr	r2, [r4, #88]
 1639 0034 184B     		ldr	r3, .L128
 1640 0036 1340     		and	r3, r2
 1641 0038 8022     		mov	r2, #128
 1642 003a 5200     		lsl	r2, r2, #1
 1643 003c 1343     		orr	r3, r2
 1644 003e A365     		str	r3, [r4, #88]
1255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1645              		.loc 1 1255 0
 1646 0040 0023     		mov	r3, #0
 1647 0042 E365     		str	r3, [r4, #92]
1260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1648              		.loc 1 1260 0
 1649 0044 AC3A     		sub	r2, r2, #172
 1650 0046 A354     		strb	r3, [r4, r2]
1263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1651              		.loc 1 1263 0
 1652 0048 236D     		ldr	r3, [r4, #80]
 1653 004a 144A     		ldr	r2, .L128+4
 1654 004c DA62     		str	r2, [r3, #44]
1266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1655              		.loc 1 1266 0
 1656 004e 236D     		ldr	r3, [r4, #80]
 1657 0050 134A     		ldr	r2, .L128+8
 1658 0052 1A63     		str	r2, [r3, #48]
1269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1659              		.loc 1 1269 0
 1660 0054 236D     		ldr	r3, [r4, #80]
 1661 0056 134A     		ldr	r2, .L128+12
 1662 0058 5A63     		str	r2, [r3, #52]
1278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1663              		.loc 1 1278 0
 1664 005a 2368     		ldr	r3, [r4]
 1665 005c 1C22     		mov	r2, #28
 1666 005e 1A60     		str	r2, [r3]
1281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1667              		.loc 1 1281 0
 1668 0060 2268     		ldr	r2, [r4]
 1669 0062 5168     		ldr	r1, [r2, #4]
 1670 0064 1023     		mov	r3, #16
ARM GAS  /tmp/ccK9yGTA.s 			page 73


 1671 0066 0B43     		orr	r3, r1
 1672 0068 5360     		str	r3, [r2, #4]
1284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1673              		.loc 1 1284 0
 1674 006a 2268     		ldr	r2, [r4]
 1675 006c D168     		ldr	r1, [r2, #12]
 1676 006e 0123     		mov	r3, #1
 1677 0070 0B43     		orr	r3, r1
 1678 0072 D360     		str	r3, [r2, #12]
1287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 1679              		.loc 1 1287 0
 1680 0074 2168     		ldr	r1, [r4]
 1681 0076 4031     		add	r1, r1, #64
 1682 0078 206D     		ldr	r0, [r4, #80]
 1683 007a 321C     		mov	r2, r6
 1684 007c 2B1C     		mov	r3, r5
 1685 007e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1686              	.LVL112:
1293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1687              		.loc 1 1293 0
 1688 0082 2268     		ldr	r2, [r4]
 1689 0084 9168     		ldr	r1, [r2, #8]
 1690 0086 0423     		mov	r3, #4
 1691 0088 0B43     		orr	r3, r1
 1692 008a 9360     		str	r3, [r2, #8]
 1693 008c 00E0     		b	.L122
 1694              	.LVL113:
 1695              	.L125:
1298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1696              		.loc 1 1298 0
 1697 008e 0227     		mov	r7, #2
 1698              	.LVL114:
 1699              	.L122:
1302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1700              		.loc 1 1302 0
 1701 0090 381C     		mov	r0, r7
 1702 0092 00E0     		b	.L123
 1703              	.LVL115:
 1704              	.L126:
1234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1705              		.loc 1 1234 0
 1706 0094 0220     		mov	r0, #2
 1707              	.LVL116:
 1708              	.L123:
1303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1709              		.loc 1 1303 0
 1710              		@ sp needed
 1711 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1712              	.L129:
 1713              		.align	2
 1714              	.L128:
 1715 0098 FEF0FFFF 		.word	-3842
 1716 009c 00000000 		.word	ADC_DMAConvCplt
 1717 00a0 00000000 		.word	ADC_DMAHalfConvCplt
 1718 00a4 00000000 		.word	ADC_DMAError
 1719              		.cfi_endproc
 1720              	.LFE46:
ARM GAS  /tmp/ccK9yGTA.s 			page 74


 1722              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1723              		.align	2
 1724              		.global	HAL_ADC_Stop_DMA
 1725              		.code	16
 1726              		.thumb_func
 1728              	HAL_ADC_Stop_DMA:
 1729              	.LFB47:
1314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1730              		.loc 1 1314 0
 1731              		.cfi_startproc
 1732              	.LVL117:
 1733 0000 38B5     		push	{r3, r4, r5, lr}
 1734              	.LCFI14:
 1735              		.cfi_def_cfa_offset 16
 1736              		.cfi_offset 3, -16
 1737              		.cfi_offset 4, -12
 1738              		.cfi_offset 5, -8
 1739              		.cfi_offset 14, -4
 1740              	.LVL118:
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1741              		.loc 1 1321 0
 1742 0002 5423     		mov	r3, #84
 1743 0004 C35C     		ldrb	r3, [r0, r3]
 1744 0006 012B     		cmp	r3, #1
 1745 0008 31D0     		beq	.L136
 1746 000a 051C     		mov	r5, r0
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1747              		.loc 1 1321 0 is_stmt 0 discriminator 2
 1748 000c 0122     		mov	r2, #1
 1749 000e 5423     		mov	r3, #84
 1750 0010 C254     		strb	r2, [r0, r3]
1324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1751              		.loc 1 1324 0 is_stmt 1 discriminator 2
 1752 0012 FFF7FEFF 		bl	ADC_ConversionStop
 1753              	.LVL119:
 1754 0016 041E     		sub	r4, r0, #0
 1755              	.LVL120:
1327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1756              		.loc 1 1327 0 discriminator 2
 1757 0018 24D1     		bne	.L132
1330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1758              		.loc 1 1330 0
 1759 001a 2A68     		ldr	r2, [r5]
 1760 001c D368     		ldr	r3, [r2, #12]
 1761 001e 0121     		mov	r1, #1
 1762 0020 8B43     		bic	r3, r1
 1763 0022 D360     		str	r3, [r2, #12]
1334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1764              		.loc 1 1334 0
 1765 0024 286D     		ldr	r0, [r5, #80]
 1766              	.LVL121:
 1767 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 1768              	.LVL122:
 1769 002a 041E     		sub	r4, r0, #0
 1770              	.LVL123:
1337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1771              		.loc 1 1337 0
ARM GAS  /tmp/ccK9yGTA.s 			page 75


 1772 002c 03D0     		beq	.L133
1340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1773              		.loc 1 1340 0
 1774 002e AA6D     		ldr	r2, [r5, #88]
 1775 0030 4023     		mov	r3, #64
 1776 0032 1343     		orr	r3, r2
 1777 0034 AB65     		str	r3, [r5, #88]
 1778              	.L133:
1344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1779              		.loc 1 1344 0
 1780 0036 2A68     		ldr	r2, [r5]
 1781 0038 5368     		ldr	r3, [r2, #4]
 1782 003a 1021     		mov	r1, #16
 1783 003c 8B43     		bic	r3, r1
 1784 003e 5360     		str	r3, [r2, #4]
1349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1785              		.loc 1 1349 0
 1786 0040 002C     		cmp	r4, #0
 1787 0042 04D1     		bne	.L134
1351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1788              		.loc 1 1351 0
 1789 0044 281C     		mov	r0, r5
 1790              	.LVL124:
 1791 0046 FFF7FEFF 		bl	ADC_Disable
 1792              	.LVL125:
 1793 004a 041C     		mov	r4, r0
 1794              	.LVL126:
 1795 004c 02E0     		b	.L135
 1796              	.L134:
1355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 1797              		.loc 1 1355 0
 1798 004e 281C     		mov	r0, r5
 1799              	.LVL127:
 1800 0050 FFF7FEFF 		bl	ADC_Disable
 1801              	.LVL128:
 1802              	.L135:
1359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 1803              		.loc 1 1359 0
 1804 0054 002C     		cmp	r4, #0
 1805 0056 05D1     		bne	.L132
1362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1806              		.loc 1 1362 0
 1807 0058 AA6D     		ldr	r2, [r5, #88]
 1808 005a 064B     		ldr	r3, .L137
 1809 005c 1340     		and	r3, r2
 1810 005e 0122     		mov	r2, #1
 1811 0060 1343     		orr	r3, r2
 1812 0062 AB65     		str	r3, [r5, #88]
 1813              	.LVL129:
 1814              	.L132:
1370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1815              		.loc 1 1370 0
 1816 0064 0022     		mov	r2, #0
 1817 0066 5423     		mov	r3, #84
 1818 0068 EA54     		strb	r2, [r5, r3]
1373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1819              		.loc 1 1373 0
ARM GAS  /tmp/ccK9yGTA.s 			page 76


 1820 006a 201C     		mov	r0, r4
 1821 006c 00E0     		b	.L131
 1822              	.LVL130:
 1823              	.L136:
1321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1824              		.loc 1 1321 0
 1825 006e 0220     		mov	r0, #2
 1826              	.LVL131:
 1827              	.L131:
1374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1828              		.loc 1 1374 0
 1829              		@ sp needed
 1830 0070 38BD     		pop	{r3, r4, r5, pc}
 1831              	.L138:
 1832 0072 C046     		.align	2
 1833              	.L137:
 1834 0074 FEFEFFFF 		.word	-258
 1835              		.cfi_endproc
 1836              	.LFE47:
 1838              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1839              		.align	2
 1840              		.global	HAL_ADC_GetValue
 1841              		.code	16
 1842              		.thumb_func
 1844              	HAL_ADC_GetValue:
 1845              	.LFB48:
1396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 1846              		.loc 1 1396 0
 1847              		.cfi_startproc
 1848              	.LVL132:
1404:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 1849              		.loc 1 1404 0
 1850 0000 0368     		ldr	r3, [r0]
 1851 0002 186C     		ldr	r0, [r3, #64]
 1852              	.LVL133:
1405:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1853              		.loc 1 1405 0
 1854              		@ sp needed
 1855 0004 7047     		bx	lr
 1856              		.cfi_endproc
 1857              	.LFE48:
 1859 0006 C046     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1860              		.align	2
 1861              		.weak	HAL_ADC_ConvCpltCallback
 1862              		.code	16
 1863              		.thumb_func
 1865              	HAL_ADC_ConvCpltCallback:
 1866              	.LFB50:
1535:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1867              		.loc 1 1535 0
 1868              		.cfi_startproc
 1869              	.LVL134:
1542:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1870              		.loc 1 1542 0
 1871              		@ sp needed
 1872 0000 7047     		bx	lr
 1873              		.cfi_endproc
ARM GAS  /tmp/ccK9yGTA.s 			page 77


 1874              	.LFE50:
 1876 0002 C046     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1877              		.align	2
 1878              		.code	16
 1879              		.thumb_func
 1881              	ADC_DMAConvCplt:
 1882              	.LFB61:
2083:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1883              		.loc 1 2083 0
 1884              		.cfi_startproc
 1885              	.LVL135:
 1886 0000 08B5     		push	{r3, lr}
 1887              	.LCFI15:
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 3, -8
 1890              		.cfi_offset 14, -4
2085:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 1891              		.loc 1 2085 0
 1892 0002 836A     		ldr	r3, [r0, #40]
 1893              	.LVL136:
2088:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 1894              		.loc 1 2088 0
 1895 0004 9A6D     		ldr	r2, [r3, #88]
 1896 0006 5021     		mov	r1, #80
 1897 0008 1142     		tst	r1, r2
 1898 000a 2AD1     		bne	.L142
2091:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 1899              		.loc 1 2091 0
 1900 000c 9A6D     		ldr	r2, [r3, #88]
 1901 000e B131     		add	r1, r1, #177
 1902 0010 FF31     		add	r1, r1, #255
 1903 0012 0A43     		orr	r2, r1
 1904 0014 9A65     		str	r2, [r3, #88]
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1905              		.loc 1 2095 0
 1906 0016 1A68     		ldr	r2, [r3]
 1907 0018 D068     		ldr	r0, [r2, #12]
 1908              	.LVL137:
 1909 001a C021     		mov	r1, #192
 1910 001c 0901     		lsl	r1, r1, #4
 1911 001e 0842     		tst	r0, r1
 1912 0020 1BD1     		bne	.L143
2095:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 1913              		.loc 1 2095 0 is_stmt 0 discriminator 1
 1914 0022 196A     		ldr	r1, [r3, #32]
 1915 0024 0029     		cmp	r1, #0
 1916 0026 18D1     		bne	.L143
2099:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 1917              		.loc 1 2099 0 is_stmt 1
 1918 0028 1168     		ldr	r1, [r2]
 1919 002a 0907     		lsl	r1, r1, #28
 1920 002c 15D5     		bpl	.L143
2103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 1921              		.loc 1 2103 0
 1922 002e 9168     		ldr	r1, [r2, #8]
 1923 0030 4907     		lsl	r1, r1, #29
 1924 0032 0AD4     		bmi	.L144
ARM GAS  /tmp/ccK9yGTA.s 			page 78


2109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 1925              		.loc 1 2109 0
 1926 0034 5168     		ldr	r1, [r2, #4]
 1927 0036 0C20     		mov	r0, #12
 1928 0038 8143     		bic	r1, r0
 1929 003a 5160     		str	r1, [r2, #4]
2112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1930              		.loc 1 2112 0
 1931 003c 996D     		ldr	r1, [r3, #88]
 1932 003e 0B4A     		ldr	r2, .L146
 1933 0040 0A40     		and	r2, r1
 1934 0042 0121     		mov	r1, #1
 1935 0044 0A43     		orr	r2, r1
 1936 0046 9A65     		str	r2, [r3, #88]
 1937 0048 07E0     		b	.L143
 1938              	.L144:
2119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 1939              		.loc 1 2119 0
 1940 004a 996D     		ldr	r1, [r3, #88]
 1941 004c 2022     		mov	r2, #32
 1942 004e 0A43     		orr	r2, r1
 1943 0050 9A65     		str	r2, [r3, #88]
2122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 1944              		.loc 1 2122 0
 1945 0052 D96D     		ldr	r1, [r3, #92]
 1946 0054 0122     		mov	r2, #1
 1947 0056 0A43     		orr	r2, r1
 1948 0058 DA65     		str	r2, [r3, #92]
 1949              	.L143:
2128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1950              		.loc 1 2128 0
 1951 005a 181C     		mov	r0, r3
 1952 005c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1953              	.LVL138:
 1954 0060 02E0     		b	.L141
 1955              	.LVL139:
 1956              	.L142:
2133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 1957              		.loc 1 2133 0
 1958 0062 1B6D     		ldr	r3, [r3, #80]
 1959              	.LVL140:
 1960 0064 5B6B     		ldr	r3, [r3, #52]
 1961 0066 9847     		blx	r3
 1962              	.LVL141:
 1963              	.L141:
2135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1964              		.loc 1 2135 0
 1965              		@ sp needed
 1966 0068 08BD     		pop	{r3, pc}
 1967              	.L147:
 1968 006a C046     		.align	2
 1969              	.L146:
 1970 006c FEFEFFFF 		.word	-258
 1971              		.cfi_endproc
 1972              	.LFE61:
 1974              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1975              		.align	2
ARM GAS  /tmp/ccK9yGTA.s 			page 79


 1976              		.weak	HAL_ADC_ConvHalfCpltCallback
 1977              		.code	16
 1978              		.thumb_func
 1980              	HAL_ADC_ConvHalfCpltCallback:
 1981              	.LFB51:
1550:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1982              		.loc 1 1550 0
 1983              		.cfi_startproc
 1984              	.LVL142:
1557:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 1985              		.loc 1 1557 0
 1986              		@ sp needed
 1987 0000 7047     		bx	lr
 1988              		.cfi_endproc
 1989              	.LFE51:
 1991 0002 C046     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1992              		.align	2
 1993              		.code	16
 1994              		.thumb_func
 1996              	ADC_DMAHalfConvCplt:
 1997              	.LFB62:
2143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1998              		.loc 1 2143 0
 1999              		.cfi_startproc
 2000              	.LVL143:
 2001 0000 08B5     		push	{r3, lr}
 2002              	.LCFI16:
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 3, -8
 2005              		.cfi_offset 14, -4
2145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2006              		.loc 1 2145 0
 2007 0002 806A     		ldr	r0, [r0, #40]
 2008              	.LVL144:
2148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2009              		.loc 1 2148 0
 2010 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2011              	.LVL145:
2149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2012              		.loc 1 2149 0
 2013              		@ sp needed
 2014 0008 08BD     		pop	{r3, pc}
 2015              		.cfi_endproc
 2016              	.LFE62:
 2018 000a C046     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2019              		.align	2
 2020              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2021              		.code	16
 2022              		.thumb_func
 2024              	HAL_ADC_LevelOutOfWindowCallback:
 2025              	.LFB52:
1565:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2026              		.loc 1 1565 0
 2027              		.cfi_startproc
 2028              	.LVL146:
1572:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2029              		.loc 1 1572 0
ARM GAS  /tmp/ccK9yGTA.s 			page 80


 2030              		@ sp needed
 2031 0000 7047     		bx	lr
 2032              		.cfi_endproc
 2033              	.LFE52:
 2035 0002 C046     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2036              		.align	2
 2037              		.weak	HAL_ADC_ErrorCallback
 2038              		.code	16
 2039              		.thumb_func
 2041              	HAL_ADC_ErrorCallback:
 2042              	.LFB53:
1587:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2043              		.loc 1 1587 0
 2044              		.cfi_startproc
 2045              	.LVL147:
1594:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2046              		.loc 1 1594 0
 2047              		@ sp needed
 2048 0000 7047     		bx	lr
 2049              		.cfi_endproc
 2050              	.LFE53:
 2052 0002 C046     		.section	.text.ADC_DMAError,"ax",%progbits
 2053              		.align	2
 2054              		.code	16
 2055              		.thumb_func
 2057              	ADC_DMAError:
 2058              	.LFB63:
2157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2059              		.loc 1 2157 0
 2060              		.cfi_startproc
 2061              	.LVL148:
 2062 0000 08B5     		push	{r3, lr}
 2063              	.LCFI17:
 2064              		.cfi_def_cfa_offset 8
 2065              		.cfi_offset 3, -8
 2066              		.cfi_offset 14, -4
2159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2067              		.loc 1 2159 0
 2068 0002 806A     		ldr	r0, [r0, #40]
 2069              	.LVL149:
2162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2070              		.loc 1 2162 0
 2071 0004 826D     		ldr	r2, [r0, #88]
 2072 0006 4023     		mov	r3, #64
 2073 0008 1343     		orr	r3, r2
 2074 000a 8365     		str	r3, [r0, #88]
2165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2075              		.loc 1 2165 0
 2076 000c C26D     		ldr	r2, [r0, #92]
 2077 000e 0423     		mov	r3, #4
 2078 0010 1343     		orr	r3, r2
 2079 0012 C365     		str	r3, [r0, #92]
2168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2080              		.loc 1 2168 0
 2081 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2082              	.LVL150:
2169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
ARM GAS  /tmp/ccK9yGTA.s 			page 81


 2083              		.loc 1 2169 0
 2084              		@ sp needed
 2085 0018 08BD     		pop	{r3, pc}
 2086              		.cfi_endproc
 2087              	.LFE63:
 2089 001a C046     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2090              		.align	2
 2091              		.global	HAL_ADC_IRQHandler
 2092              		.code	16
 2093              		.thumb_func
 2095              	HAL_ADC_IRQHandler:
 2096              	.LFB49:
1413:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2097              		.loc 1 1413 0
 2098              		.cfi_startproc
 2099              	.LVL151:
 2100 0000 10B5     		push	{r4, lr}
 2101              	.LCFI18:
 2102              		.cfi_def_cfa_offset 8
 2103              		.cfi_offset 4, -8
 2104              		.cfi_offset 14, -4
 2105 0002 041C     		mov	r4, r0
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2106              		.loc 1 1420 0
 2107 0004 0368     		ldr	r3, [r0]
 2108 0006 1A68     		ldr	r2, [r3]
 2109 0008 5207     		lsl	r2, r2, #29
 2110 000a 02D5     		bpl	.L154
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2111              		.loc 1 1420 0 is_stmt 0 discriminator 1
 2112 000c 5A68     		ldr	r2, [r3, #4]
 2113 000e 5207     		lsl	r2, r2, #29
 2114 0010 05D4     		bmi	.L155
 2115              	.L154:
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2116              		.loc 1 1421 0 is_stmt 1 discriminator 3
 2117 0012 1A68     		ldr	r2, [r3]
1420:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2118              		.loc 1 1420 0 discriminator 3
 2119 0014 1207     		lsl	r2, r2, #28
 2120 0016 34D5     		bpl	.L156
1421:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2121              		.loc 1 1421 0
 2122 0018 5A68     		ldr	r2, [r3, #4]
 2123 001a 1207     		lsl	r2, r2, #28
 2124 001c 31D5     		bpl	.L156
 2125              	.L155:
1424:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2126              		.loc 1 1424 0
 2127 001e A26D     		ldr	r2, [r4, #88]
 2128 0020 D206     		lsl	r2, r2, #27
 2129 0022 04D4     		bmi	.L157
1427:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2130              		.loc 1 1427 0
 2131 0024 A26D     		ldr	r2, [r4, #88]
 2132 0026 8021     		mov	r1, #128
 2133 0028 8900     		lsl	r1, r1, #2
ARM GAS  /tmp/ccK9yGTA.s 			page 82


 2134 002a 0A43     		orr	r2, r1
 2135 002c A265     		str	r2, [r4, #88]
 2136              	.L157:
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2137              		.loc 1 1432 0
 2138 002e D968     		ldr	r1, [r3, #12]
 2139 0030 C022     		mov	r2, #192
 2140 0032 1201     		lsl	r2, r2, #4
 2141 0034 1142     		tst	r1, r2
 2142 0036 1BD1     		bne	.L158
1432:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2143              		.loc 1 1432 0 is_stmt 0 discriminator 1
 2144 0038 226A     		ldr	r2, [r4, #32]
 2145 003a 002A     		cmp	r2, #0
 2146 003c 18D1     		bne	.L158
1436:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       {
 2147              		.loc 1 1436 0 is_stmt 1
 2148 003e 1A68     		ldr	r2, [r3]
 2149 0040 1207     		lsl	r2, r2, #28
 2150 0042 15D5     		bpl	.L158
1440:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         {
 2151              		.loc 1 1440 0
 2152 0044 9A68     		ldr	r2, [r3, #8]
 2153 0046 5207     		lsl	r2, r2, #29
 2154 0048 0AD4     		bmi	.L159
1446:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2155              		.loc 1 1446 0
 2156 004a 5A68     		ldr	r2, [r3, #4]
 2157 004c 0C21     		mov	r1, #12
 2158 004e 8A43     		bic	r2, r1
 2159 0050 5A60     		str	r2, [r3, #4]
1449:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2160              		.loc 1 1449 0
 2161 0052 A26D     		ldr	r2, [r4, #88]
 2162 0054 214B     		ldr	r3, .L164
 2163 0056 1340     		and	r3, r2
 2164 0058 0122     		mov	r2, #1
 2165 005a 1343     		orr	r3, r2
 2166 005c A365     		str	r3, [r4, #88]
 2167 005e 07E0     		b	.L158
 2168              	.L159:
1456:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****           
 2169              		.loc 1 1456 0
 2170 0060 A26D     		ldr	r2, [r4, #88]
 2171 0062 2023     		mov	r3, #32
 2172 0064 1343     		orr	r3, r2
 2173 0066 A365     		str	r3, [r4, #88]
1459:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         }
 2174              		.loc 1 1459 0
 2175 0068 E26D     		ldr	r2, [r4, #92]
 2176 006a 0123     		mov	r3, #1
 2177 006c 1343     		orr	r3, r2
 2178 006e E365     		str	r3, [r4, #92]
 2179              	.L158:
1468:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2180              		.loc 1 1468 0
 2181 0070 201C     		mov	r0, r4
ARM GAS  /tmp/ccK9yGTA.s 			page 83


 2182              	.LVL152:
 2183 0072 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2184              	.LVL153:
1480:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2185              		.loc 1 1480 0
 2186 0076 A369     		ldr	r3, [r4, #24]
 2187 0078 012B     		cmp	r3, #1
 2188 007a 02D0     		beq	.L156
1482:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2189              		.loc 1 1482 0
 2190 007c 2368     		ldr	r3, [r4]
 2191 007e 0C22     		mov	r2, #12
 2192 0080 1A60     		str	r2, [r3]
 2193              	.L156:
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2194              		.loc 1 1487 0
 2195 0082 2368     		ldr	r3, [r4]
 2196 0084 1A68     		ldr	r2, [r3]
 2197 0086 1206     		lsl	r2, r2, #24
 2198 0088 0DD5     		bpl	.L160
1487:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2199              		.loc 1 1487 0 is_stmt 0 discriminator 1
 2200 008a 5B68     		ldr	r3, [r3, #4]
 2201 008c 1B06     		lsl	r3, r3, #24
 2202 008e 0AD5     		bpl	.L160
1490:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2203              		.loc 1 1490 0 is_stmt 1
 2204 0090 A36D     		ldr	r3, [r4, #88]
 2205 0092 8022     		mov	r2, #128
 2206 0094 5202     		lsl	r2, r2, #9
 2207 0096 1343     		orr	r3, r2
 2208 0098 A365     		str	r3, [r4, #88]
1493:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2209              		.loc 1 1493 0
 2210 009a 201C     		mov	r0, r4
 2211 009c FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2212              	.LVL154:
1496:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****    
 2213              		.loc 1 1496 0
 2214 00a0 2368     		ldr	r3, [r4]
 2215 00a2 8022     		mov	r2, #128
 2216 00a4 1A60     		str	r2, [r3]
 2217              	.L160:
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2218              		.loc 1 1502 0
 2219 00a6 2368     		ldr	r3, [r4]
 2220 00a8 1A68     		ldr	r2, [r3]
 2221 00aa D206     		lsl	r2, r2, #27
 2222 00ac 14D5     		bpl	.L153
1502:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2223              		.loc 1 1502 0 is_stmt 0 discriminator 1
 2224 00ae 5A68     		ldr	r2, [r3, #4]
 2225 00b0 D206     		lsl	r2, r2, #27
 2226 00b2 11D5     		bpl	.L153
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2227              		.loc 1 1510 0 is_stmt 1
 2228 00b4 626B     		ldr	r2, [r4, #52]
ARM GAS  /tmp/ccK9yGTA.s 			page 84


 2229 00b6 002A     		cmp	r2, #0
 2230 00b8 02D0     		beq	.L162
1511:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2231              		.loc 1 1511 0 discriminator 1
 2232 00ba DA68     		ldr	r2, [r3, #12]
1510:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2233              		.loc 1 1510 0 discriminator 1
 2234 00bc D207     		lsl	r2, r2, #31
 2235 00be 08D5     		bpl	.L163
 2236              	.L162:
1514:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2237              		.loc 1 1514 0
 2238 00c0 E16D     		ldr	r1, [r4, #92]
 2239 00c2 0222     		mov	r2, #2
 2240 00c4 0A43     		orr	r2, r1
 2241 00c6 E265     		str	r2, [r4, #92]
1517:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2242              		.loc 1 1517 0
 2243 00c8 1022     		mov	r2, #16
 2244 00ca 1A60     		str	r2, [r3]
1520:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2245              		.loc 1 1520 0
 2246 00cc 201C     		mov	r0, r4
 2247 00ce FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2248              	.LVL155:
 2249              	.L163:
1524:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2250              		.loc 1 1524 0
 2251 00d2 2368     		ldr	r3, [r4]
 2252 00d4 1022     		mov	r2, #16
 2253 00d6 1A60     		str	r2, [r3]
 2254              	.L153:
1527:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2255              		.loc 1 1527 0
 2256              		@ sp needed
 2257              	.LVL156:
 2258 00d8 10BD     		pop	{r4, pc}
 2259              	.L165:
 2260 00da C046     		.align	2
 2261              	.L164:
 2262 00dc FEFEFFFF 		.word	-258
 2263              		.cfi_endproc
 2264              	.LFE49:
 2266              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2267              		.align	2
 2268              		.global	HAL_ADC_ConfigChannel
 2269              		.code	16
 2270              		.thumb_func
 2272              	HAL_ADC_ConfigChannel:
 2273              	.LFB54:
1638:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2274              		.loc 1 1638 0
 2275              		.cfi_startproc
 2276              	.LVL157:
 2277 0000 38B5     		push	{r3, r4, r5, lr}
 2278              	.LCFI19:
 2279              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccK9yGTA.s 			page 85


 2280              		.cfi_offset 3, -16
 2281              		.cfi_offset 4, -12
 2282              		.cfi_offset 5, -8
 2283              		.cfi_offset 14, -4
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2284              		.loc 1 1645 0
 2285 0002 5423     		mov	r3, #84
 2286 0004 C35C     		ldrb	r3, [r0, r3]
 2287 0006 012B     		cmp	r3, #1
 2288 0008 4CD0     		beq	.L173
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2289              		.loc 1 1645 0 is_stmt 0 discriminator 2
 2290 000a 0122     		mov	r2, #1
 2291 000c 5423     		mov	r3, #84
 2292 000e C254     		strb	r2, [r0, r3]
1652:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2293              		.loc 1 1652 0 is_stmt 1 discriminator 2
 2294 0010 0268     		ldr	r2, [r0]
 2295 0012 9368     		ldr	r3, [r2, #8]
 2296 0014 5B07     		lsl	r3, r3, #29
 2297 0016 08D5     		bpl	.L168
1655:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Process unlocked */
 2298              		.loc 1 1655 0
 2299 0018 826D     		ldr	r2, [r0, #88]
 2300 001a 2023     		mov	r3, #32
 2301 001c 1343     		orr	r3, r2
 2302 001e 8365     		str	r3, [r0, #88]
1657:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     return HAL_ERROR;
 2303              		.loc 1 1657 0
 2304 0020 0022     		mov	r2, #0
 2305 0022 5423     		mov	r3, #84
 2306 0024 C254     		strb	r2, [r0, r3]
1658:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2307              		.loc 1 1658 0
 2308 0026 0120     		mov	r0, #1
 2309              	.LVL158:
 2310 0028 3DE0     		b	.L167
 2311              	.LVL159:
 2312              	.L168:
 2313 002a 0D1C     		mov	r5, r1
 2314 002c 041C     		mov	r4, r0
1661:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2315              		.loc 1 1661 0
 2316 002e 1E4B     		ldr	r3, .L174
 2317 0030 4968     		ldr	r1, [r1, #4]
 2318              	.LVL160:
 2319 0032 9942     		cmp	r1, r3
 2320 0034 1BD0     		beq	.L169
1664:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2321              		.loc 1 1664 0
 2322 0036 916A     		ldr	r1, [r2, #40]
 2323 0038 2B68     		ldr	r3, [r5]
 2324 003a 5B03     		lsl	r3, r3, #13
 2325 003c 5B0B     		lsr	r3, r3, #13
 2326 003e 0B43     		orr	r3, r1
 2327 0040 9362     		str	r3, [r2, #40]
1672:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccK9yGTA.s 			page 86


 2328              		.loc 1 1672 0
 2329 0042 2B68     		ldr	r3, [r5]
 2330 0044 5B03     		lsl	r3, r3, #13
 2331 0046 08D5     		bpl	.L170
1674:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****       
 2332              		.loc 1 1674 0
 2333 0048 184A     		ldr	r2, .L174+4
 2334 004a 1368     		ldr	r3, [r2]
 2335 004c 8021     		mov	r1, #128
 2336 004e 0904     		lsl	r1, r1, #16
 2337 0050 0B43     		orr	r3, r1
 2338 0052 1360     		str	r3, [r2]
1677:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2339              		.loc 1 1677 0
 2340 0054 0A20     		mov	r0, #10
 2341              	.LVL161:
 2342 0056 FFF7FEFF 		bl	ADC_DelayMicroSecond
 2343              	.LVL162:
 2344              	.L170:
1681:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2345              		.loc 1 1681 0
 2346 005a 2B68     		ldr	r3, [r5]
 2347 005c 9B03     		lsl	r3, r3, #14
 2348 005e 1CD5     		bpl	.L171
1683:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2349              		.loc 1 1683 0
 2350 0060 124A     		ldr	r2, .L174+4
 2351 0062 1368     		ldr	r3, [r2]
 2352 0064 8021     		mov	r1, #128
 2353 0066 C903     		lsl	r1, r1, #15
 2354 0068 0B43     		orr	r3, r1
 2355 006a 1360     		str	r3, [r2]
 2356 006c 15E0     		b	.L171
 2357              	.LVL163:
 2358              	.L169:
1698:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2359              		.loc 1 1698 0
 2360 006e 916A     		ldr	r1, [r2, #40]
 2361 0070 2B68     		ldr	r3, [r5]
 2362 0072 5B03     		lsl	r3, r3, #13
 2363 0074 5B0B     		lsr	r3, r3, #13
 2364 0076 9943     		bic	r1, r3
 2365 0078 9162     		str	r1, [r2, #40]
1703:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2366              		.loc 1 1703 0
 2367 007a 2B68     		ldr	r3, [r5]
 2368 007c 5B03     		lsl	r3, r3, #13
 2369 007e 04D5     		bpl	.L172
1705:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2370              		.loc 1 1705 0
 2371 0080 0A4A     		ldr	r2, .L174+4
 2372 0082 1168     		ldr	r1, [r2]
 2373 0084 0A4B     		ldr	r3, .L174+8
 2374 0086 0B40     		and	r3, r1
 2375 0088 1360     		str	r3, [r2]
 2376              	.L172:
1709:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccK9yGTA.s 			page 87


 2377              		.loc 1 1709 0
 2378 008a 2B68     		ldr	r3, [r5]
 2379 008c 9B03     		lsl	r3, r3, #14
 2380 008e 04D5     		bpl	.L171
1711:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2381              		.loc 1 1711 0
 2382 0090 064A     		ldr	r2, .L174+4
 2383 0092 1168     		ldr	r1, [r2]
 2384 0094 074B     		ldr	r3, .L174+12
 2385 0096 0B40     		and	r3, r1
 2386 0098 1360     		str	r3, [r2]
 2387              	.LVL164:
 2388              	.L171:
1724:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2389              		.loc 1 1724 0
 2390 009a 0022     		mov	r2, #0
 2391 009c 5423     		mov	r3, #84
 2392 009e E254     		strb	r2, [r4, r3]
1727:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2393              		.loc 1 1727 0
 2394 00a0 0020     		mov	r0, #0
 2395 00a2 00E0     		b	.L167
 2396              	.LVL165:
 2397              	.L173:
1645:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2398              		.loc 1 1645 0
 2399 00a4 0220     		mov	r0, #2
 2400              	.LVL166:
 2401              	.L167:
1728:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2402              		.loc 1 1728 0
 2403              		@ sp needed
 2404 00a6 38BD     		pop	{r3, r4, r5, pc}
 2405              	.L175:
 2406              		.align	2
 2407              	.L174:
 2408 00a8 01100000 		.word	4097
 2409 00ac 08270140 		.word	1073817352
 2410 00b0 FFFF7FFF 		.word	-8388609
 2411 00b4 FFFFBFFF 		.word	-4194305
 2412              		.cfi_endproc
 2413              	.LFE54:
 2415              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2416              		.align	2
 2417              		.global	HAL_ADC_AnalogWDGConfig
 2418              		.code	16
 2419              		.thumb_func
 2421              	HAL_ADC_AnalogWDGConfig:
 2422              	.LFB55:
1753:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2423              		.loc 1 1753 0
 2424              		.cfi_startproc
 2425              	.LVL167:
 2426 0000 70B5     		push	{r4, r5, r6, lr}
 2427              	.LCFI20:
 2428              		.cfi_def_cfa_offset 16
 2429              		.cfi_offset 4, -16
ARM GAS  /tmp/ccK9yGTA.s 			page 88


 2430              		.cfi_offset 5, -12
 2431              		.cfi_offset 6, -8
 2432              		.cfi_offset 14, -4
 2433              	.LVL168:
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2434              		.loc 1 1774 0
 2435 0002 5423     		mov	r3, #84
 2436 0004 C35C     		ldrb	r3, [r0, r3]
 2437 0006 012B     		cmp	r3, #1
 2438 0008 45D0     		beq	.L182
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2439              		.loc 1 1774 0 is_stmt 0 discriminator 2
 2440 000a 0122     		mov	r2, #1
 2441 000c 5423     		mov	r3, #84
 2442 000e C254     		strb	r2, [r0, r3]
1781:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   {
 2443              		.loc 1 1781 0 is_stmt 1 discriminator 2
 2444 0010 0368     		ldr	r3, [r0]
 2445 0012 9A68     		ldr	r2, [r3, #8]
 2446 0014 5207     		lsl	r2, r2, #29
 2447 0016 34D4     		bmi	.L178
1784:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     {
 2448              		.loc 1 1784 0
 2449 0018 8A68     		ldr	r2, [r1, #8]
 2450 001a 012A     		cmp	r2, #1
 2451 001c 04D1     		bne	.L179
1787:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2452              		.loc 1 1787 0
 2453 001e 5C68     		ldr	r4, [r3, #4]
 2454 0020 7F32     		add	r2, r2, #127
 2455 0022 2243     		orr	r2, r4
 2456 0024 5A60     		str	r2, [r3, #4]
 2457 0026 03E0     		b	.L180
 2458              	.L179:
1792:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     }
 2459              		.loc 1 1792 0
 2460 0028 5A68     		ldr	r2, [r3, #4]
 2461 002a 8024     		mov	r4, #128
 2462 002c A243     		bic	r2, r4
 2463 002e 5A60     		str	r2, [r3, #4]
 2464              	.L180:
1799:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                                ADC_CFGR1_AWDEN  |
 2465              		.loc 1 1799 0
 2466 0030 0268     		ldr	r2, [r0]
 2467 0032 D468     		ldr	r4, [r2, #12]
 2468 0034 194B     		ldr	r3, .L183
 2469 0036 2340     		and	r3, r4
 2470 0038 D360     		str	r3, [r2, #12]
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2471              		.loc 1 1803 0
 2472 003a 0268     		ldr	r2, [r0]
 2473 003c D468     		ldr	r4, [r2, #12]
1804:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2474              		.loc 1 1804 0
 2475 003e F823     		mov	r3, #248
 2476 0040 DB05     		lsl	r3, r3, #23
 2477 0042 4D68     		ldr	r5, [r1, #4]
ARM GAS  /tmp/ccK9yGTA.s 			page 89


 2478 0044 2B40     		and	r3, r5
1803:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****                               (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 2479              		.loc 1 1803 0
 2480 0046 0D68     		ldr	r5, [r1]
 2481 0048 2B43     		orr	r3, r5
 2482 004a 2343     		orr	r3, r4
 2483 004c D360     		str	r3, [r2, #12]
1809:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2484              		.loc 1 1809 0
 2485 004e 0568     		ldr	r5, [r0]
 2486 0050 EA68     		ldr	r2, [r5, #12]
 2487 0052 1826     		mov	r6, #24
 2488 0054 3240     		and	r2, r6
 2489 0056 9208     		lsr	r2, r2, #2
 2490 0058 CC68     		ldr	r4, [r1, #12]
 2491 005a 9440     		lsl	r4, r4, r2
 2492              	.LVL169:
1810:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2493              		.loc 1 1810 0
 2494 005c 0A69     		ldr	r2, [r1, #16]
 2495 005e EB68     		ldr	r3, [r5, #12]
 2496 0060 3340     		and	r3, r6
 2497 0062 9B08     		lsr	r3, r3, #2
 2498 0064 9A40     		lsl	r2, r2, r3
 2499 0066 131C     		mov	r3, r2
 2500              	.LVL170:
1813:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2501              		.loc 1 1813 0
 2502 0068 296A     		ldr	r1, [r5, #32]
 2503              	.LVL171:
 2504 006a 0D4A     		ldr	r2, .L183+4
 2505              	.LVL172:
 2506 006c 0A40     		and	r2, r1
 2507 006e 2A62     		str	r2, [r5, #32]
1816:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     /* Set the low threshold */
 2508              		.loc 1 1816 0
 2509 0070 0168     		ldr	r1, [r0]
 2510 0072 2204     		lsl	r2, r4, #16
 2511 0074 0A62     		str	r2, [r1, #32]
1818:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2512              		.loc 1 1818 0
 2513 0076 0268     		ldr	r2, [r0]
 2514 0078 116A     		ldr	r1, [r2, #32]
 2515 007a 0B43     		orr	r3, r1
 2516              	.LVL173:
 2517 007c 1362     		str	r3, [r2, #32]
1754:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2518              		.loc 1 1754 0
 2519 007e 0023     		mov	r3, #0
 2520 0080 04E0     		b	.L181
 2521              	.LVL174:
 2522              	.L178:
1825:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****     
 2523              		.loc 1 1825 0
 2524 0082 826D     		ldr	r2, [r0, #88]
 2525 0084 2023     		mov	r3, #32
 2526 0086 1343     		orr	r3, r2
ARM GAS  /tmp/ccK9yGTA.s 			page 90


 2527 0088 8365     		str	r3, [r0, #88]
 2528              	.LVL175:
1827:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   }
 2529              		.loc 1 1827 0
 2530 008a 0123     		mov	r3, #1
 2531              	.LVL176:
 2532              	.L181:
1831:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2533              		.loc 1 1831 0
 2534 008c 0021     		mov	r1, #0
 2535 008e 5422     		mov	r2, #84
 2536 0090 8154     		strb	r1, [r0, r2]
1834:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2537              		.loc 1 1834 0
 2538 0092 181C     		mov	r0, r3
 2539              	.LVL177:
 2540 0094 00E0     		b	.L177
 2541              	.LVL178:
 2542              	.L182:
1774:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   
 2543              		.loc 1 1774 0
 2544 0096 0220     		mov	r0, #2
 2545              	.LVL179:
 2546              	.L177:
1835:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2547              		.loc 1 1835 0
 2548              		@ sp needed
 2549 0098 70BD     		pop	{r4, r5, r6, pc}
 2550              	.L184:
 2551 009a C046     		.align	2
 2552              	.L183:
 2553 009c FFFF3F83 		.word	-2092957697
 2554 00a0 00F000F0 		.word	-268374016
 2555              		.cfi_endproc
 2556              	.LFE55:
 2558              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2559              		.align	2
 2560              		.global	HAL_ADC_GetState
 2561              		.code	16
 2562              		.thumb_func
 2564              	HAL_ADC_GetState:
 2565              	.LFB56:
1870:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2566              		.loc 1 1870 0
 2567              		.cfi_startproc
 2568              	.LVL180:
1875:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2569              		.loc 1 1875 0
 2570 0000 806D     		ldr	r0, [r0, #88]
 2571              	.LVL181:
1876:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2572              		.loc 1 1876 0
 2573              		@ sp needed
 2574 0002 7047     		bx	lr
 2575              		.cfi_endproc
 2576              	.LFE56:
 2578              		.section	.text.HAL_ADC_GetError,"ax",%progbits
ARM GAS  /tmp/ccK9yGTA.s 			page 91


 2579              		.align	2
 2580              		.global	HAL_ADC_GetError
 2581              		.code	16
 2582              		.thumb_func
 2584              	HAL_ADC_GetError:
 2585              	.LFB57:
1884:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c ****   /* Check the parameters */
 2586              		.loc 1 1884 0
 2587              		.cfi_startproc
 2588              	.LVL182:
1888:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** }
 2589              		.loc 1 1888 0
 2590 0000 C06D     		ldr	r0, [r0, #92]
 2591              	.LVL183:
1889:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c **** 
 2592              		.loc 1 1889 0
 2593              		@ sp needed
 2594 0002 7047     		bx	lr
 2595              		.cfi_endproc
 2596              	.LFE57:
 2598              		.text
 2599              	.Letext0:
 2600              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2601              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2602              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
 2603              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 2604              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2605              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2606              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 2607              		.file 9 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 2608              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /tmp/ccK9yGTA.s 			page 92


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_hal_adc.c
     /tmp/ccK9yGTA.s:19     .text.ADC_DelayMicroSecond:0000000000000000 $t
     /tmp/ccK9yGTA.s:23     .text.ADC_DelayMicroSecond:0000000000000000 ADC_DelayMicroSecond
     /tmp/ccK9yGTA.s:67     .text.ADC_DelayMicroSecond:0000000000000028 $d
     /tmp/ccK9yGTA.s:73     .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccK9yGTA.s:77     .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccK9yGTA.s:160    .text.ADC_Disable:0000000000000000 $t
     /tmp/ccK9yGTA.s:164    .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccK9yGTA.s:280    .text.ADC_Enable:0000000000000000 $t
     /tmp/ccK9yGTA.s:284    .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccK9yGTA.s:400    .text.ADC_Enable:0000000000000084 $d
     /tmp/ccK9yGTA.s:405    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccK9yGTA.s:410    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccK9yGTA.s:422    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccK9yGTA.s:427    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccK9yGTA.s:756    .text.HAL_ADC_Init:00000000000001cc $d
     /tmp/ccK9yGTA.s:766    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccK9yGTA.s:771    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccK9yGTA.s:783    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccK9yGTA.s:788    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccK9yGTA.s:916    .text.HAL_ADC_DeInit:000000000000009c $d
     /tmp/ccK9yGTA.s:926    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccK9yGTA.s:931    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccK9yGTA.s:1018   .text.HAL_ADC_Start:000000000000005c $d
     /tmp/ccK9yGTA.s:1023   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccK9yGTA.s:1028   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccK9yGTA.s:1090   .text.HAL_ADC_Stop:000000000000003c $d
     /tmp/ccK9yGTA.s:1095   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccK9yGTA.s:1100   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccK9yGTA.s:1260   .text.HAL_ADC_PollForConversion:00000000000000c4 $d
     /tmp/ccK9yGTA.s:1265   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccK9yGTA.s:1270   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccK9yGTA.s:1379   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccK9yGTA.s:1384   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccK9yGTA.s:1497   .text.HAL_ADC_Start_IT:0000000000000084 $d
     /tmp/ccK9yGTA.s:1502   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccK9yGTA.s:1507   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccK9yGTA.s:1575   .text.HAL_ADC_Stop_IT:0000000000000048 $d
     /tmp/ccK9yGTA.s:1580   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccK9yGTA.s:1585   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccK9yGTA.s:1715   .text.HAL_ADC_Start_DMA:0000000000000098 $d
     /tmp/ccK9yGTA.s:1881   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccK9yGTA.s:1996   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccK9yGTA.s:2057   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccK9yGTA.s:1723   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccK9yGTA.s:1728   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccK9yGTA.s:1834   .text.HAL_ADC_Stop_DMA:0000000000000074 $d
     /tmp/ccK9yGTA.s:1839   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccK9yGTA.s:1844   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccK9yGTA.s:1860   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccK9yGTA.s:1865   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccK9yGTA.s:1877   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccK9yGTA.s:1970   .text.ADC_DMAConvCplt:000000000000006c $d
     /tmp/ccK9yGTA.s:1975   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccK9yGTA.s:1980   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccK9yGTA.s:1992   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
ARM GAS  /tmp/ccK9yGTA.s 			page 93


     /tmp/ccK9yGTA.s:2019   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccK9yGTA.s:2024   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccK9yGTA.s:2036   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccK9yGTA.s:2041   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccK9yGTA.s:2053   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccK9yGTA.s:2090   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccK9yGTA.s:2095   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccK9yGTA.s:2262   .text.HAL_ADC_IRQHandler:00000000000000dc $d
     /tmp/ccK9yGTA.s:2267   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccK9yGTA.s:2272   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccK9yGTA.s:2408   .text.HAL_ADC_ConfigChannel:00000000000000a8 $d
     /tmp/ccK9yGTA.s:2416   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccK9yGTA.s:2421   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccK9yGTA.s:2553   .text.HAL_ADC_AnalogWDGConfig:000000000000009c $d
     /tmp/ccK9yGTA.s:2559   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccK9yGTA.s:2564   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccK9yGTA.s:2579   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccK9yGTA.s:2584   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
