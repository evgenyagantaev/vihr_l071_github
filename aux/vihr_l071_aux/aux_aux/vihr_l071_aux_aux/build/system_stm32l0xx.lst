ARM GAS  /tmp/ccrcWDvg.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32l0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	2
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB36:
  25              		.file 1 "Src/system_stm32l0xx.c"
   1:Src/system_stm32l0xx.c **** /**
   2:Src/system_stm32l0xx.c ****   ******************************************************************************
   3:Src/system_stm32l0xx.c ****   * @file    system_stm32l0xx.c
   4:Src/system_stm32l0xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32l0xx.c ****   * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer System Source File.
   6:Src/system_stm32l0xx.c ****   *
   7:Src/system_stm32l0xx.c ****   *   This file provides two functions and one global variable to be called from 
   8:Src/system_stm32l0xx.c ****   *   user application:
   9:Src/system_stm32l0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32l0xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32l0xx.c ****   *                      the "startup_stm32l0xx.s" file.
  12:Src/system_stm32l0xx.c ****   *
  13:Src/system_stm32l0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32l0xx.c ****   *                                  by the user application to setup the SysTick 
  15:Src/system_stm32l0xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32l0xx.c ****   *                                     
  17:Src/system_stm32l0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32l0xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32l0xx.c ****   *                                 during program execution.
  20:Src/system_stm32l0xx.c ****   *
  21:Src/system_stm32l0xx.c ****   *
  22:Src/system_stm32l0xx.c ****   ******************************************************************************
  23:Src/system_stm32l0xx.c ****   * @attention
  24:Src/system_stm32l0xx.c ****   *
  25:Src/system_stm32l0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  26:Src/system_stm32l0xx.c ****   *
  27:Src/system_stm32l0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  28:Src/system_stm32l0xx.c ****   * are permitted provided that the following conditions are met:
  29:Src/system_stm32l0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  30:Src/system_stm32l0xx.c ****   *      this list of conditions and the following disclaimer.
  31:Src/system_stm32l0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  32:Src/system_stm32l0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  33:Src/system_stm32l0xx.c ****   *      and/or other materials provided with the distribution.
ARM GAS  /tmp/ccrcWDvg.s 			page 2


  34:Src/system_stm32l0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  35:Src/system_stm32l0xx.c ****   *      may be used to endorse or promote products derived from this software
  36:Src/system_stm32l0xx.c ****   *      without specific prior written permission.
  37:Src/system_stm32l0xx.c ****   *
  38:Src/system_stm32l0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  39:Src/system_stm32l0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  40:Src/system_stm32l0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  41:Src/system_stm32l0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  42:Src/system_stm32l0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  43:Src/system_stm32l0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  44:Src/system_stm32l0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  45:Src/system_stm32l0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  46:Src/system_stm32l0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  47:Src/system_stm32l0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  48:Src/system_stm32l0xx.c ****   *
  49:Src/system_stm32l0xx.c ****   ******************************************************************************
  50:Src/system_stm32l0xx.c ****   */
  51:Src/system_stm32l0xx.c **** 
  52:Src/system_stm32l0xx.c **** /** @addtogroup CMSIS
  53:Src/system_stm32l0xx.c ****   * @{
  54:Src/system_stm32l0xx.c ****   */
  55:Src/system_stm32l0xx.c **** 
  56:Src/system_stm32l0xx.c **** /** @addtogroup stm32l0xx_system
  57:Src/system_stm32l0xx.c ****   * @{
  58:Src/system_stm32l0xx.c ****   */  
  59:Src/system_stm32l0xx.c ****   
  60:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Includes
  61:Src/system_stm32l0xx.c ****   * @{
  62:Src/system_stm32l0xx.c ****   */
  63:Src/system_stm32l0xx.c **** 
  64:Src/system_stm32l0xx.c **** #include "stm32l0xx.h"
  65:Src/system_stm32l0xx.c **** 
  66:Src/system_stm32l0xx.c **** #if !defined  (HSE_VALUE) 
  67:Src/system_stm32l0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000U) /*!< Value of the External oscillator in Hz */
  68:Src/system_stm32l0xx.c **** #endif /* HSE_VALUE */
  69:Src/system_stm32l0xx.c **** 
  70:Src/system_stm32l0xx.c **** #if !defined  (MSI_VALUE)
  71:Src/system_stm32l0xx.c ****   #define MSI_VALUE    ((uint32_t)2000000U) /*!< Value of the Internal oscillator in Hz*/
  72:Src/system_stm32l0xx.c **** #endif /* MSI_VALUE */
  73:Src/system_stm32l0xx.c ****    
  74:Src/system_stm32l0xx.c **** #if !defined  (HSI_VALUE)
  75:Src/system_stm32l0xx.c ****   #define HSI_VALUE    ((uint32_t)16000000U) /*!< Value of the Internal oscillator in Hz*/
  76:Src/system_stm32l0xx.c **** #endif /* HSI_VALUE */
  77:Src/system_stm32l0xx.c **** 
  78:Src/system_stm32l0xx.c **** 
  79:Src/system_stm32l0xx.c **** /**
  80:Src/system_stm32l0xx.c ****   * @}
  81:Src/system_stm32l0xx.c ****   */
  82:Src/system_stm32l0xx.c **** 
  83:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_TypesDefinitions
  84:Src/system_stm32l0xx.c ****   * @{
  85:Src/system_stm32l0xx.c ****   */
  86:Src/system_stm32l0xx.c **** 
  87:Src/system_stm32l0xx.c **** /**
  88:Src/system_stm32l0xx.c ****   * @}
  89:Src/system_stm32l0xx.c ****   */
  90:Src/system_stm32l0xx.c **** 
ARM GAS  /tmp/ccrcWDvg.s 			page 3


  91:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Defines
  92:Src/system_stm32l0xx.c ****   * @{
  93:Src/system_stm32l0xx.c ****   */
  94:Src/system_stm32l0xx.c **** /************************* Miscellaneous Configuration ************************/
  95:Src/system_stm32l0xx.c **** 
  96:Src/system_stm32l0xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
  97:Src/system_stm32l0xx.c ****      Internal SRAM. */
  98:Src/system_stm32l0xx.c **** /* #define VECT_TAB_SRAM */
  99:Src/system_stm32l0xx.c **** #define VECT_TAB_OFFSET  0x00U /*!< Vector Table base offset field. 
 100:Src/system_stm32l0xx.c ****                                    This value must be a multiple of 0x200. */
 101:Src/system_stm32l0xx.c **** /******************************************************************************/
 102:Src/system_stm32l0xx.c **** /**
 103:Src/system_stm32l0xx.c ****   * @}
 104:Src/system_stm32l0xx.c ****   */
 105:Src/system_stm32l0xx.c **** 
 106:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Macros
 107:Src/system_stm32l0xx.c ****   * @{
 108:Src/system_stm32l0xx.c ****   */
 109:Src/system_stm32l0xx.c **** 
 110:Src/system_stm32l0xx.c **** /**
 111:Src/system_stm32l0xx.c ****   * @}
 112:Src/system_stm32l0xx.c ****   */
 113:Src/system_stm32l0xx.c **** 
 114:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Variables
 115:Src/system_stm32l0xx.c ****   * @{
 116:Src/system_stm32l0xx.c ****   */
 117:Src/system_stm32l0xx.c ****   /* This variable is updated in three ways:
 118:Src/system_stm32l0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 119:Src/system_stm32l0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 120:Src/system_stm32l0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency 
 121:Src/system_stm32l0xx.c ****          Note: If you use this function to configure the system clock; then there
 122:Src/system_stm32l0xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 123:Src/system_stm32l0xx.c ****                variable is updated automatically.
 124:Src/system_stm32l0xx.c ****   */
 125:Src/system_stm32l0xx.c ****   uint32_t SystemCoreClock = 2000000U;
 126:Src/system_stm32l0xx.c ****   const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U
 127:Src/system_stm32l0xx.c ****   const uint8_t APBPrescTable[8] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 128:Src/system_stm32l0xx.c ****   const uint8_t PLLMulTable[9] = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};
 129:Src/system_stm32l0xx.c **** 
 130:Src/system_stm32l0xx.c **** /**
 131:Src/system_stm32l0xx.c ****   * @}
 132:Src/system_stm32l0xx.c ****   */
 133:Src/system_stm32l0xx.c **** 
 134:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_FunctionPrototypes
 135:Src/system_stm32l0xx.c ****   * @{
 136:Src/system_stm32l0xx.c ****   */
 137:Src/system_stm32l0xx.c **** 
 138:Src/system_stm32l0xx.c **** /**
 139:Src/system_stm32l0xx.c ****   * @}
 140:Src/system_stm32l0xx.c ****   */
 141:Src/system_stm32l0xx.c **** 
 142:Src/system_stm32l0xx.c **** /** @addtogroup STM32L0xx_System_Private_Functions
 143:Src/system_stm32l0xx.c ****   * @{
 144:Src/system_stm32l0xx.c ****   */
 145:Src/system_stm32l0xx.c **** 
 146:Src/system_stm32l0xx.c **** /**
 147:Src/system_stm32l0xx.c ****   * @brief  Setup the microcontroller system.
ARM GAS  /tmp/ccrcWDvg.s 			page 4


 148:Src/system_stm32l0xx.c ****   * @param  None
 149:Src/system_stm32l0xx.c ****   * @retval None
 150:Src/system_stm32l0xx.c ****   */
 151:Src/system_stm32l0xx.c **** void SystemInit (void)
 152:Src/system_stm32l0xx.c **** {    
  26              		.loc 1 152 0
  27              		.cfi_startproc
 153:Src/system_stm32l0xx.c **** /*!< Set MSION bit */
 154:Src/system_stm32l0xx.c ****   RCC->CR |= (uint32_t)0x00000100U;
  28              		.loc 1 154 0
  29 0000 104B     		ldr	r3, .L2
  30 0002 1A68     		ldr	r2, [r3]
  31 0004 8021     		mov	r1, #128
  32 0006 4900     		lsl	r1, r1, #1
  33 0008 0A43     		orr	r2, r1
  34 000a 1A60     		str	r2, [r3]
 155:Src/system_stm32l0xx.c **** 
 156:Src/system_stm32l0xx.c ****   /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
 157:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t) 0x88FF400CU;
  35              		.loc 1 157 0
  36 000c D968     		ldr	r1, [r3, #12]
  37 000e 0E4A     		ldr	r2, .L2+4
  38 0010 0A40     		and	r2, r1
  39 0012 DA60     		str	r2, [r3, #12]
 158:Src/system_stm32l0xx.c ****  
 159:Src/system_stm32l0xx.c ****   /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
 160:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFF6U;
  40              		.loc 1 160 0
  41 0014 1968     		ldr	r1, [r3]
  42 0016 0D4A     		ldr	r2, .L2+8
  43 0018 0A40     		and	r2, r1
  44 001a 1A60     		str	r2, [r3]
 161:Src/system_stm32l0xx.c ****   
 162:Src/system_stm32l0xx.c ****   /*!< Reset HSI48ON  bit */
 163:Src/system_stm32l0xx.c ****   RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
  45              		.loc 1 163 0
  46 001c 9A68     		ldr	r2, [r3, #8]
  47 001e 0121     		mov	r1, #1
  48 0020 8A43     		bic	r2, r1
  49 0022 9A60     		str	r2, [r3, #8]
 164:Src/system_stm32l0xx.c ****   
 165:Src/system_stm32l0xx.c ****   /*!< Reset HSEBYP bit */
 166:Src/system_stm32l0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
  50              		.loc 1 166 0
  51 0024 1968     		ldr	r1, [r3]
  52 0026 0A4A     		ldr	r2, .L2+12
  53 0028 0A40     		and	r2, r1
  54 002a 1A60     		str	r2, [r3]
 167:Src/system_stm32l0xx.c **** 
 168:Src/system_stm32l0xx.c ****   /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
 169:Src/system_stm32l0xx.c ****   RCC->CFGR &= (uint32_t)0xFF02FFFFU;
  55              		.loc 1 169 0
  56 002c D968     		ldr	r1, [r3, #12]
  57 002e 094A     		ldr	r2, .L2+16
  58 0030 0A40     		and	r2, r1
  59 0032 DA60     		str	r2, [r3, #12]
 170:Src/system_stm32l0xx.c **** 
ARM GAS  /tmp/ccrcWDvg.s 			page 5


 171:Src/system_stm32l0xx.c ****   /*!< Disable all interrupts */
 172:Src/system_stm32l0xx.c ****   RCC->CIER = 0x00000000U;
  60              		.loc 1 172 0
  61 0034 0022     		mov	r2, #0
  62 0036 1A61     		str	r2, [r3, #16]
 173:Src/system_stm32l0xx.c ****   
 174:Src/system_stm32l0xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 175:Src/system_stm32l0xx.c **** #ifdef VECT_TAB_SRAM
 176:Src/system_stm32l0xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 177:Src/system_stm32l0xx.c **** #else
 178:Src/system_stm32l0xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  63              		.loc 1 178 0
  64 0038 8022     		mov	r2, #128
  65 003a 1205     		lsl	r2, r2, #20
  66 003c 064B     		ldr	r3, .L2+20
  67 003e 9A60     		str	r2, [r3, #8]
 179:Src/system_stm32l0xx.c **** #endif
 180:Src/system_stm32l0xx.c **** }
  68              		.loc 1 180 0
  69              		@ sp needed
  70 0040 7047     		bx	lr
  71              	.L3:
  72 0042 C046     		.align	2
  73              	.L2:
  74 0044 00100240 		.word	1073876992
  75 0048 0C40FF88 		.word	-1996537844
  76 004c F6FFF6FE 		.word	-17367050
  77 0050 FFFFFBFF 		.word	-262145
  78 0054 FFFF02FF 		.word	-16580609
  79 0058 00ED00E0 		.word	-536810240
  80              		.cfi_endproc
  81              	.LFE36:
  83              		.global	__aeabi_uidiv
  84              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  85              		.align	2
  86              		.global	SystemCoreClockUpdate
  87              		.code	16
  88              		.thumb_func
  90              	SystemCoreClockUpdate:
  91              	.LFB37:
 181:Src/system_stm32l0xx.c **** 
 182:Src/system_stm32l0xx.c **** /**
 183:Src/system_stm32l0xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 184:Src/system_stm32l0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 185:Src/system_stm32l0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 186:Src/system_stm32l0xx.c ****   *         other parameters.
 187:Src/system_stm32l0xx.c ****   *           
 188:Src/system_stm32l0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 189:Src/system_stm32l0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 190:Src/system_stm32l0xx.c ****   *         based on this variable will be incorrect.         
 191:Src/system_stm32l0xx.c ****   *     
 192:Src/system_stm32l0xx.c ****   * @note   - The system frequency computed by this function is not the real 
 193:Src/system_stm32l0xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 194:Src/system_stm32l0xx.c ****   *           constant and the selected clock source:
 195:Src/system_stm32l0xx.c ****   *             
 196:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
 197:Src/system_stm32l0xx.c ****   *             value as defined by the MSI range.
ARM GAS  /tmp/ccrcWDvg.s 			page 6


 198:Src/system_stm32l0xx.c ****   *                                   
 199:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 200:Src/system_stm32l0xx.c ****   *                                              
 201:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 202:Src/system_stm32l0xx.c ****   *                          
 203:Src/system_stm32l0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 204:Src/system_stm32l0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 205:Src/system_stm32l0xx.c ****   *         
 206:Src/system_stm32l0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 207:Src/system_stm32l0xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 208:Src/system_stm32l0xx.c ****   *             in voltage and temperature.   
 209:Src/system_stm32l0xx.c ****   *    
 210:Src/system_stm32l0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32l0xx_hal.h file (default value
 211:Src/system_stm32l0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 212:Src/system_stm32l0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 213:Src/system_stm32l0xx.c ****   *              have wrong result.
 214:Src/system_stm32l0xx.c ****   *                
 215:Src/system_stm32l0xx.c ****   *         - The result of this function could be not correct when using fractional
 216:Src/system_stm32l0xx.c ****   *           value for HSE crystal.
 217:Src/system_stm32l0xx.c ****   * @param  None
 218:Src/system_stm32l0xx.c ****   * @retval None
 219:Src/system_stm32l0xx.c ****   */
 220:Src/system_stm32l0xx.c **** void SystemCoreClockUpdate (void)
 221:Src/system_stm32l0xx.c **** {
  92              		.loc 1 221 0
  93              		.cfi_startproc
  94 0000 08B5     		push	{r3, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 3, -8
  98              		.cfi_offset 14, -4
  99              	.LVL0:
 222:Src/system_stm32l0xx.c ****   uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 223:Src/system_stm32l0xx.c **** 
 224:Src/system_stm32l0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 225:Src/system_stm32l0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 100              		.loc 1 225 0
 101 0002 2A4B     		ldr	r3, .L13
 102 0004 DB68     		ldr	r3, [r3, #12]
 103 0006 0C22     		mov	r2, #12
 104 0008 1340     		and	r3, r2
 105              	.LVL1:
 226:Src/system_stm32l0xx.c ****   
 227:Src/system_stm32l0xx.c ****   switch (tmp)
 106              		.loc 1 227 0
 107 000a 042B     		cmp	r3, #4
 108 000c 14D0     		beq	.L6
 109 000e 02D8     		bhi	.L7
 110 0010 002B     		cmp	r3, #0
 111 0012 05D0     		beq	.L8
 112 0014 33E0     		b	.L5
 113              	.L7:
 114 0016 082B     		cmp	r3, #8
 115 0018 12D0     		beq	.L9
 116 001a 0C2B     		cmp	r3, #12
 117 001c 14D0     		beq	.L10
 118 001e 2EE0     		b	.L5
ARM GAS  /tmp/ccrcWDvg.s 			page 7


 119              	.L8:
 228:Src/system_stm32l0xx.c ****   {
 229:Src/system_stm32l0xx.c ****     case 0x00U:  /* MSI used as system clock */
 230:Src/system_stm32l0xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 120              		.loc 1 230 0
 121 0020 224B     		ldr	r3, .L13
 122              	.LVL2:
 123 0022 5B68     		ldr	r3, [r3, #4]
 124 0024 1B04     		lsl	r3, r3, #16
 125 0026 5B0F     		lsr	r3, r3, #29
 126              	.LVL3:
 231:Src/system_stm32l0xx.c ****       SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 127              		.loc 1 231 0
 128 0028 0133     		add	r3, r3, #1
 129              	.LVL4:
 130 002a 8022     		mov	r2, #128
 131 002c 1202     		lsl	r2, r2, #8
 132 002e 9A40     		lsl	r2, r2, r3
 133 0030 131C     		mov	r3, r2
 134              	.LVL5:
 135 0032 1F4A     		ldr	r2, .L13+4
 136 0034 1360     		str	r3, [r2]
 232:Src/system_stm32l0xx.c ****       break;
 137              		.loc 1 232 0
 138 0036 2DE0     		b	.L11
 139              	.LVL6:
 140              	.L6:
 233:Src/system_stm32l0xx.c ****     case 0x04U:  /* HSI used as system clock */
 234:Src/system_stm32l0xx.c ****       SystemCoreClock = HSI_VALUE;
 141              		.loc 1 234 0
 142 0038 1E4A     		ldr	r2, .L13+8
 143 003a 1D4B     		ldr	r3, .L13+4
 144              	.LVL7:
 145 003c 1A60     		str	r2, [r3]
 235:Src/system_stm32l0xx.c ****       break;
 146              		.loc 1 235 0
 147 003e 29E0     		b	.L11
 148              	.LVL8:
 149              	.L9:
 236:Src/system_stm32l0xx.c ****     case 0x08U:  /* HSE used as system clock */
 237:Src/system_stm32l0xx.c ****       SystemCoreClock = HSE_VALUE;
 150              		.loc 1 237 0
 151 0040 1D4A     		ldr	r2, .L13+12
 152 0042 1B4B     		ldr	r3, .L13+4
 153              	.LVL9:
 154 0044 1A60     		str	r2, [r3]
 238:Src/system_stm32l0xx.c ****       break;
 155              		.loc 1 238 0
 156 0046 25E0     		b	.L11
 157              	.LVL10:
 158              	.L10:
 239:Src/system_stm32l0xx.c ****     case 0x0CU:  /* PLL used as system clock */
 240:Src/system_stm32l0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 241:Src/system_stm32l0xx.c ****       pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 159              		.loc 1 241 0
 160 0048 184A     		ldr	r2, .L13
 161 004a D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccrcWDvg.s 			page 8


 162              	.LVL11:
 163 004c 9B02     		lsl	r3, r3, #10
 164              	.LVL12:
 242:Src/system_stm32l0xx.c ****       plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 165              		.loc 1 242 0
 166 004e D168     		ldr	r1, [r2, #12]
 167 0050 0902     		lsl	r1, r1, #8
 168              	.LVL13:
 243:Src/system_stm32l0xx.c ****       pllmul = PLLMulTable[(pllmul >> 18U)];
 169              		.loc 1 243 0
 170 0052 1B0F     		lsr	r3, r3, #28
 171 0054 1948     		ldr	r0, .L13+16
 172 0056 C05C     		ldrb	r0, [r0, r3]
 173              	.LVL14:
 244:Src/system_stm32l0xx.c ****       plldiv = (plldiv >> 22U) + 1U;
 174              		.loc 1 244 0
 175 0058 890F     		lsr	r1, r1, #30
 176 005a 0131     		add	r1, r1, #1
 177              	.LVL15:
 245:Src/system_stm32l0xx.c ****       
 246:Src/system_stm32l0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 178              		.loc 1 246 0
 179 005c D368     		ldr	r3, [r2, #12]
 180              	.LVL16:
 247:Src/system_stm32l0xx.c **** 
 248:Src/system_stm32l0xx.c ****       if (pllsource == 0x00U)
 181              		.loc 1 248 0
 182 005e DB03     		lsl	r3, r3, #15
 183 0060 06D4     		bmi	.L12
 184              	.LVL17:
 249:Src/system_stm32l0xx.c ****       {
 250:Src/system_stm32l0xx.c ****         /* HSI oscillator clock selected as PLL clock entry */
 251:Src/system_stm32l0xx.c ****         SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 185              		.loc 1 251 0
 186 0062 144B     		ldr	r3, .L13+8
 187 0064 5843     		mul	r0, r3
 188              	.LVL18:
 189 0066 FFF7FEFF 		bl	__aeabi_uidiv
 190              	.LVL19:
 191 006a 114B     		ldr	r3, .L13+4
 192 006c 1860     		str	r0, [r3]
 193 006e 11E0     		b	.L11
 194              	.LVL20:
 195              	.L12:
 252:Src/system_stm32l0xx.c ****       }
 253:Src/system_stm32l0xx.c ****       else
 254:Src/system_stm32l0xx.c ****       {
 255:Src/system_stm32l0xx.c ****         /* HSE selected as PLL clock entry */
 256:Src/system_stm32l0xx.c ****         SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 196              		.loc 1 256 0
 197 0070 114B     		ldr	r3, .L13+12
 198 0072 5843     		mul	r0, r3
 199              	.LVL21:
 200 0074 FFF7FEFF 		bl	__aeabi_uidiv
 201              	.LVL22:
 202 0078 0D4B     		ldr	r3, .L13+4
 203 007a 1860     		str	r0, [r3]
ARM GAS  /tmp/ccrcWDvg.s 			page 9


 204 007c 0AE0     		b	.L11
 205              	.LVL23:
 206              	.L5:
 257:Src/system_stm32l0xx.c ****       }
 258:Src/system_stm32l0xx.c ****       break;
 259:Src/system_stm32l0xx.c ****     default: /* MSI used as system clock */
 260:Src/system_stm32l0xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13U;
 207              		.loc 1 260 0
 208 007e 0B4B     		ldr	r3, .L13
 209              	.LVL24:
 210 0080 5B68     		ldr	r3, [r3, #4]
 211 0082 1B04     		lsl	r3, r3, #16
 212 0084 5B0F     		lsr	r3, r3, #29
 213              	.LVL25:
 261:Src/system_stm32l0xx.c ****       SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 214              		.loc 1 261 0
 215 0086 0133     		add	r3, r3, #1
 216              	.LVL26:
 217 0088 8022     		mov	r2, #128
 218 008a 1202     		lsl	r2, r2, #8
 219 008c 9A40     		lsl	r2, r2, r3
 220 008e 131C     		mov	r3, r2
 221              	.LVL27:
 222 0090 074A     		ldr	r2, .L13+4
 223 0092 1360     		str	r3, [r2]
 224              	.LVL28:
 225              	.L11:
 262:Src/system_stm32l0xx.c ****       break;
 263:Src/system_stm32l0xx.c ****   }
 264:Src/system_stm32l0xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
 265:Src/system_stm32l0xx.c ****   /* Get HCLK prescaler */
 266:Src/system_stm32l0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 226              		.loc 1 266 0
 227 0094 054B     		ldr	r3, .L13
 228 0096 DB68     		ldr	r3, [r3, #12]
 229 0098 1B06     		lsl	r3, r3, #24
 230 009a 1B0F     		lsr	r3, r3, #28
 231 009c 084A     		ldr	r2, .L13+20
 232 009e D35C     		ldrb	r3, [r2, r3]
 233              	.LVL29:
 267:Src/system_stm32l0xx.c ****   /* HCLK clock frequency */
 268:Src/system_stm32l0xx.c ****   SystemCoreClock >>= tmp;
 234              		.loc 1 268 0
 235 00a0 034A     		ldr	r2, .L13+4
 236 00a2 1168     		ldr	r1, [r2]
 237 00a4 D940     		lsr	r1, r1, r3
 238 00a6 1160     		str	r1, [r2]
 269:Src/system_stm32l0xx.c **** }
 239              		.loc 1 269 0
 240              		@ sp needed
 241 00a8 08BD     		pop	{r3, pc}
 242              	.L14:
 243 00aa C046     		.align	2
 244              	.L13:
 245 00ac 00100240 		.word	1073876992
 246 00b0 00000000 		.word	.LANCHOR0
 247 00b4 0024F400 		.word	16000000
ARM GAS  /tmp/ccrcWDvg.s 			page 10


 248 00b8 00127A00 		.word	8000000
 249 00bc 00000000 		.word	.LANCHOR1
 250 00c0 00000000 		.word	.LANCHOR2
 251              		.cfi_endproc
 252              	.LFE37:
 254              		.global	PLLMulTable
 255              		.global	APBPrescTable
 256              		.global	AHBPrescTable
 257              		.global	SystemCoreClock
 258              		.section	.rodata.AHBPrescTable,"a",%progbits
 259              		.align	2
 260              		.set	.LANCHOR2,. + 0
 263              	AHBPrescTable:
 264 0000 00       		.byte	0
 265 0001 00       		.byte	0
 266 0002 00       		.byte	0
 267 0003 00       		.byte	0
 268 0004 00       		.byte	0
 269 0005 00       		.byte	0
 270 0006 00       		.byte	0
 271 0007 00       		.byte	0
 272 0008 01       		.byte	1
 273 0009 02       		.byte	2
 274 000a 03       		.byte	3
 275 000b 04       		.byte	4
 276 000c 06       		.byte	6
 277 000d 07       		.byte	7
 278 000e 08       		.byte	8
 279 000f 09       		.byte	9
 280              		.section	.rodata.APBPrescTable,"a",%progbits
 281              		.align	2
 284              	APBPrescTable:
 285 0000 00       		.byte	0
 286 0001 00       		.byte	0
 287 0002 00       		.byte	0
 288 0003 00       		.byte	0
 289 0004 01       		.byte	1
 290 0005 02       		.byte	2
 291 0006 03       		.byte	3
 292 0007 04       		.byte	4
 293              		.section	.rodata.PLLMulTable,"a",%progbits
 294              		.align	2
 295              		.set	.LANCHOR1,. + 0
 298              	PLLMulTable:
 299 0000 03       		.byte	3
 300 0001 04       		.byte	4
 301 0002 06       		.byte	6
 302 0003 08       		.byte	8
 303 0004 0C       		.byte	12
 304 0005 10       		.byte	16
 305 0006 18       		.byte	24
 306 0007 20       		.byte	32
 307 0008 30       		.byte	48
 308              		.section	.data.SystemCoreClock,"aw",%progbits
 309              		.align	2
 310              		.set	.LANCHOR0,. + 0
 313              	SystemCoreClock:
ARM GAS  /tmp/ccrcWDvg.s 			page 11


 314 0000 80841E00 		.word	2000000
 315              		.text
 316              	.Letext0:
 317              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 318              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 319              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 320              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l071xx.h"
ARM GAS  /tmp/ccrcWDvg.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32l0xx.c
     /tmp/ccrcWDvg.s:18     .text.SystemInit:0000000000000000 $t
     /tmp/ccrcWDvg.s:23     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccrcWDvg.s:74     .text.SystemInit:0000000000000044 $d
     /tmp/ccrcWDvg.s:85     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccrcWDvg.s:90     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccrcWDvg.s:245    .text.SystemCoreClockUpdate:00000000000000ac $d
     /tmp/ccrcWDvg.s:298    .rodata.PLLMulTable:0000000000000000 PLLMulTable
     /tmp/ccrcWDvg.s:284    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccrcWDvg.s:263    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccrcWDvg.s:313    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccrcWDvg.s:259    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccrcWDvg.s:281    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccrcWDvg.s:294    .rodata.PLLMulTable:0000000000000000 $d
     /tmp/ccrcWDvg.s:309    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
